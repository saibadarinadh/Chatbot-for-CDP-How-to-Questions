{
  "title": "No Title",
  "content": "## Documentation\n\n## Developers\nData Subject Request API Version 1 and 2\nData Subject Request API Version 3\nPlatform API Overview\nAccounts\nApps\nAudiences\nCalculated Attributes\nData Points\nFeeds\nField Transformations\nServices\nUsers\nWorkspaces\nWarehouse Sync API Overview\nWarehouse Sync API Tutorial\nWarehouse Sync API Reference\nData Mapping\nWarehouse Sync SQL Reference\nWarehouse Sync Troubleshooting Guide\nComposeID\nWarehouse Sync API v2 Migration\nBulk Profile Deletion API Reference\nCalculated Attributes Seeding API\nCustom Access Roles API\nGroup Identity API Reference\nData Planning API\nPixel Service\nProfile API\nEvents API\nmParticle JSON Schema Reference\nIDSync\niOS\nAndroid\nWeb\nOverview\nStep 1. Create an input\nStep 2. Verify your input\nStep 3. Set up your output\nStep 4. Create a connection\nStep 5. Verify your connection\nStep 6. Track events\nStep 7. Track user data\nStep 8. Create a data plan\nStep 9. Test your local app\nStep 1. Create an input\nStep 2. Create an output\nStep 3. Verify output\nOverview\nStep 1. Create an input\nStep 2. Verify your input\nStep 3. Set up your output\nStep 4. Create a connection\nStep 5. Verify your connection\nStep 6. Track events\nStep 7. Track user data\nStep 8. Create a data plan\nStep 1. Create an input\nStep 2. Create an output\nStep 3. Verify output\nStep 1. Create an input\nStep 2. Create an output\nStep 3. Verify output\nStep 1. Create an input\nStep 2. Create an output\nStep 3. Verify output\nOverview\nStep 1. Create an input\nStep 2. Verify your input\nStep 3. Set up your output\nStep 4. Create a connection\nStep 5. Verify your connection\nStep 6. Track events\nStep 7. Track user data\nStep 8. Create a data plan\nAMP SDK\nInitialization\nConfiguration\nNetwork Security Configuration\nEvent Tracking\nUser Attributes\nIDSync\nScreen Events\nCommerce Events\nLocation Tracking\nMedia\nKits\nApplication State and Session Management\nData Privacy Controls\nError Tracking\nOpt Out\nPush Notifications\nWebView Integration\nLogger\nPreventing Blocked HTTP Traffic with CNAME\nLinting Data Plans\nTroubleshooting the Android SDK\nAPI Reference\nUpgrade to Version 5\nCordova Plugin\nIdentity\nDirect URL Routing FAQ\nWeb\nAndroid\niOS\nGetting Started\nUsage\nAPI Reference\nInitialization\nConfiguration\nEvent Tracking\nUser Attributes\nIDSync\nScreen Tracking\nCommerce Events\nLocation Tracking\nMedia\nKits\nApplication State and Session Management\nData Privacy Controls\nError Tracking\nOpt Out\nPush Notifications\nWebview Integration\nUpload Frequency\nApp Extensions\nPreventing Blocked HTTP Traffic with CNAME\nLinting Data Plans\nTroubleshooting iOS SDK\nSocial Networks\niOS 14 Guide\niOS 15 FAQ\niOS 16 FAQ\niOS 17 FAQ\niOS 18 FAQ\nAPI Reference\nUpgrade to Version 7\nGetting Started\nIdentity\nGetting Started\nIdentity\nMedia\nUpload Frequency\nGetting Started\nOpt Out\nInitialize the SDK\nEvent Tracking\nCommerce Tracking\nError Tracking\nScreen Tracking\nIdentity\nLocation Tracking\nSession Management\nGetting Started\nIdentity\nInitialization\nConfiguration\nContent Security Policy\nEvent Tracking\nUser Attributes\nIDSync\nPage View Tracking\nCommerce Events\nLocation Tracking\nMedia\nKits\nApplication State and Session Management\nData Privacy Controls\nError Tracking\nOpt Out\nCustom Logger\nPersistence\nNative Web Views\nSelf-Hosting\nMultiple Instances\nWeb SDK via Google Tag Manager\nPreventing Blocked HTTP Traffic with CNAME\nFacebook Instant Articles\nTroubleshooting the Web SDK\nBrowser Compatibility\nLinting Data Plans\nAPI Reference\nUpgrade to Version 2 of the SDK\nGetting Started\nIdentity\nWeb\nAlexa\nLinting Tools\nSmartype\nmParticle Command Line Interface\nNode SDK\nGo SDK\nPython SDK\nRuby SDK\nJava SDK\nIntroduction\nOutbound Integrations\nFirehose Java SDK\nInbound Integrations\nOverview\nAndroid Kit Integration\nJavaScript Kit Integration\niOS Kit Integration\nCompose ID\nData Hosting Locations\nGlossary\nMigrate from Segment to mParticle\nMigrate from Segment to Client-side mParticle\nMigrate from Segment to Server-side mParticle\nSegment-to-mParticle Migration Reference\nRules Developer Guide\nAPI Credential Management\nThe Developer's Guided Journey to mParticle\n\n## Guides\nCreate an Input\nStart capturing data\nConnect an Event Output\nCreate an Audience\nConnect an Audience Output\nTransform and Enhance Your Data\nIntroduction\nProfiles\nAudiences Overview\nCreate an Audience\nConnect an Audience\nManage Audiences\nReal-time Audiences (Legacy)\nStandard Audiences (Legacy)\nCalculated Attributes Overview\nUsing Calculated Attributes\nCreate with AI Assistance\nCalculated Attributes Reference\nPredictive Audiences Overview\nUsing Predictive Audiences\nJourneys Overview\nManage Journeys\nDownload an audience from a journey\nAudience A/B testing from a journey\nJourneys 2.0\nWhat are predictive attributes?\nCreate Future Prediction\nUse Future Predictions in Campaigns\nAssess and Troubleshoot Predictions\nNext Best Action Overview\nCreate a Next Best Action (NBA)\nView and Manage NBAs\nActivate Next Best Actions in Campaigns\nThe new mParticle Experience\nThe Overview Map\nUsage and Billing Report\nObservability Overview\nObservability User Guide\nObservability Troubleshooting Examples\nObservability Span Glossary\nIntroduction\nData Retention\nConnections\nActivity\nLive Stream\nData Filter\nRules\nTiered Events\nmParticle Users and Roles\nAnalytics Free Trial\nTroubleshooting mParticle\nUsage metering for value-based pricing (VBP)\nIntroduction\nSync and Activate Analytics User Segments in mParticle\nUser Segment Activation\nWelcome Page Announcements\nProject Settings\nRoles and Teammates\nOrganization Settings\nGlobal Project Filters\nPortfolio Analytics\nAnalytics Data Manager Overview\nEvents\nEvent Properties\nUser Properties\nRevenue Mapping\nExport Data\nUTM Guide\nData Dictionary\nQuery Builder Overview\nModify Filters With And/Or Clauses\nQuery-time Sampling\nQuery Notes\nFilter Where Clauses\nEvent vs. User Properties\nGroup By Clauses\nAnnotations\nCross-tool Compatibility\nApply All for Filter Where Clauses\nDate Range and Time Settings Overview\nUser Attributes at Event Time\nUnderstanding the Screen View Event\nAnalyses Introduction\nGetting Started\nVisualization Options\nFor Clauses\nDate Range and Time Settings\nCalculator\nNumerical Settings\nAssisted Analysis\nProperties Explorer\nFrequency in Segmentation\nTrends in Segmentation\nDid [not] Perform Clauses\nCumulative vs. Non-Cumulative Analysis in Segmentation\nTotal Count of vs. Users Who Performed\nSave Your Segmentation Analysis\nExport Results in Segmentation\nExplore Users from Segmentation\nGetting Started with Funnels\nGroup By Settings\nConversion Window\nTracking Properties\nDate Range and Time Settings\nVisualization Options\nInterpreting a Funnel Analysis\nGroup By\nFilters\nConversion over Time\nConversion Order\nTrends\nFunnel Direction\nMulti-path Funnels\nAnalyze as Cohort from Funnel\nSave a Funnel Analysis\nExplore Users from a Funnel\nExport Results from a Funnel\nGetting Started with Cohorts\nAnalysis Modes\nSave a Cohort Analysis\nExport Results\nExplore Users\nSaved Analyses\nManage Analyses in Dashboards\nGetting Started\nEvent Menu\nVisualization\nEnding Event\nSave a Journey Analysis\nGetting Started\nUser Activity Timelines\nTime Settings\nExport Results\nSave A User Analysis\nDashboards\u00e2\u0080\u0093\u00e2\u0080\u0093Getting Started\nManage Dashboards\nDashboard Filters\nOrganize Dashboards\nScheduled Reports\nFavorites\nTime and Interval Settings in Dashboards\nQuery Notes in Dashboards\nUser Aliasing\nThe Demo Environment\nKeyboard Shortcuts\nAnalytics for Marketers\nAnalytics for Product Managers\nCompare Conversion Across Acquisition Sources\nAnalyze Product Feature Usage\nIdentify Points of User Friction\nTime-based Subscription Analysis\nDashboard Tips and Tricks\nUnderstand Product Stickiness\nOptimize User Flow with A/B Testing\nUser Segments\nUser Segments Export API\nDashboard Filter API\nIDSync Overview\nUse Cases for IDSync\nComponents of IDSync\nStore and Organize User Data\nIdentify Users\nDefault IDSync Configuration\nProfile Conversion Strategy\nProfile Link Strategy\nProfile Isolation Strategy\nBest Match Strategy\nAliasing\nOverview\nCreate and Manage Group Definitions\nIntroduction\nCatalog\nLive Stream\nData Plans\nBlocked Data Backfill Guide\nWarehouse Sync\nData Privacy Controls\nData Subject Requests\nDefault Service Limits\nFeeds\nCross-Account Audience Sharing\nApproved Sub-Processors\nImport Data with CSV Files\nCSV File Reference\nGlossary\nVideo Index\nSingle Sign-On (SSO)\nSetup Examples\nDebug Console\nData Warehouse Delay Alerting\nIntroduction\nIntroduction\nIntroduction\nRudderstack\nGoogle Tag Manager\nSegment\nAdvanced Data Warehouse Settings\nAWS Kinesis (Snowplow)\nAWS Redshift (Define Your Own Schema)\nAWS S3 Integration (Define Your Own Schema)\nAWS S3 (Snowplow Schema)\nBigQuery (Snowplow Schema)\nBigQuery Firebase Schema\nBigQuery (Define Your Own Schema)\nGCP BigQuery Export\nSnowflake (Snowplow Schema)\nSnowplow Schema Overview\nSnowflake (Define Your Own Schema)\nDashboard Filter API (Deprecated)\nREST API\nUser Segments Export API (Deprecated)\nSDKs Introduction\nReact Native\niOS\nAndroid\nJava\nJavaScript\nPython\nObject API\nAliasing\n\n## Integrations\nAudience\nEvent\nEvent\nFeed\nAudience\nEvent\nAudience\nEvent\nEvent\nFeed\nCookie Sync\nServer-to-Server Events\nPlatform SDK Events\nAudience\nAudience\nAudience\nAudience\nFeed\nEvent\nAudience\nFeed\nEvent\nEvent\nEvent\nFeed\nEvent\nAudience\nEvent\nEvent\nData Warehouse\nAudience\nEvent\nEvent\nEvent\nAudience\nEvent\nForwarding Data Subject Requests\nAudience\nEvent\nForwarding Data Subject Requests\nAudience\nEvent\nEvent\nFeed\nEvent\nFeed\nForwarding Data Subject Requests\nAudience\nEvent\nEvent\nEvent\nEvent\nEvent\nFeed\nEvent\nAudience\nEvent\nAudience\nEvent\nFeed\nEvent\nEvent\nFeed\nForwarding Data Subject Requests\nEvent\nFeed\nForwarding Data Subject Requests\nAudience\nFeed\nForwarding Data Subject Requests\nEvent\nEvent\nEvent\nAudience\nEvent\nFeed\nAudience\nEvent\nFeed\nAudience\nEvent\nFeed\nEvent\nEvent\nAudience\nFeed\nEvent\nAudience\nEvent\nForwarding Data Subject Requests\nFeed\nEvent\nCustom Feed\nEvent\nFeed\nAudience\nFeed\nEvent\nData Warehouse\nEvent\nAudience\nAudience\nEvent\nEvent\nAudience\nAudience\nEvent\nAudience\nEvent\nAudience\nEvent\nAudience\nEvent\nEvent\nEvent\nEvent\nEvent\nFeed\nAudience\nEvent\nFeed\nAudience\nAudience\nAudience\nEvent\nEvent\nAudience\nData Warehouse\nAudience\nEvent\nEvent\nEvent\nAudience\nCookie Sync\nEvent\nEvent\nEvent\nEvent\nEvent\nFeed\nEvent\nFeed\nEvent\nEvent\nEvent\nEvent\nAudience\nAudience\nAudience\nEvent\nAudience\nEvent\nFeed\nEvent\nAudience\nFeed\nEvent\nAudience\nEvent\nFeed\nAudience\nEvent\nAudience\nEvent\nEvent\nAudience\nEvent\nEvent\nAudience\nEvent\nForwarding Data Subject Requests\nFeed\nEvent\nFeed\nAudience\nEvent\nAudience\nAudience\nFeed\nEvent\nAudience\nEvent\nEvent\nAudience\nEvent\nAudience\nEvent\nFeed\nAudience\nAudience\nEvent\nAudience\nEvent\nAudience\nAudience\nForwarding Data Subject Requests\nEvent\nAudience\nAudience\nEvent\nFeed\nEvent\nAudience\nEvent\nEvent\nEvent\nAudience\nEvent\nFeed\nEvent\nEvent\nAudience\nEvent\nFeed\nEvent\nEvent\nEvent\nAudience\nEvent\nEvent\nAudience\nEvent\nFeed\nEvent\nAudience\nInbound Data Subject Requests\nAudience\nEvent\nEvent\nEvent\nFeed\nAudience\nEvent\nEvent\nEvent\nAudience\nFeed\nAudience\nEvent\nEvent\nFeed\nEvent\nAudience\nEvent\nEvent\nAudience\nEvent\nFeed\nEvent\nEvent\nEvent\nAudience\nEvent\nFeed\nEvent\nAudience\nAudience\nEvent\nEvent\nAudience\nEvent\nFeed\nAudience\nEvent\nEvent\nAudience\nFeed\nFeed\nEvent\nAudience\nFeed\nEvent\nFeed\nCustom Pixel\nEvent\nEvent\nFeed\nEvent\nEvent\nEvent\nAudience\nAudience\nEvent\nEvent\nEvent\nData Warehouse\nEvent\nFeed\nEvent\nEvent\nAudience\nEvent\nAudience\nEvent\nFeed\nAudience\nEvent\nAudience\nEvent\nLoyalty Feed\nFeed\nEvent\nFeed\nAudience\nEvent\nAudience\nAudience\nAudience\nCookie Sync\nAudience\nEvent\nFeed\nAudience\nAudience (Deprecated)\nEvent\nAudience Migration\nEvent\nAudience\nAudience\nEvent\nEvent\nAudience\nAudience\nEvent\nAudience\nEvent\nAudience\nEvent\nEvent\nEvent\nEvent\nAudience\nCookie Sync\nAudience\nCookie Sync\nFeed\nAudience\nAudience\nEvent\nEvent\nFeed\nEvent\n\n## Event\nAppsFlyeris a leading Mobile Attribution & Marketing Analytics platform that allows app marketers to easily measure the performance of all their marketing channels - paid, organic and social - from a single real-time dashboard.\nmParticle\u00e2\u0080\u0099s integration with AppsFlyer includes a required Kit integration and an optional server-side integration. The Kit forwards event data from your app to AppsFlyer on the client side, and also handles app install attribution, uninstall tracking, and deeplinking, including deferred deeplinking. Supplementary data from outside your app can be forwarded to mParticle via our Events API and sent on to AppsFlyer server-to-server.\n\n## Consent\nGoogle has several notions of user-provided consent.  Two of these apply to AppsFlyer events:ad_user_dataandad_personalization. These represent consent forad user dataandad personalization.\n\n```\nad_user_data\n```\n\n```\nad_personalization\n```\n\n## User-specified Consent\nTo configure user consent forwarding under this value, a mapping should be set-up leveraging mParticle\u00e2\u0080\u0099s notion of Consent Purposes. To learn more about handling user consent within mParticle\u00e2\u0080\u0099s platform, see the following docs:Data Privacy Controls.\nOnce a Consent Purpose is set up, user consent information can be associated with it in subsequent Event Batches. The Consent Purpose data mapping can then be configured for downstream forwarding via the User Consent Data Mapping connection setting.\n\n## Consent Defaults\nIn the absence of a user-defined consent value for thead_user_dataandad_personalizationfields via the Consent Purpose mapping, a default value can be optionally configured via a separate drop-down setting for each consent type. When no user consent is provided, the default status is used, if specified.\n\n```\nad_user_data\n```\n\n```\nad_personalization\n```\nCaution: It is recommended that in the long term, you set up user-specified consent through the Consent Purpose mapping, such that the user consent is correctly forwarded to Google. It is your responsibility as a Data Controller to stay compliant under the GDPR, and set up user consent collection for downstream forwarding. The consent default setting can be deprecated in the future.\n\n## Enabling AppsFlyer\n\n## 1. Configure\n- Add the mParticle SDKs to your iOS and/or Android apps. See the docs foryour platform here.\n- Connect your iOS and/or Android workspaces to AppsFlyer. You will need to provide your Dev Key, which you can access from the Settings page of your organization\u00e2\u0080\u0099s AppsFlyer dashboard. For an iOS connection, you will also need your Apple App ID. Make sure you remove the \u00e2\u0080\u0098ID\u00e2\u0080\u0099 prefix. For example, if your App ID isid12345, just enter12345. For more information on setting up a new mParticle connection, see thePlatform Guide.\n\n```\nid12345\n```\n\n```\n12345\n```\n\n## Configuration Settings\n\n```\nstring\n```\n\n## Connection Settings\n\n```\nbool\n```\n\n```\nstring\n```\n\n```\nbool\n```\n\n```\nmapping\n```\n\n```\nstring\n```\n\n```\nUnspecified\n```\n\n```\nstring\n```\n\n```\nUnspecified\n```\n\n## 2. Add the iOS/Android Kits\nmParticle\u00e2\u0080\u0099s AppsFlyer integration requires that you add the AppsFlyer Kit to your iOS or Android app. Just by adding the binary to your app:\n- The mParticle SDK will initialize AppsFlyer\u00e2\u0080\u0099s SDK per their documentation, using the AppsFlyer dev key provided above, and will also forward all requiredUIApplication(iOS) andActivity(Android) lifecycle events to the AppsFlyer SDK.\n\n```\nUIApplication\n```\n\n```\nActivity\n```\n- Events that you log via mParticle\u00e2\u0080\u0099s API will be automatically mapped onto AppsFlyer analogous event tracking APIs.\n- The customer ID and email of the current user, set via mParticle\u00e2\u0080\u0099s Identity APIs, will be mapped onto AppsFlyer\u00e2\u0080\u0099s analogoussetUserAPIs.\n\n```\nsetUser\n```\n- Google Play Install Referrer will be forwarded (Android only - see below).\nmParticle publishes the AppsFlyer Kit as separate iOS and Android libraries which have a transitive dependency on the mParticle core libraries. You can add them to your app via Carthage, Cocoapods, Swift Package Manager, or Gradle:\n\n```\n# Sample Podfilesource'https://github.com/CocoaPods/Specs.git'target'<Your Target>'dopod'mParticle-AppsFlyer'end\n```\n\n```\n# Sample Podfilesource'https://github.com/CocoaPods/Specs.git'target'<Your Target>'dopod'mParticle-AppsFlyer'end\n```\n\n```\ngithub \"mparticle-integrations/mparticle-apple-integration-appsflyer\" \"~> 8.0\"\n```\n\n```\ngithub \"mparticle-integrations/mparticle-apple-integration-appsflyer\" \"~> 8.0\"\n```\n\n```\nTo integrate the SDK using Swift Package Manager, open your Xcode project and navigate to File > Swift Packages > Add Package Dependency\n\nEnter the repository URL`https://github.com/mparticle-integrations/mparticle-apple-integration-appsflyer`and click Next.\n\nYou can leave the version settings as default and click Next one more time to complete adding the package dependency.\n```\n\n```\nTo integrate the SDK using Swift Package Manager, open your Xcode project and navigate to File > Swift Packages > Add Package Dependency\n\nEnter the repository URL`https://github.com/mparticle-integrations/mparticle-apple-integration-appsflyer`and click Next.\n\nYou can leave the version settings as default and click Next one more time to complete adding the package dependency.\n```\n\n```\n// Sample build.gradledependencies{// Ensure the Kit version matches that of the mParticle Core SDK that you're usingimplementation'com.mparticle:android-appsflyer-kit:5+'}\n```\n\n```\n// Sample build.gradledependencies{// Ensure the Kit version matches that of the mParticle Core SDK that you're usingimplementation'com.mparticle:android-appsflyer-kit:5+'}\n```\nRefer to theApple SDKandAndroid SDKguides to read more about kits.\n\n## 3. Install Referrer (Android only)\nAppsFlyer\u00e2\u0080\u0099s SDK requires the forwarding of the Google Play Install Referrer Intent. The AppsFlyer kit will take care of this for you as long as you\u00e2\u0080\u0099ve added mParticle\u00e2\u0080\u0099sReferrerReceiverto you manifest, or you are manually forwarding the Intent to ourReferrerReceiverclass. The mParticle SDK will then forward the Install Referrer intent to each configured kit, including AppsFlyer.\n\n```\nReferrerReceiver\n```\n\n```\nReferrerReceiver\n```\nPlease see theAndroid SDK setup guideto ensure your manifest is configured properly.\n\n## Deep Linking and Attribution\nThe AppsFlyer SDK exposes client-side deep linking and attribution APIs, all of which are supported by the mParticle AppsFlyer kit and are covered in this section. The core use-cases are:\n- Retrieving install attribution information (deferred deep linking)\n- Retrieve app-open attribution information (non-deferred deep linking)\n- OneLink, AppsFlyer\u00e2\u0080\u0099s unified deeplinking hosting service\nEach platform has very specific requirements to ensure that the above functionality is supported. The minimum requirements are:\n- Verify the AppsFlyer connection is enabled for the workspace key and secret, and mParticle environment (development or production) that you\u00e2\u0080\u0099re testing.\n- Verify that thedevKeyconfigured above matches your AppsFlyer app.\n\n```\ndevKey\n```\n- Verify that you have correctly configured your Apple App ID (retrieve from iTunes connect, this isnotyour iOS development team prefix) both in AppsFlyer and in mParticle.\n- Verify that the proper associated domains and entitlements are configured (iOS only)\n- Verify that yourAndroidManifest.xmlhas the proper Intent Filters to match any deep link domains that you\u00e2\u0080\u0099re testing.\n\n```\nAndroidManifest.xml\n```\n\n## Retrieving Attribution Information\nmParticle\u00e2\u0080\u0099s SDKs will automatically initialize the AppsFlyer SDK, forwarding the requiredUIApplicationlifecycle events and thecontinueUserAcivityevents for iOS and Android, as well as registering a delegate such that you can retrieve deep linking and attribution parameters on the client-side to customize your user\u00e2\u0080\u0099s in-app experience.\n\n```\nUIApplication\n```\n\n```\ncontinueUserAcivity\n```\nSpecifically, the AppsFlyer SDK exposes one distinct callback:\n- didResolveDeepLink\n\n```\ndidResolveDeepLink\n```\nmParticle\u00e2\u0080\u0099s API includes a wrapper for this callback, and both the iOS and Android kits expose a constant to inform you when the callback has been fired and if it was successful. On both platforms, the iOS/Android kit will register a delegate/callback with the AppsFlyer SDK on initialization and for the lifetime of the app\u00e2\u0080\u0099s process, and will call your completion handler block (iOS) orAttributionListener(Android) whenever there is new conversion data available.\n\n```\nAttributionListener\n```\nWhen a user clicks a OneLink link, the AppsFlyer SDK retrieves available OneLink data from the AppsFlyer servers. Then, the UDL API calls thedidResolveDeepLink()method which returns aDeepLinkResultobject containing a status and (if successful) aDeepLinkobject containing thedeep_link_valueanddeep_link_sub1-10parameters you can use to customize the resulting in-app outcome.\n\n```\ndidResolveDeepLink()\n```\n\n```\nDeepLinkResult\n```\n\n```\nDeepLink\n```\n\n```\ndeep_link_value\n```\n\n```\ndeep_link_sub1-10\n```\nHowever, when users deep link directly using universal or app links, thedidResolveDeepLinkmethod returns the full link unparsed since the app opens directly without going through AppsFlyer first. You can read more about AppsFlyer\u00e2\u0080\u0099s deep linking methodshere.\n\n```\ndidResolveDeepLink\n```\nThe parameters returned in these results will match the result of the AppsFlyer SDK, as documented forAndroidandiOS.\nSee the deep linking documentation foriOSandAndroidfor more information.\n\n## Test Scenarios\nThe following core test scenarios that should be verified:\n- New user-install (deferred deeplink)\n- Application not running, and an existing user-install invokes a deep link (\u00e2\u0080\u009ccold start\u00e2\u0080\u009d scenario)\n- Application running in the background, and an existing user install invokes a deep link (\u00e2\u0080\u009cwarm start\u00e2\u0080\u009d scenario)\n\n## Track Events\nThe AppsFlyer Kit will forward app events and eCommerce events to AppsFlyer.Custom Mappingsare available to map your custom app events ontoAppsFlyer\u00e2\u0080\u0099s event names. Refer to the iOS and Android SDK docs for details on instrumenting your app for event tracking:\n- eCommerceiOS SDKAndroid SDK\neCommerce\n- iOS SDK\n- Android SDK\n- App EventsiOS SDKAndroid SDK\nApp Events\n- iOS SDK\n- Android SDK\nNote that AppsFlyer enforces alimit of 45 charactersfor event names.\n\n## Kit Source and Sample Applications\nThe source code for each kit, as well as sample apps, are available on Github:\n- iOS\n- Android\n\n## Server Integration\nmParticle can forward app events and commerce events received via ourEvents APItoAppsFlyer\u00e2\u0080\u0099s server-API. Note that AppsFlyer requires data to be linked to a unique AppsFlyer ID, generated client-side by the AppsFlyer Kit. mParticle stores the AppsFlyer ID in its internal user profile. This means that:\n- You must have the AppsFlyer Kit included in your app to be able to forward data, and you can only forward data associated with your app users.\n- The data you send server-side must include a device ID, so that mParticle can lookup the AppsFlyer ID for the user.\n\n## iOS 14 Update for ApplicationTrackingTransparency\nFor iOS 14, mParticle will send theattfield based on theatt_authorization_statusto AppsFlyer in their expectedformat. Check theiOS14 Implementation guidefor more information.\n\n```\natt\n```\n\n```\natt_authorization_status\n```\nIfatt_authorization_statusis available:\n\n```\natt_authorization_status\n```\n\n```\natt_authorization_status\n```\n\n```\natt\n```\n\n```\nauthorized\n```\n\n```\ndenied\n```\n\n```\nnot_determined\n```\n\n```\nrestricted\n```",
  "url": "https://docs.mparticle.com/integrations/appsflyer/event"
}