{
  "title": "No Title",
  "content": "## Documentation\n\n## Developers\nData Subject Request API Version 1 and 2\nData Subject Request API Version 3\nPlatform API Overview\nAccounts\nApps\nAudiences\nCalculated Attributes\nData Points\nFeeds\nField Transformations\nServices\nUsers\nWorkspaces\nWarehouse Sync API Overview\nWarehouse Sync API Tutorial\nWarehouse Sync API Reference\nData Mapping\nWarehouse Sync SQL Reference\nWarehouse Sync Troubleshooting Guide\nComposeID\nWarehouse Sync API v2 Migration\nBulk Profile Deletion API Reference\nCalculated Attributes Seeding API\nCustom Access Roles API\nGroup Identity API Reference\nData Planning API\nPixel Service\nProfile API\nEvents API\nmParticle JSON Schema Reference\nIDSync\niOS\nAndroid\nWeb\nOverview\nStep 1. Create an input\nStep 2. Verify your input\nStep 3. Set up your output\nStep 4. Create a connection\nStep 5. Verify your connection\nStep 6. Track events\nStep 7. Track user data\nStep 8. Create a data plan\nStep 9. Test your local app\nStep 1. Create an input\nStep 2. Create an output\nStep 3. Verify output\nOverview\nStep 1. Create an input\nStep 2. Verify your input\nStep 3. Set up your output\nStep 4. Create a connection\nStep 5. Verify your connection\nStep 6. Track events\nStep 7. Track user data\nStep 8. Create a data plan\nStep 1. Create an input\nStep 2. Create an output\nStep 3. Verify output\nStep 1. Create an input\nStep 2. Create an output\nStep 3. Verify output\nStep 1. Create an input\nStep 2. Create an output\nStep 3. Verify output\nOverview\nStep 1. Create an input\nStep 2. Verify your input\nStep 3. Set up your output\nStep 4. Create a connection\nStep 5. Verify your connection\nStep 6. Track events\nStep 7. Track user data\nStep 8. Create a data plan\nAMP SDK\nInitialization\nConfiguration\nNetwork Security Configuration\nEvent Tracking\nUser Attributes\nIDSync\nScreen Events\nCommerce Events\nLocation Tracking\nMedia\nKits\nApplication State and Session Management\nData Privacy Controls\nError Tracking\nOpt Out\nPush Notifications\nWebView Integration\nLogger\nPreventing Blocked HTTP Traffic with CNAME\nLinting Data Plans\nTroubleshooting the Android SDK\nAPI Reference\nUpgrade to Version 5\nCordova Plugin\nIdentity\nDirect URL Routing FAQ\nWeb\nAndroid\niOS\nGetting Started\nUsage\nAPI Reference\nInitialization\nConfiguration\nEvent Tracking\nUser Attributes\nIDSync\nScreen Tracking\nCommerce Events\nLocation Tracking\nMedia\nKits\nApplication State and Session Management\nData Privacy Controls\nError Tracking\nOpt Out\nPush Notifications\nWebview Integration\nUpload Frequency\nApp Extensions\nPreventing Blocked HTTP Traffic with CNAME\nLinting Data Plans\nTroubleshooting iOS SDK\nSocial Networks\niOS 14 Guide\niOS 15 FAQ\niOS 16 FAQ\niOS 17 FAQ\niOS 18 FAQ\nAPI Reference\nUpgrade to Version 7\nGetting Started\nIdentity\nGetting Started\nIdentity\nMedia\nUpload Frequency\nGetting Started\nOpt Out\nInitialize the SDK\nEvent Tracking\nCommerce Tracking\nError Tracking\nScreen Tracking\nIdentity\nLocation Tracking\nSession Management\nGetting Started\nIdentity\nInitialization\nConfiguration\nContent Security Policy\nEvent Tracking\nUser Attributes\nIDSync\nPage View Tracking\nCommerce Events\nLocation Tracking\nMedia\nKits\nApplication State and Session Management\nData Privacy Controls\nError Tracking\nOpt Out\nCustom Logger\nPersistence\nNative Web Views\nSelf-Hosting\nMultiple Instances\nWeb SDK via Google Tag Manager\nPreventing Blocked HTTP Traffic with CNAME\nFacebook Instant Articles\nTroubleshooting the Web SDK\nBrowser Compatibility\nLinting Data Plans\nAPI Reference\nUpgrade to Version 2 of the SDK\nGetting Started\nIdentity\nWeb\nAlexa\nLinting Tools\nSmartype\nmParticle Command Line Interface\nNode SDK\nGo SDK\nPython SDK\nRuby SDK\nJava SDK\nIntroduction\nOutbound Integrations\nFirehose Java SDK\nInbound Integrations\nOverview\nAndroid Kit Integration\nJavaScript Kit Integration\niOS Kit Integration\nCompose ID\nData Hosting Locations\nGlossary\nMigrate from Segment to mParticle\nMigrate from Segment to Client-side mParticle\nMigrate from Segment to Server-side mParticle\nSegment-to-mParticle Migration Reference\nRules Developer Guide\nAPI Credential Management\nThe Developer's Guided Journey to mParticle\n\n## Guides\nCreate an Input\nStart capturing data\nConnect an Event Output\nCreate an Audience\nConnect an Audience Output\nTransform and Enhance Your Data\nIntroduction\nProfiles\nAudiences Overview\nCreate an Audience\nConnect an Audience\nManage Audiences\nReal-time Audiences (Legacy)\nStandard Audiences (Legacy)\nCalculated Attributes Overview\nUsing Calculated Attributes\nCreate with AI Assistance\nCalculated Attributes Reference\nPredictive Audiences Overview\nUsing Predictive Audiences\nJourneys Overview\nManage Journeys\nDownload an audience from a journey\nAudience A/B testing from a journey\nJourneys 2.0\nWhat are predictive attributes?\nCreate Future Prediction\nUse Future Predictions in Campaigns\nAssess and Troubleshoot Predictions\nNext Best Action Overview\nCreate a Next Best Action (NBA)\nView and Manage NBAs\nActivate Next Best Actions in Campaigns\nThe new mParticle Experience\nThe Overview Map\nUsage and Billing Report\nObservability Overview\nObservability User Guide\nObservability Troubleshooting Examples\nObservability Span Glossary\nIntroduction\nData Retention\nConnections\nActivity\nLive Stream\nData Filter\nRules\nTiered Events\nmParticle Users and Roles\nAnalytics Free Trial\nTroubleshooting mParticle\nUsage metering for value-based pricing (VBP)\nIntroduction\nSync and Activate Analytics User Segments in mParticle\nUser Segment Activation\nWelcome Page Announcements\nProject Settings\nRoles and Teammates\nOrganization Settings\nGlobal Project Filters\nPortfolio Analytics\nAnalytics Data Manager Overview\nEvents\nEvent Properties\nUser Properties\nRevenue Mapping\nExport Data\nUTM Guide\nData Dictionary\nQuery Builder Overview\nModify Filters With And/Or Clauses\nQuery-time Sampling\nQuery Notes\nFilter Where Clauses\nEvent vs. User Properties\nGroup By Clauses\nAnnotations\nCross-tool Compatibility\nApply All for Filter Where Clauses\nDate Range and Time Settings Overview\nUser Attributes at Event Time\nUnderstanding the Screen View Event\nAnalyses Introduction\nGetting Started\nVisualization Options\nFor Clauses\nDate Range and Time Settings\nCalculator\nNumerical Settings\nAssisted Analysis\nProperties Explorer\nFrequency in Segmentation\nTrends in Segmentation\nDid [not] Perform Clauses\nCumulative vs. Non-Cumulative Analysis in Segmentation\nTotal Count of vs. Users Who Performed\nSave Your Segmentation Analysis\nExport Results in Segmentation\nExplore Users from Segmentation\nGetting Started with Funnels\nGroup By Settings\nConversion Window\nTracking Properties\nDate Range and Time Settings\nVisualization Options\nInterpreting a Funnel Analysis\nGroup By\nFilters\nConversion over Time\nConversion Order\nTrends\nFunnel Direction\nMulti-path Funnels\nAnalyze as Cohort from Funnel\nSave a Funnel Analysis\nExplore Users from a Funnel\nExport Results from a Funnel\nGetting Started with Cohorts\nAnalysis Modes\nSave a Cohort Analysis\nExport Results\nExplore Users\nSaved Analyses\nManage Analyses in Dashboards\nGetting Started\nEvent Menu\nVisualization\nEnding Event\nSave a Journey Analysis\nGetting Started\nUser Activity Timelines\nTime Settings\nExport Results\nSave A User Analysis\nDashboards\u00e2\u0080\u0093\u00e2\u0080\u0093Getting Started\nManage Dashboards\nDashboard Filters\nOrganize Dashboards\nScheduled Reports\nFavorites\nTime and Interval Settings in Dashboards\nQuery Notes in Dashboards\nUser Aliasing\nThe Demo Environment\nKeyboard Shortcuts\nAnalytics for Marketers\nAnalytics for Product Managers\nCompare Conversion Across Acquisition Sources\nAnalyze Product Feature Usage\nIdentify Points of User Friction\nTime-based Subscription Analysis\nDashboard Tips and Tricks\nUnderstand Product Stickiness\nOptimize User Flow with A/B Testing\nUser Segments\nUser Segments Export API\nDashboard Filter API\nIDSync Overview\nUse Cases for IDSync\nComponents of IDSync\nStore and Organize User Data\nIdentify Users\nDefault IDSync Configuration\nProfile Conversion Strategy\nProfile Link Strategy\nProfile Isolation Strategy\nBest Match Strategy\nAliasing\nOverview\nCreate and Manage Group Definitions\nIntroduction\nCatalog\nLive Stream\nData Plans\nBlocked Data Backfill Guide\nWarehouse Sync\nData Privacy Controls\nData Subject Requests\nDefault Service Limits\nFeeds\nCross-Account Audience Sharing\nApproved Sub-Processors\nImport Data with CSV Files\nCSV File Reference\nGlossary\nVideo Index\nSingle Sign-On (SSO)\nSetup Examples\nDebug Console\nData Warehouse Delay Alerting\nIntroduction\nIntroduction\nIntroduction\nRudderstack\nGoogle Tag Manager\nSegment\nAdvanced Data Warehouse Settings\nAWS Kinesis (Snowplow)\nAWS Redshift (Define Your Own Schema)\nAWS S3 Integration (Define Your Own Schema)\nAWS S3 (Snowplow Schema)\nBigQuery (Snowplow Schema)\nBigQuery Firebase Schema\nBigQuery (Define Your Own Schema)\nGCP BigQuery Export\nSnowflake (Snowplow Schema)\nSnowplow Schema Overview\nSnowflake (Define Your Own Schema)\nDashboard Filter API (Deprecated)\nREST API\nUser Segments Export API (Deprecated)\nSDKs Introduction\nReact Native\niOS\nAndroid\nJava\nJavaScript\nPython\nObject API\nAliasing\n\n## Integrations\nAudience\nEvent\nEvent\nFeed\nAudience\nEvent\nAudience\nEvent\nEvent\nFeed\nCookie Sync\nServer-to-Server Events\nPlatform SDK Events\nAudience\nAudience\nAudience\nAudience\nFeed\nEvent\nAudience\nFeed\nEvent\nEvent\nEvent\nFeed\nEvent\nAudience\nEvent\nEvent\nData Warehouse\nAudience\nEvent\nEvent\nEvent\nAudience\nEvent\nForwarding Data Subject Requests\nAudience\nEvent\nForwarding Data Subject Requests\nAudience\nEvent\nEvent\nFeed\nEvent\nFeed\nForwarding Data Subject Requests\nAudience\nEvent\nEvent\nEvent\nEvent\nEvent\nFeed\nEvent\nAudience\nEvent\nAudience\nEvent\nFeed\nEvent\nEvent\nFeed\nForwarding Data Subject Requests\nEvent\nFeed\nForwarding Data Subject Requests\nAudience\nFeed\nForwarding Data Subject Requests\nEvent\nEvent\nEvent\nAudience\nEvent\nFeed\nAudience\nEvent\nFeed\nAudience\nEvent\nFeed\nEvent\nEvent\nAudience\nFeed\nEvent\nAudience\nEvent\nForwarding Data Subject Requests\nFeed\nEvent\nCustom Feed\nEvent\nFeed\nAudience\nFeed\nEvent\nData Warehouse\nEvent\nAudience\nAudience\nEvent\nEvent\nAudience\nAudience\nEvent\nAudience\nEvent\nAudience\nEvent\nAudience\nEvent\nEvent\nEvent\nEvent\nEvent\nFeed\nAudience\nEvent\nFeed\nAudience\nAudience\nAudience\nEvent\nEvent\nAudience\nData Warehouse\nAudience\nEvent\nEvent\nEvent\nAudience\nCookie Sync\nEvent\nEvent\nEvent\nEvent\nEvent\nFeed\nEvent\nFeed\nEvent\nEvent\nEvent\nEvent\nAudience\nAudience\nAudience\nEvent\nAudience\nEvent\nFeed\nEvent\nAudience\nFeed\nEvent\nAudience\nEvent\nFeed\nAudience\nEvent\nAudience\nEvent\nEvent\nAudience\nEvent\nEvent\nAudience\nEvent\nForwarding Data Subject Requests\nFeed\nEvent\nFeed\nAudience\nEvent\nAudience\nAudience\nFeed\nEvent\nAudience\nEvent\nEvent\nAudience\nEvent\nAudience\nEvent\nFeed\nAudience\nAudience\nEvent\nAudience\nEvent\nAudience\nAudience\nForwarding Data Subject Requests\nEvent\nAudience\nAudience\nEvent\nFeed\nEvent\nAudience\nEvent\nEvent\nEvent\nAudience\nEvent\nFeed\nEvent\nEvent\nAudience\nEvent\nFeed\nEvent\nEvent\nEvent\nAudience\nEvent\nEvent\nAudience\nEvent\nFeed\nEvent\nAudience\nInbound Data Subject Requests\nAudience\nEvent\nEvent\nEvent\nFeed\nAudience\nEvent\nEvent\nEvent\nAudience\nFeed\nAudience\nEvent\nEvent\nFeed\nEvent\nAudience\nEvent\nEvent\nAudience\nEvent\nFeed\nEvent\nEvent\nEvent\nAudience\nEvent\nFeed\nEvent\nAudience\nAudience\nEvent\nEvent\nAudience\nEvent\nFeed\nAudience\nEvent\nEvent\nAudience\nFeed\nFeed\nEvent\nAudience\nFeed\nEvent\nFeed\nCustom Pixel\nEvent\nEvent\nFeed\nEvent\nEvent\nEvent\nAudience\nAudience\nEvent\nEvent\nEvent\nData Warehouse\nEvent\nFeed\nEvent\nEvent\nAudience\nEvent\nAudience\nEvent\nFeed\nAudience\nEvent\nAudience\nEvent\nLoyalty Feed\nFeed\nEvent\nFeed\nAudience\nEvent\nAudience\nAudience\nAudience\nCookie Sync\nAudience\nEvent\nFeed\nAudience\nAudience (Deprecated)\nEvent\nAudience Migration\nEvent\nAudience\nAudience\nEvent\nEvent\nAudience\nAudience\nEvent\nAudience\nEvent\nAudience\nEvent\nEvent\nEvent\nEvent\nAudience\nCookie Sync\nAudience\nCookie Sync\nFeed\nAudience\nAudience\nEvent\nEvent\nFeed\nEvent\n\n## Event\nThis section describes the configuration settings necessary to activate mParticle\u00e2\u0080\u0099s event tracking integration with Facebook.  The event tracking integration enables conversion tracking for Facebook advertising campaigns.\n\n## Supported Features\n- Event Forwarding\n\n## Data Processing Notes\nFacebook has limits around the number of unique event names and attributes their platform can process as noted here:https://developers.facebook.com/docs/reference/android/current/class/AppEventsLogger/\n- 1000 unique event names\n- 25 attributes per event\n- Between 2 and 40 characters in an event name and attribute\n- It may takes up to 24 hours to see refreshed stats in Facebook Analytics\n\n## Prerequisites\nEvent data from mParticle to Facebook is typically sent server side.  However, Web data can be sent client or server side based on your implementation and settings.  These different options require different settings:\n- iOS, tvOS, and Android - data is sent S2S, and you\u00e2\u0080\u0099ll need your app\u00e2\u0080\u0099s Facebook Application ID and Application Secret\n- Data Feeds - data is sent S2S, and you\u00e2\u0080\u0099ll need your Facebook Pixel ID\n- Web - for client side kit, you\u00e2\u0080\u0099ll need your Facebook Pixel ID\n- Web - for S2S, you\u00e2\u0080\u0099ll need your Facebook Pixel ID and Facebook Marketing API Access Token. You also need to enable both theUse Pixel Server-Side ForwardingandForward Web Requests Server Sidesettings.\n\n```\nUse Pixel Server-Side Forwarding\n```\n\n```\nForward Web Requests Server Side\n```\n- Roku, Xbox, SmartTV, FireTV, Alexa - you\u00e2\u0080\u0099ll need your Facebook Pixel ID and Facebook Marketing API Access Token.\n- os_versionis required for iOS/tvOS events. Ifos_versionis not present, the event will be rejected and an error message will be shown inSystem Alerts.\n\n```\nos_version\n```\n\n```\nos_version\n```\n\n## Configuring Facebook Pixel Server-to-Server\nYou need to perform a few steps in Facebook to create aFacebook Pixel S2Sconnection.\n- Navigate to the Facebook Events Manager\n- Connect a New Data Source:  SelectWebwith a connection method ofConversions API.\n\n```\nWeb\n```\n\n```\nConversions API\n```\n- Create an Access Token:Open the settings for the new Pixel Data Source, scroll to theConversions API>Set up manuallysection and clickCreate Access Token. Follow the steps described and copy theAccess Tokenfor setup in mParticle.\n\n```\nConversions API\n```\n\n```\nSet up manually\n```\n\n```\nCreate Access Token\n```\n\n## Configuring Duplicate Events\nFacebook recommends sending the same pixel event twice - once from the browser and once from the server. If done incorrectly, this can result in duplicate events appearing in Facebook. The following steps walk through how to configure this within mParticle.\n\n## Using only the mParticle Web SDK (Recommended)\nTo do this using mParticle, you will need to perform the following steps:\n- Setup the mParticle Web SDK in your application\n- Setup two configurations for mParticle\u00e2\u0080\u0099s Facebook integration. One of these configurations must haveUse Pixel Server-Side Forwardingenabled and the other must not. Both must have an access token set.\n\n```\nUse Pixel Server-Side Forwarding\n```\n- Connect both of these configurations to yourWebinput. The configuration with server-side Pixel forwarding enabled, must also haveForward Web Requests Server Sideenabled. Similarly, the connection with Pixel server-side forwarding disabled, must haveForward Web Requests Server Sidedisabled.\n\n```\nWeb\n```\n\n```\nForward Web Requests Server Side\n```\n\n```\nForward Web Requests Server Side\n```\n\n## Other Scenarios\nIdeally, all Web data sent to mParticle will be sent through the mParticle Web SDK, but it is still possible to deduplicate events outside of this flow if necessary. To ensure redundant events sent through Facebook Pixel and the Facebook Conversions API are correctly deduplicated when they reach Facebook, two conditions must be met:\n- Events must have consistentevent_namevalues.\n\n```\nevent_name\n```\n- Events must have consistentevent_idvalues. For this, thefieldsource_message_idmay be used to manually set the Event ID sent to Facebook.\n\n```\nevent_id\n```\n\n```\nsource_message_id\n```\nIf you use the mParticle Web SDK and server-side web integration, then this will be automatically handled.\nIf you need to manually assign asource_message_idvia the web SDK and server-side separately, use the following API:\n\n```\nsource_message_id\n```\n\n```\nmParticle.logBaseEvent({messageType:4,// This is the messageType for custom events.  Use 3 for page viewsname:'Test Event',data:{attr1:'value1'},// custom attributeseventType:mParticle.EventType.Navigation,// optional for custom events. Do not set for page viewscustomFlags:{flag1:'flagValue1'},sourceMessageId:'custom_source_message_id'});\n```\n\n```\nmParticle.logBaseEvent({messageType:4,// This is the messageType for custom events.  Use 3 for page viewsname:'Test Event',data:{attr1:'value1'},// custom attributeseventType:mParticle.EventType.Navigation,// optional for custom events. Do not set for page viewscustomFlags:{flag1:'flagValue1'},sourceMessageId:'custom_source_message_id'});\n```\nYou can also assign asource_message_idto commerce events:\n\n```\nsource_message_id\n```\n\n```\n// 1. Create the productconstproduct1=mParticle.eCommerce.createProduct('Double Room - Econ Rate',// Name'econ-1',// SKU100.00,// Price4,// Quantity);// 2. Summarize the transactionconsttransactionAttributes={Id:'foo-transaction-id',Revenue:430.00,Tax:30};// 3. Log the purchase event// Optional custom attributes for a product action can be defined as key/value pairs witin an objectconstcustomAttributes={'sale':true};// Optional custom flags can be defined as key/value pairs within an objectconstcustomFlags={'Google.Category':'travel'};constoptions={sourceMessageId:'custom_source_message_id'}mParticle.eCommerce.logProductAction(mParticle.ProductActionType.Purchase,[product1],customAttributes,customFlags,transactionAttributes,options);\n```\n\n```\n// 1. Create the productconstproduct1=mParticle.eCommerce.createProduct('Double Room - Econ Rate',// Name'econ-1',// SKU100.00,// Price4,// Quantity);// 2. Summarize the transactionconsttransactionAttributes={Id:'foo-transaction-id',Revenue:430.00,Tax:30};// 3. Log the purchase event// Optional custom attributes for a product action can be defined as key/value pairs witin an objectconstcustomAttributes={'sale':true};// Optional custom flags can be defined as key/value pairs within an objectconstcustomFlags={'Google.Category':'travel'};constoptions={sourceMessageId:'custom_source_message_id'}mParticle.eCommerce.logProductAction(mParticle.ProductActionType.Purchase,[product1],customAttributes,customFlags,transactionAttributes,options);\n```\nNote that your workspace will need to be on event batching in order to leverage passing a customsource_message_idto the Web SDK for this to work.  If you are not on web batching, please contact your customer success manager.\n\n```\nsource_message_id\n```\nVisit theFacebook Business Help CenterandFacebook For Developersfor more information on the subject of deduplication.\n\n## Troubleshooting Facebook Pixel Issues\nPlease run through the following steps to confirm your settings are correct:\n- Verify your access token is of typeSystem Userand will never expire using this page:https://developers.facebook.com/tools/debug/accesstoken/\n\n```\nSystem User\n```\n- Verify your Pixel ID is valid using this page. Please enter the ID and confirm theSend To Test Eventsworks:https://developers.facebook.com/docs/marketing-api/conversions-api/payload-helper/\n\n```\nSend To Test Events\n```\nIf you run into issues with either of the above steps, please repeat the steps described inConfiguring Facebook Pixel Server-to-Server.\n\n## Event Data Mapping\n- The iOS/tvOS and Android integrations forward App State Transition, Commerce, Custom, Screen View, and Session Start events.\n- The Web integration forwards Commerce, Custom, Screen View, and Session Start / End events.\n\n## iOS14 Update for Device Data Mapping\nThe Facebookadvertiser_tracking_enabledfield is set based on theatt_authorization_statusandlimit_ad_trackingfields as defined below.  Check theiOS14 Implementation guidefor more information.\n\n```\nadvertiser_tracking_enabled\n```\n\n```\natt_authorization_status\n```\n\n```\nlimit_ad_tracking\n```\nIfatt_authorization_statusis available:\n\n```\natt_authorization_status\n```\n\n```\natt_authorization_status\n```\n\n```\nadvertiser_tracking_enabled\n```\n\n```\nauthorized\n```\n\n```\n1\n```\n\n```\n0\n```\nIfatt_authorization_statusis not available, thelimit_ad_trackingfield is evaluated:\n\n```\natt_authorization_status\n```\n\n```\nlimit_ad_tracking\n```\n\n```\nlimit_ad_tracking\n```\n\n```\nadvertiser_tracking_enabled\n```\n\n```\nfalse\n```\n\n```\n1\n```\n\n```\ntrue\n```\n\n```\n0\n```\n\n## User Data Mappings\nmParticle will send a variety of user data fields to Facebook for advanced matching. The specific fields sent depends on if Facebook Pixel server-side forwarding is enabled or not.\nFacebook Pixel Server-Side Forwarding Disabled\nmParticle will hash and send the following fields to Facebook when they are set for a user.\n\n```\nemail\n```\n\n```\nem\n```\n\n```\nEmail Type\n```\n\n```\nExternal User Identity Type\n```\n\n```\nexternal_id\n```\n\n```\nExternal User Identity Type\n```\n\n```\nph\n```\n\n```\nmobile_number\n```\n\n```\nphone_number_2\n```\n\n```\nphone_number_3\n```\n\n```\n$mobile\n```\n\n```\nadvertiser_id\n```\n\n```\n$gender\n```\n\n```\nge\n```\n\n```\n$firstname\n```\n\n```\nfn\n```\n\n```\n$lastname\n```\n\n```\nln\n```\n\n```\n$city\n```\n\n```\nct\n```\n\n```\n$state\n```\n\n```\nst\n```\n\n```\n$zip\n```\n\n```\nzp\n```\n\n```\n$country\n```\n\n```\ncountry\n```\nFacebook Pixel Server-Side Forwarding Enabled\n\n```\nemail\n```\n\n```\nem\n```\n\n```\nEmail Type\n```\n\n```\nFacebook.BrowserId\n```\n\n```\nfbp\n```\n\n```\nFacebook.ClickId\n```\n\n```\nfbc\n```\n\n```\nFacebook.ActionSource\n```\n\n```\naction_source\n```\n\n```\nemail\n```\n\n```\nwebsite\n```\n\n```\napp\n```\n\n```\nphone_call\n```\n\n```\nchat\n```\n\n```\nphysical_store\n```\n\n```\nsystem_generated\n```\n\n```\nother\n```\n\n```\nwebsite\n```\n\n```\nph\n```\n\n```\nmobile_number\n```\n\n```\nphone_number_2\n```\n\n```\nphone_number_3\n```\n\n```\n$mobile\n```\n\n```\nExternal User Identity Type\n```\n\n```\nexternal_id\n```\n\n```\nExternal User Identity Type\n```\n\n```\n$gender\n```\n\n```\nge\n```\n\n```\n$firstname\n```\n\n```\nfn\n```\n\n```\n$lastname\n```\n\n```\nln\n```\n\n```\n$city\n```\n\n```\nct\n```\n\n```\n$state\n```\n\n```\nst\n```\n\n```\n$zip\n```\n\n```\nzp\n```\n\n```\n$country\n```\n\n```\ncountry\n```\n\n```\nip\n```\n\n```\nclient_ip_address\n```\n\n```\nhttp_header_user_agent\n```\n\n```\nclient_user_agent\n```\n\n```\nhttp_header_user_agent\n```\n\n```\nWebsite\n```\n\n## Custom Mappings\nmParticle\u00e2\u0080\u0099s Facebook integration supportscustom mappingswhich allows you to map your events and attributes for Facebook. mParticle provides mappings for the following Facebook event types:\n\n## fb_content_type\nWhen setting up the custom mappings, the fb_content_type can provide additional information on the event to be used forCollaborative Ads.  The acceptable values for fb_content_type are:\n- product\n- product_group\n- destination\n- flight\n- hotel\n- vehicle\n- [\u00e2\u0080\u009cproduct\u00e2\u0080\u009d, \u00e2\u0080\u009clocal_service_business\u00e2\u0080\u009d]\nIf a value provided for fb_content_type is not in the above list, the value sent will beproduct.\n\n```\nproduct\n```\n\n## Product Events\nmParticle forwards the mParticle product events Added to Cart and Added to Wishlist to Facebook using Facebook\u00e2\u0080\u0099s corresponding pre-defined event names.  mParticle Product Views are forwarded to Facebook as the pre-defined event \u00e2\u0080\u009cViewed Content\u00e2\u0080\u009d.  The unit price, currency, product category, and SKU are passed to Facebook as well.  See below for a sample Added to Cart event call using the Facebook SDK, and an equivalent call using the mParticle SDK.\n\n```\n//Facebook SDK call[FBAppEvents logEvent:FBAppEventNameAddedToCart\n           valueToSum:54.23parameters:@{FBAppEventParameterNameCurrency:@\"USD\",FBAppEventParameterNameContentType:@\"shoes\",FBAppEventParameterNameContentID:@\"HDFU-8452\"}];//Equivalent mParticle SDK callMPProduct*product=[[MPProduct alloc]initWithName:@\"A Shoe\"category:@\"shoes\"quantity:1revenueAmount:54.23];product.unitPrice=54.23;product.sku=@\"HDFU-8452\";[[MParticle sharedInstance]logProductEvent:MPProductEventAddedToCart product:product];\n```\n\n```\n//Facebook SDK call[FBAppEvents logEvent:FBAppEventNameAddedToCart\n           valueToSum:54.23parameters:@{FBAppEventParameterNameCurrency:@\"USD\",FBAppEventParameterNameContentType:@\"shoes\",FBAppEventParameterNameContentID:@\"HDFU-8452\"}];//Equivalent mParticle SDK callMPProduct*product=[[MPProduct alloc]initWithName:@\"A Shoe\"category:@\"shoes\"quantity:1revenueAmount:54.23];product.unitPrice=54.23;product.sku=@\"HDFU-8452\";[[MParticle sharedInstance]logProductEvent:MPProductEventAddedToCart product:product];\n```\n\n```\n//Facebook SDK callBundleparameters=newBundle();parameters.putString(AppEventsConstants.EVENT_PARAM_CURRENCY,\"USD\");parameters.putString(AppEventsConstants.EVENT_PARAM_CONTENT_TYPE,\"shoes\");parameters.putString(AppEventsConstants.EVENT_PARAM_CONTENT_ID,\"HDFU-8452\");logger.logEvent(AppEventsConstants.EVENT_NAME_ADDED_TO_CART,54.23,parameters);//Equivalent mParticle SDK callMPProductproduct=newMPProduct.Builder(\"A Shoe\",\"HDFU-8452\").quantity(1).unitPrice(54.23).totalRevenue(54.23).productCategory(\"shoes\").currencyCode(\"USD\").build();mp.logProductEvent(MPProduct.Event.ADD_TO_CART,product);\n```\n\n```\n//Facebook SDK callBundleparameters=newBundle();parameters.putString(AppEventsConstants.EVENT_PARAM_CURRENCY,\"USD\");parameters.putString(AppEventsConstants.EVENT_PARAM_CONTENT_TYPE,\"shoes\");parameters.putString(AppEventsConstants.EVENT_PARAM_CONTENT_ID,\"HDFU-8452\");logger.logEvent(AppEventsConstants.EVENT_NAME_ADDED_TO_CART,54.23,parameters);//Equivalent mParticle SDK callMPProductproduct=newMPProduct.Builder(\"A Shoe\",\"HDFU-8452\").quantity(1).unitPrice(54.23).totalRevenue(54.23).productCategory(\"shoes\").currencyCode(\"USD\").build();mp.logProductEvent(MPProduct.Event.ADD_TO_CART,product);\n```\n\n## Purchase Events\nPurchase events logged through mParticle\u00e2\u0080\u0099s eCommerce SDK methods will be forwarded to Facebook using Facebook\u00e2\u0080\u0099s \u00e2\u0080\u009cPurchased\u00e2\u0080\u009d pre-defined event name.\n\n## Custom Events\nAll custom app events, which are logged via mParticle\u00e2\u0080\u0099slogEventSDK method, will be forwarded to Facebook as custom app events, using the event name passed to mParticle\u00e2\u0080\u0099slogEventSDK method.\n\n```\nlogEvent\n```\n\n```\nlogEvent\n```\n\n```\n//Facebook SDK call[FBAppEvents logEvent:@\"battledAnOrc\"];//Equivalent mParticle SDK call[[MParticle sharedInstance]logEvent:@\"battledAnOrc\"];\n```\n\n```\n//Facebook SDK call[FBAppEvents logEvent:@\"battledAnOrc\"];//Equivalent mParticle SDK call[[MParticle sharedInstance]logEvent:@\"battledAnOrc\"];\n```\n\n```\n//Facebook SDK calllogger.logEvent(\"battledAnOrc\");//Equivalent mParticle SDK callmp.logEvent(\"battledAnOrc\");\n```\n\n```\n//Facebook SDK calllogger.logEvent(\"battledAnOrc\");//Equivalent mParticle SDK callmp.logEvent(\"battledAnOrc\");\n```\n\n## Screen Views\nFor theWebplatform, mParticle will forward screen views as \u00e2\u0080\u0098PageView\u00e2\u0080\u0099 events.\n- Note:This also applies to Pixel server-side forwarding.\nFor theiOS/tvOSandAndroidplatforms, screen views are supported by custom mappings. Reference thecustom mappingssection for more.\n\n## Web Server-to-Server Fields\nThere are several fields only accepted by server-to-server Web connections. These fields and the mParticle fields they are set from are listed below:\n\n```\nclient_user_agent\n```\n\n```\nFacebook.ClientUserAgent\n```\n\n```\nevent_source_url\n```\n\n```\nFacebook.EventSourceUrl\n```\n\n```\nopt_out\n```\n*Custom data fields can also be set via custom mappings or E-Commerce event fields. See the relevant sections for more details.\n\n## Configuration Settings\n\n```\nstring\n```\n\n```\nbool\n```\n\n## Connection Settings\n\n```\nbool\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nbool\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nbool\n```\n\n```\nbool\n```\n\n```\nstring\n```\n\n```\nenum\n```\n\n```\nenum\n```\n\n```\nbool\n```\n\n```\nbool\n```",
  "url": "https://docs.mparticle.com/integrations/facebook/event"
}