{
  "title": "No Title",
  "content": "## Documentation\n\n## Developers\nData Subject Request API Version 1 and 2\nData Subject Request API Version 3\nPlatform API Overview\nAccounts\nApps\nAudiences\nCalculated Attributes\nData Points\nFeeds\nField Transformations\nServices\nUsers\nWorkspaces\nWarehouse Sync API Overview\nWarehouse Sync API Tutorial\nWarehouse Sync API Reference\nData Mapping\nWarehouse Sync SQL Reference\nWarehouse Sync Troubleshooting Guide\nComposeID\nWarehouse Sync API v2 Migration\nBulk Profile Deletion API Reference\nCalculated Attributes Seeding API\nCustom Access Roles API\nGroup Identity API Reference\nData Planning API\nPixel Service\nProfile API\nEvents API\nmParticle JSON Schema Reference\nIDSync\niOS\nAndroid\nWeb\nOverview\nStep 1. Create an input\nStep 2. Verify your input\nStep 3. Set up your output\nStep 4. Create a connection\nStep 5. Verify your connection\nStep 6. Track events\nStep 7. Track user data\nStep 8. Create a data plan\nStep 9. Test your local app\nStep 1. Create an input\nStep 2. Create an output\nStep 3. Verify output\nOverview\nStep 1. Create an input\nStep 2. Verify your input\nStep 3. Set up your output\nStep 4. Create a connection\nStep 5. Verify your connection\nStep 6. Track events\nStep 7. Track user data\nStep 8. Create a data plan\nStep 1. Create an input\nStep 2. Create an output\nStep 3. Verify output\nStep 1. Create an input\nStep 2. Create an output\nStep 3. Verify output\nStep 1. Create an input\nStep 2. Create an output\nStep 3. Verify output\nOverview\nStep 1. Create an input\nStep 2. Verify your input\nStep 3. Set up your output\nStep 4. Create a connection\nStep 5. Verify your connection\nStep 6. Track events\nStep 7. Track user data\nStep 8. Create a data plan\nAMP SDK\nInitialization\nConfiguration\nNetwork Security Configuration\nEvent Tracking\nUser Attributes\nIDSync\nScreen Events\nCommerce Events\nLocation Tracking\nMedia\nKits\nApplication State and Session Management\nData Privacy Controls\nError Tracking\nOpt Out\nPush Notifications\nWebView Integration\nLogger\nPreventing Blocked HTTP Traffic with CNAME\nLinting Data Plans\nTroubleshooting the Android SDK\nAPI Reference\nUpgrade to Version 5\nCordova Plugin\nIdentity\nDirect URL Routing FAQ\nWeb\nAndroid\niOS\nGetting Started\nUsage\nAPI Reference\nInitialization\nConfiguration\nEvent Tracking\nUser Attributes\nIDSync\nScreen Tracking\nCommerce Events\nLocation Tracking\nMedia\nKits\nApplication State and Session Management\nData Privacy Controls\nError Tracking\nOpt Out\nPush Notifications\nWebview Integration\nUpload Frequency\nApp Extensions\nPreventing Blocked HTTP Traffic with CNAME\nLinting Data Plans\nTroubleshooting iOS SDK\nSocial Networks\niOS 14 Guide\niOS 15 FAQ\niOS 16 FAQ\niOS 17 FAQ\niOS 18 FAQ\nAPI Reference\nUpgrade to Version 7\nGetting Started\nIdentity\nGetting Started\nIdentity\nMedia\nUpload Frequency\nGetting Started\nOpt Out\nInitialize the SDK\nEvent Tracking\nCommerce Tracking\nError Tracking\nScreen Tracking\nIdentity\nLocation Tracking\nSession Management\nGetting Started\nIdentity\nInitialization\nConfiguration\nContent Security Policy\nEvent Tracking\nUser Attributes\nIDSync\nPage View Tracking\nCommerce Events\nLocation Tracking\nMedia\nKits\nApplication State and Session Management\nData Privacy Controls\nError Tracking\nOpt Out\nCustom Logger\nPersistence\nNative Web Views\nSelf-Hosting\nMultiple Instances\nWeb SDK via Google Tag Manager\nPreventing Blocked HTTP Traffic with CNAME\nFacebook Instant Articles\nTroubleshooting the Web SDK\nBrowser Compatibility\nLinting Data Plans\nAPI Reference\nUpgrade to Version 2 of the SDK\nGetting Started\nIdentity\nWeb\nAlexa\nLinting Tools\nSmartype\nmParticle Command Line Interface\nNode SDK\nGo SDK\nPython SDK\nRuby SDK\nJava SDK\nIntroduction\nOutbound Integrations\nFirehose Java SDK\nInbound Integrations\nOverview\nAndroid Kit Integration\nJavaScript Kit Integration\niOS Kit Integration\nCompose ID\nData Hosting Locations\nGlossary\nMigrate from Segment to mParticle\nMigrate from Segment to Client-side mParticle\nMigrate from Segment to Server-side mParticle\nSegment-to-mParticle Migration Reference\nRules Developer Guide\nAPI Credential Management\nThe Developer's Guided Journey to mParticle\n\n## Guides\nCreate an Input\nStart capturing data\nConnect an Event Output\nCreate an Audience\nConnect an Audience Output\nTransform and Enhance Your Data\nIntroduction\nProfiles\nAudiences Overview\nCreate an Audience\nConnect an Audience\nManage Audiences\nReal-time Audiences (Legacy)\nStandard Audiences (Legacy)\nCalculated Attributes Overview\nUsing Calculated Attributes\nCreate with AI Assistance\nCalculated Attributes Reference\nPredictive Audiences Overview\nUsing Predictive Audiences\nJourneys Overview\nManage Journeys\nDownload an audience from a journey\nAudience A/B testing from a journey\nJourneys 2.0\nWhat are predictive attributes?\nCreate Future Prediction\nUse Future Predictions in Campaigns\nAssess and Troubleshoot Predictions\nNext Best Action Overview\nCreate a Next Best Action (NBA)\nView and Manage NBAs\nActivate Next Best Actions in Campaigns\nThe new mParticle Experience\nThe Overview Map\nUsage and Billing Report\nObservability Overview\nObservability User Guide\nObservability Troubleshooting Examples\nObservability Span Glossary\nIntroduction\nData Retention\nConnections\nActivity\nLive Stream\nData Filter\nRules\nTiered Events\nmParticle Users and Roles\nAnalytics Free Trial\nTroubleshooting mParticle\nUsage metering for value-based pricing (VBP)\nIntroduction\nSync and Activate Analytics User Segments in mParticle\nUser Segment Activation\nWelcome Page Announcements\nProject Settings\nRoles and Teammates\nOrganization Settings\nGlobal Project Filters\nPortfolio Analytics\nAnalytics Data Manager Overview\nEvents\nEvent Properties\nUser Properties\nRevenue Mapping\nExport Data\nUTM Guide\nData Dictionary\nQuery Builder Overview\nModify Filters With And/Or Clauses\nQuery-time Sampling\nQuery Notes\nFilter Where Clauses\nEvent vs. User Properties\nGroup By Clauses\nAnnotations\nCross-tool Compatibility\nApply All for Filter Where Clauses\nDate Range and Time Settings Overview\nUser Attributes at Event Time\nUnderstanding the Screen View Event\nAnalyses Introduction\nGetting Started\nVisualization Options\nFor Clauses\nDate Range and Time Settings\nCalculator\nNumerical Settings\nAssisted Analysis\nProperties Explorer\nFrequency in Segmentation\nTrends in Segmentation\nDid [not] Perform Clauses\nCumulative vs. Non-Cumulative Analysis in Segmentation\nTotal Count of vs. Users Who Performed\nSave Your Segmentation Analysis\nExport Results in Segmentation\nExplore Users from Segmentation\nGetting Started with Funnels\nGroup By Settings\nConversion Window\nTracking Properties\nDate Range and Time Settings\nVisualization Options\nInterpreting a Funnel Analysis\nGroup By\nFilters\nConversion over Time\nConversion Order\nTrends\nFunnel Direction\nMulti-path Funnels\nAnalyze as Cohort from Funnel\nSave a Funnel Analysis\nExplore Users from a Funnel\nExport Results from a Funnel\nGetting Started with Cohorts\nAnalysis Modes\nSave a Cohort Analysis\nExport Results\nExplore Users\nSaved Analyses\nManage Analyses in Dashboards\nGetting Started\nEvent Menu\nVisualization\nEnding Event\nSave a Journey Analysis\nGetting Started\nUser Activity Timelines\nTime Settings\nExport Results\nSave A User Analysis\nDashboards\u00e2\u0080\u0093\u00e2\u0080\u0093Getting Started\nManage Dashboards\nDashboard Filters\nOrganize Dashboards\nScheduled Reports\nFavorites\nTime and Interval Settings in Dashboards\nQuery Notes in Dashboards\nUser Aliasing\nThe Demo Environment\nKeyboard Shortcuts\nAnalytics for Marketers\nAnalytics for Product Managers\nCompare Conversion Across Acquisition Sources\nAnalyze Product Feature Usage\nIdentify Points of User Friction\nTime-based Subscription Analysis\nDashboard Tips and Tricks\nUnderstand Product Stickiness\nOptimize User Flow with A/B Testing\nUser Segments\nUser Segments Export API\nDashboard Filter API\nIDSync Overview\nUse Cases for IDSync\nComponents of IDSync\nStore and Organize User Data\nIdentify Users\nDefault IDSync Configuration\nProfile Conversion Strategy\nProfile Link Strategy\nProfile Isolation Strategy\nBest Match Strategy\nAliasing\nOverview\nCreate and Manage Group Definitions\nIntroduction\nCatalog\nLive Stream\nData Plans\nBlocked Data Backfill Guide\nWarehouse Sync\nData Privacy Controls\nData Subject Requests\nDefault Service Limits\nFeeds\nCross-Account Audience Sharing\nApproved Sub-Processors\nImport Data with CSV Files\nCSV File Reference\nGlossary\nVideo Index\nSingle Sign-On (SSO)\nSetup Examples\nDebug Console\nData Warehouse Delay Alerting\nIntroduction\nIntroduction\nIntroduction\nRudderstack\nGoogle Tag Manager\nSegment\nAdvanced Data Warehouse Settings\nAWS Kinesis (Snowplow)\nAWS Redshift (Define Your Own Schema)\nAWS S3 Integration (Define Your Own Schema)\nAWS S3 (Snowplow Schema)\nBigQuery (Snowplow Schema)\nBigQuery Firebase Schema\nBigQuery (Define Your Own Schema)\nGCP BigQuery Export\nSnowflake (Snowplow Schema)\nSnowplow Schema Overview\nSnowflake (Define Your Own Schema)\nDashboard Filter API (Deprecated)\nREST API\nUser Segments Export API (Deprecated)\nSDKs Introduction\nReact Native\niOS\nAndroid\nJava\nJavaScript\nPython\nObject API\nAliasing\n\n## Rules\nRules allow you to cleanse, enrich and transform your incoming and outgoing data. A rule is a script which accepts an incoming mParticle Events API \u00e2\u0080\u009cbatch\u00e2\u0080\u009d object and modifies it according to your business logic. Some example use-cases for a rule are:\n- Modify a batch\u00e2\u0080\u0099s data\n- Drop a batch\n- Modify an event\u00e2\u0080\u0099s data\n- Drop an event from a batch\n- Add events to a batch\n\n## Rule execution\nEach of your Inputs, such as for your web, mobile, or server-to-server data, has an individually configured data pipeline, and each Input\u00e2\u0080\u0099s pipeline contains the same key stages. Rules are therefore applied for a specific Input\u00e2\u0080\u0099s pipeline, and it\u00e2\u0080\u0099s up to you choose where in that Input\u00e2\u0080\u0099s pipeline each Rule is executed. A single Input pipeline may contain multiple Rules each stage.\n\n## mParticle pipeline stages\nStage 1 - Input\nData is received by mParticle for a specific Input (such as Web, iOS, or a custom server feed).\nStage 2 - Storage and Processing\nThe Input\u00e2\u0080\u0099s data is stored and processed by mParticle, including:\n- mParticle\u00e2\u0080\u0099s profile system, which stores user data and enriches the Input\u00e2\u0080\u0099s data based on the existing profile of that user.\n- mParticle Data Master tool\nStage 3 - Output\nThe Input\u00e2\u0080\u0099s data is sent individually to the mParticle Audience system and 300+ partner integrations. In this stage the pipeline actually branches out with a single Input potentially being connected to many Outputs.\n\n## Rule application\nRules are applied to a specific Input\u00e2\u0080\u0099s pipeline. There are two places in the pipeline where rules can be applied:\nIn between Stage 1 and Stage 2\nRules executed between Stage 1 and Stage 2 affect the data sent to both Stage 2 and then Stage 3, including the mParticle profile store, audience store, and all outputs. These are labeled \u00e2\u0080\u009cAll Output\u00e2\u0080\u009d Rules in your mParticle dashboard.\nIn between Stage 2 and Stage 3\nYou can also apply a rule right before it\u00e2\u0080\u0099s sent to aspecificOutput. This lets you mutate data to handle specific requirements or mappings that need to occur for a given partner integration.\n\n## Rule requirements\n- All rules accept an mParticle Events API batch object and can return a modified or null batch object.\n- There are some differences in error handling and available fields depending on pipeline location. SeeRules Developer Guidefor details.\n- A 200ms timeout applies to all rules. You can choose if a batch should be dropped or continue unprocessed by the rules in the case of a timeout.\n- Rules are executed on the server and only act on data forwarded downstream server-to-server. A warning is shown in the dashboard if you set up one of the following rules:A rule for integrations that forwards data client-side via a kit.A rule for hybrid integrations that support forwarding via client-side and server-to-server.\nRules are executed on the server and only act on data forwarded downstream server-to-server. A warning is shown in the dashboard if you set up one of the following rules:\n- A rule for integrations that forwards data client-side via a kit.\n- A rule for hybrid integrations that support forwarding via client-side and server-to-server.\n- If you are using a rule to modify user identities or user attributes, you must include a \u00e2\u0080\u009cUser Identity Change Event\u00e2\u0080\u009d (user_identity_change) or a \u00e2\u0080\u009cUser Attribute Change Event\u00e2\u0080\u009d (user_attribute_change). SeeRules Developer Guidefor an example ofuser_attribute_changein a rule.\n\n```\nuser_identity_change\n```\n\n```\nuser_attribute_change\n```\n\n```\nuser_attribute_change\n```\n\n## Create a function in AWS\nmParticle rules are hosted in your AWS account as Lambda functions. To do this, you need to be able to provide an Amazon Resource Number (ARN) for your rule. See theAWS Lambda documentationfor help creating a function.  The Lambda functions used for rules must be hosted in the same AWS region as yourmParticle account.\n- The name of the function must begin with \u00e2\u0080\u009cmpr\u00e2\u0080\u009d\n- Your development rule must have an alias of \u00e2\u0080\u009c$LATEST\u00e2\u0080\u009d\n- Your production rule must have an alias of \u00e2\u0080\u009cPROD\u00e2\u0080\u009d\nYour ARNs should look something like this:\narn:aws:lambda:us-east-1:999999999999:function:mprmylambdafunction:PROD\n\n```\narn:aws:lambda:us-east-1:999999999999:function:mprmylambdafunction:PROD\n```\narn:aws:lambda:us-east-1:999999999999:function:mprmylambdafunction:$LATEST\n\n```\narn:aws:lambda:us-east-1:999999999999:function:mprmylambdafunction:$LATEST\n```\n\n## IAM user\nTo connect to your AWS Lambda function, you must provide the AWS Access Key ID and Secret Access Key for anIAM user.\nIn the IAM dashboard, add the following permissions policy for the user:\n\n```\n{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"mpRulesLogs\",\"Effect\":\"Allow\",\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:DescribeLogGroups\",\"logs:DescribeLogStreams\",\"logs:FilterLogEvents\",\"logs:PutLogEvents\"],\"Resource\":[\"arn:aws:logs:us-east-1:*:log-group:/aws/lambda/mpr*\"]},{\"Sid\":\"mpRulesMetrics\",\"Effect\":\"Allow\",\"Action\":[\"cloudwatch:GetMetricStatistics\"],\"Resource\":[\"*\"]},{\"Sid\":\"mpRulesLambda\",\"Effect\":\"Allow\",\"Action\":[\"lambda:InvokeFunction\",\"lambda:GetAlias\"],\"Resource\":[\"arn:aws:lambda:us-east-1:*:function:mpr*\"]}]}\n```\n\n```\n{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"mpRulesLogs\",\"Effect\":\"Allow\",\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:DescribeLogGroups\",\"logs:DescribeLogStreams\",\"logs:FilterLogEvents\",\"logs:PutLogEvents\"],\"Resource\":[\"arn:aws:logs:us-east-1:*:log-group:/aws/lambda/mpr*\"]},{\"Sid\":\"mpRulesMetrics\",\"Effect\":\"Allow\",\"Action\":[\"cloudwatch:GetMetricStatistics\"],\"Resource\":[\"*\"]},{\"Sid\":\"mpRulesLambda\",\"Effect\":\"Allow\",\"Action\":[\"lambda:InvokeFunction\",\"lambda:GetAlias\"],\"Resource\":[\"arn:aws:lambda:us-east-1:*:function:mpr*\"]}]}\n```\n\n## IAM role\nYou will also need to create a role in IAM. Assign this role the same policy document created above.\nAssign this role to each Lambda function you plan to deploy as an mParticle rule.\n\n## Creating a rule in the dashboard\n- Create a rule by navigating toData Master > Rules\n- ClickNew Rule.\nEnter your Development and Production ARNs and clickTest.\n\n## Error handling\nWhen you first test a rule, you must select aFailure Action. This determines what happens if your rule throws an unhandled exception. There is no default action, you must select one of the following:\n- If you chooseDiscard, an unhandled exception causes your rule returnnull, effectively dropping the batch.\n\n```\nDiscard\n```\n\n```\nnull\n```\n- If you chooseProceed, an unhandled exception causes your rule to return the unaltered batch object, proceeding as if the rule had not been applied.\n\n```\nProceed\n```\nRegardless of which option you choose, it\u00e2\u0080\u0099s best practice to handle all exceptions in your code, rather than falling back on the above defaults. This is especially true if your rule deals with events, where an unhandled exception from just one event could lead to all events in the batch being dropped.\n\n## Javascript syntax\n\n```\nexports.handler=(batch,context,callback)=>{\n    //do something with batch\n    callback(null, batch)\n}\n```\n\n```\nexports.handler=(batch,context,callback)=>{\n    //do something with batch\n    callback(null, batch)\n}\n```\nYour code must be a validLambda function.\n- batchis the complete incoming batch object.\n\n```\nbatch\n```\n- contextis a required argument for Lambda functions, but is effectivelynullfor mParticle rules.\n\n```\ncontext\n```\n\n```\nnull\n```\n\n## Testing rules\nThe first time you test a rule, you are asked to provide a name, description and failure action. After naming a rule, you can test it by using one of the sample templates provided in the Test rule dialog. You can also copy and paste batch JSON from your Live Stream. If you do this, be sure to pick a full batch to copy, not a single event.  ClickTestto run. Optionally, check a box to save your JSON template in local storage for future testing.\nYou must enter validbatchJSON in the code editor.\n\n```\nbatch\n```\nIf there are any syntactical errors in your code, warning or error icons will display next to the line number with details of the problem so you can correct.\nAfter clickingTest, you can examine the JSON output from your function to see that the input has been modified as expected.\nAfter a successful test you can clickSaveto save the Rule. Due to recent updates in AWS Lambda, it may be necessary to wait one minute after a successful test in order to save the Rule.\nIf your test fails, try examining thelogsfor any console output.\n\n## Versioning\nWhen you first create a rule, by default it will only be applied toDEVdata. As well as testing a rule with sample JSON you should test the rule in your dev environment to make sure data reaching your output services is as expected. When you are ready to apply a rule to your production data, clickPromote to Prodon the rule page. This will create a \u00e2\u0080\u009cv1\u00e2\u0080\u009d production rule.\n\n```\nDEV\n```\nNote that before a rule can be promoted to Prod, you must remove allconsole.log()statements.\n\n```\nconsole.log()\n```\nIf you need to make changes, choose$LATESTfrom theVersiondropdown. All other versions are read only. Test your changes with your dev environment and, when you are ready, clickPromote to Prodto create \u00e2\u0080\u009cv2\u00e2\u0080\u009d of your production rule.\n\n```\n$LATEST\n```\nNote that you can have a maximum of 50 versions per rule. If you have too many versions, select a version and click the trash can icon to the right of the version number to delete it.\n\n## Status\nEach rule has a master switch in the Settings panel. If there is a problem with your rule, you can switch it off and it will be disabled for all connections until you enable it again. To disable, clickEditin the right sidebar and set theStatusslider toinactive.\n\n## Metrics\nThe following metrics are available:\n- Invocations- how many times the rule was invoked\n- Throttles- how many times a 429 throttling response was returned when calling the rule\n- Errors- how many errors have occurred when calling the rule\nThese metrics are for the last 24 hours and apply to all connections. Summaries for each rule can be seen on the main rules page. Detailed graph of the previous 24 hours is available on theMonitoringtab of the individual rule page.\n\n## Logs\nTo help you with troubleshooting rules, mParticle maintains logs for each rule where you can view all console output. From an individual rule page, select theLogstab. You can filter messages by date range or search for keywords.\n\n## Deleting rules\nFrom the rules listing, select theDeleteaction to delete the rule. If the rule is applied to any connections, it will be removed from those connections.\nWas this page helpful?",
  "url": "https://docs.mparticle.com/guides/platform-guide/rules"
}