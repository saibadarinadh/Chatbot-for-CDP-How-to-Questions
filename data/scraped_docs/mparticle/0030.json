{
  "title": "No Title",
  "content": "## Documentation\n\n## Developers\nData Subject Request API Version 1 and 2\nData Subject Request API Version 3\nPlatform API Overview\nAccounts\nApps\nAudiences\nCalculated Attributes\nData Points\nFeeds\nField Transformations\nServices\nUsers\nWorkspaces\nWarehouse Sync API Overview\nWarehouse Sync API Tutorial\nWarehouse Sync API Reference\nData Mapping\nWarehouse Sync SQL Reference\nWarehouse Sync Troubleshooting Guide\nComposeID\nWarehouse Sync API v2 Migration\nBulk Profile Deletion API Reference\nCalculated Attributes Seeding API\nCustom Access Roles API\nGroup Identity API Reference\nData Planning API\nPixel Service\nProfile API\nEvents API\nmParticle JSON Schema Reference\nIDSync\niOS\nAndroid\nWeb\nOverview\nStep 1. Create an input\nStep 2. Verify your input\nStep 3. Set up your output\nStep 4. Create a connection\nStep 5. Verify your connection\nStep 6. Track events\nStep 7. Track user data\nStep 8. Create a data plan\nStep 9. Test your local app\nStep 1. Create an input\nStep 2. Create an output\nStep 3. Verify output\nOverview\nStep 1. Create an input\nStep 2. Verify your input\nStep 3. Set up your output\nStep 4. Create a connection\nStep 5. Verify your connection\nStep 6. Track events\nStep 7. Track user data\nStep 8. Create a data plan\nStep 1. Create an input\nStep 2. Create an output\nStep 3. Verify output\nStep 1. Create an input\nStep 2. Create an output\nStep 3. Verify output\nStep 1. Create an input\nStep 2. Create an output\nStep 3. Verify output\nOverview\nStep 1. Create an input\nStep 2. Verify your input\nStep 3. Set up your output\nStep 4. Create a connection\nStep 5. Verify your connection\nStep 6. Track events\nStep 7. Track user data\nStep 8. Create a data plan\nAMP SDK\nInitialization\nConfiguration\nNetwork Security Configuration\nEvent Tracking\nUser Attributes\nIDSync\nScreen Events\nCommerce Events\nLocation Tracking\nMedia\nKits\nApplication State and Session Management\nData Privacy Controls\nError Tracking\nOpt Out\nPush Notifications\nWebView Integration\nLogger\nPreventing Blocked HTTP Traffic with CNAME\nLinting Data Plans\nTroubleshooting the Android SDK\nAPI Reference\nUpgrade to Version 5\nCordova Plugin\nIdentity\nDirect URL Routing FAQ\nWeb\nAndroid\niOS\nGetting Started\nUsage\nAPI Reference\nInitialization\nConfiguration\nEvent Tracking\nUser Attributes\nIDSync\nScreen Tracking\nCommerce Events\nLocation Tracking\nMedia\nKits\nApplication State and Session Management\nData Privacy Controls\nError Tracking\nOpt Out\nPush Notifications\nWebview Integration\nUpload Frequency\nApp Extensions\nPreventing Blocked HTTP Traffic with CNAME\nLinting Data Plans\nTroubleshooting iOS SDK\nSocial Networks\niOS 14 Guide\niOS 15 FAQ\niOS 16 FAQ\niOS 17 FAQ\niOS 18 FAQ\nAPI Reference\nUpgrade to Version 7\nGetting Started\nIdentity\nGetting Started\nIdentity\nMedia\nUpload Frequency\nGetting Started\nOpt Out\nInitialize the SDK\nEvent Tracking\nCommerce Tracking\nError Tracking\nScreen Tracking\nIdentity\nLocation Tracking\nSession Management\nGetting Started\nIdentity\nInitialization\nConfiguration\nContent Security Policy\nEvent Tracking\nUser Attributes\nIDSync\nPage View Tracking\nCommerce Events\nLocation Tracking\nMedia\nKits\nApplication State and Session Management\nData Privacy Controls\nError Tracking\nOpt Out\nCustom Logger\nPersistence\nNative Web Views\nSelf-Hosting\nMultiple Instances\nWeb SDK via Google Tag Manager\nPreventing Blocked HTTP Traffic with CNAME\nFacebook Instant Articles\nTroubleshooting the Web SDK\nBrowser Compatibility\nLinting Data Plans\nAPI Reference\nUpgrade to Version 2 of the SDK\nGetting Started\nIdentity\nWeb\nAlexa\nLinting Tools\nSmartype\nmParticle Command Line Interface\nNode SDK\nGo SDK\nPython SDK\nRuby SDK\nJava SDK\nIntroduction\nOutbound Integrations\nFirehose Java SDK\nInbound Integrations\nOverview\nAndroid Kit Integration\nJavaScript Kit Integration\niOS Kit Integration\nCompose ID\nData Hosting Locations\nGlossary\nMigrate from Segment to mParticle\nMigrate from Segment to Client-side mParticle\nMigrate from Segment to Server-side mParticle\nSegment-to-mParticle Migration Reference\nRules Developer Guide\nAPI Credential Management\nThe Developer's Guided Journey to mParticle\n\n## Guides\nCreate an Input\nStart capturing data\nConnect an Event Output\nCreate an Audience\nConnect an Audience Output\nTransform and Enhance Your Data\nIntroduction\nProfiles\nAudiences Overview\nCreate an Audience\nConnect an Audience\nManage Audiences\nReal-time Audiences (Legacy)\nStandard Audiences (Legacy)\nCalculated Attributes Overview\nUsing Calculated Attributes\nCreate with AI Assistance\nCalculated Attributes Reference\nPredictive Audiences Overview\nUsing Predictive Audiences\nJourneys Overview\nManage Journeys\nDownload an audience from a journey\nAudience A/B testing from a journey\nJourneys 2.0\nWhat are predictive attributes?\nCreate Future Prediction\nUse Future Predictions in Campaigns\nAssess and Troubleshoot Predictions\nNext Best Action Overview\nCreate a Next Best Action (NBA)\nView and Manage NBAs\nActivate Next Best Actions in Campaigns\nThe new mParticle Experience\nThe Overview Map\nUsage and Billing Report\nObservability Overview\nObservability User Guide\nObservability Troubleshooting Examples\nObservability Span Glossary\nIntroduction\nData Retention\nConnections\nActivity\nLive Stream\nData Filter\nRules\nTiered Events\nmParticle Users and Roles\nAnalytics Free Trial\nTroubleshooting mParticle\nUsage metering for value-based pricing (VBP)\nIntroduction\nSync and Activate Analytics User Segments in mParticle\nUser Segment Activation\nWelcome Page Announcements\nProject Settings\nRoles and Teammates\nOrganization Settings\nGlobal Project Filters\nPortfolio Analytics\nAnalytics Data Manager Overview\nEvents\nEvent Properties\nUser Properties\nRevenue Mapping\nExport Data\nUTM Guide\nData Dictionary\nQuery Builder Overview\nModify Filters With And/Or Clauses\nQuery-time Sampling\nQuery Notes\nFilter Where Clauses\nEvent vs. User Properties\nGroup By Clauses\nAnnotations\nCross-tool Compatibility\nApply All for Filter Where Clauses\nDate Range and Time Settings Overview\nUser Attributes at Event Time\nUnderstanding the Screen View Event\nAnalyses Introduction\nGetting Started\nVisualization Options\nFor Clauses\nDate Range and Time Settings\nCalculator\nNumerical Settings\nAssisted Analysis\nProperties Explorer\nFrequency in Segmentation\nTrends in Segmentation\nDid [not] Perform Clauses\nCumulative vs. Non-Cumulative Analysis in Segmentation\nTotal Count of vs. Users Who Performed\nSave Your Segmentation Analysis\nExport Results in Segmentation\nExplore Users from Segmentation\nGetting Started with Funnels\nGroup By Settings\nConversion Window\nTracking Properties\nDate Range and Time Settings\nVisualization Options\nInterpreting a Funnel Analysis\nGroup By\nFilters\nConversion over Time\nConversion Order\nTrends\nFunnel Direction\nMulti-path Funnels\nAnalyze as Cohort from Funnel\nSave a Funnel Analysis\nExplore Users from a Funnel\nExport Results from a Funnel\nGetting Started with Cohorts\nAnalysis Modes\nSave a Cohort Analysis\nExport Results\nExplore Users\nSaved Analyses\nManage Analyses in Dashboards\nGetting Started\nEvent Menu\nVisualization\nEnding Event\nSave a Journey Analysis\nGetting Started\nUser Activity Timelines\nTime Settings\nExport Results\nSave A User Analysis\nDashboards\u00e2\u0080\u0093\u00e2\u0080\u0093Getting Started\nManage Dashboards\nDashboard Filters\nOrganize Dashboards\nScheduled Reports\nFavorites\nTime and Interval Settings in Dashboards\nQuery Notes in Dashboards\nUser Aliasing\nThe Demo Environment\nKeyboard Shortcuts\nAnalytics for Marketers\nAnalytics for Product Managers\nCompare Conversion Across Acquisition Sources\nAnalyze Product Feature Usage\nIdentify Points of User Friction\nTime-based Subscription Analysis\nDashboard Tips and Tricks\nUnderstand Product Stickiness\nOptimize User Flow with A/B Testing\nUser Segments\nUser Segments Export API\nDashboard Filter API\nIDSync Overview\nUse Cases for IDSync\nComponents of IDSync\nStore and Organize User Data\nIdentify Users\nDefault IDSync Configuration\nProfile Conversion Strategy\nProfile Link Strategy\nProfile Isolation Strategy\nBest Match Strategy\nAliasing\nOverview\nCreate and Manage Group Definitions\nIntroduction\nCatalog\nLive Stream\nData Plans\nBlocked Data Backfill Guide\nWarehouse Sync\nData Privacy Controls\nData Subject Requests\nDefault Service Limits\nFeeds\nCross-Account Audience Sharing\nApproved Sub-Processors\nImport Data with CSV Files\nCSV File Reference\nGlossary\nVideo Index\nSingle Sign-On (SSO)\nSetup Examples\nDebug Console\nData Warehouse Delay Alerting\nIntroduction\nIntroduction\nIntroduction\nRudderstack\nGoogle Tag Manager\nSegment\nAdvanced Data Warehouse Settings\nAWS Kinesis (Snowplow)\nAWS Redshift (Define Your Own Schema)\nAWS S3 Integration (Define Your Own Schema)\nAWS S3 (Snowplow Schema)\nBigQuery (Snowplow Schema)\nBigQuery Firebase Schema\nBigQuery (Define Your Own Schema)\nGCP BigQuery Export\nSnowflake (Snowplow Schema)\nSnowplow Schema Overview\nSnowflake (Define Your Own Schema)\nDashboard Filter API (Deprecated)\nREST API\nUser Segments Export API (Deprecated)\nSDKs Introduction\nReact Native\niOS\nAndroid\nJava\nJavaScript\nPython\nObject API\nAliasing\n\n## Integrations\nAudience\nEvent\nEvent\nFeed\nAudience\nEvent\nAudience\nEvent\nEvent\nFeed\nCookie Sync\nServer-to-Server Events\nPlatform SDK Events\nAudience\nAudience\nAudience\nAudience\nFeed\nEvent\nAudience\nFeed\nEvent\nEvent\nEvent\nFeed\nEvent\nAudience\nEvent\nEvent\nData Warehouse\nAudience\nEvent\nEvent\nEvent\nAudience\nEvent\nForwarding Data Subject Requests\nAudience\nEvent\nForwarding Data Subject Requests\nAudience\nEvent\nEvent\nFeed\nEvent\nFeed\nForwarding Data Subject Requests\nAudience\nEvent\nEvent\nEvent\nEvent\nEvent\nFeed\nEvent\nAudience\nEvent\nAudience\nEvent\nFeed\nEvent\nEvent\nFeed\nForwarding Data Subject Requests\nEvent\nFeed\nForwarding Data Subject Requests\nAudience\nFeed\nForwarding Data Subject Requests\nEvent\nEvent\nEvent\nAudience\nEvent\nFeed\nAudience\nEvent\nFeed\nAudience\nEvent\nFeed\nEvent\nEvent\nAudience\nFeed\nEvent\nAudience\nEvent\nForwarding Data Subject Requests\nFeed\nEvent\nCustom Feed\nEvent\nFeed\nAudience\nFeed\nEvent\nData Warehouse\nEvent\nAudience\nAudience\nEvent\nEvent\nAudience\nAudience\nEvent\nAudience\nEvent\nAudience\nEvent\nAudience\nEvent\nEvent\nEvent\nEvent\nEvent\nFeed\nAudience\nEvent\nFeed\nAudience\nAudience\nAudience\nEvent\nEvent\nAudience\nData Warehouse\nAudience\nEvent\nEvent\nEvent\nAudience\nCookie Sync\nEvent\nEvent\nEvent\nEvent\nEvent\nFeed\nEvent\nFeed\nEvent\nEvent\nEvent\nEvent\nAudience\nAudience\nAudience\nEvent\nAudience\nEvent\nFeed\nEvent\nAudience\nFeed\nEvent\nAudience\nEvent\nFeed\nAudience\nEvent\nAudience\nEvent\nEvent\nAudience\nEvent\nEvent\nAudience\nEvent\nForwarding Data Subject Requests\nFeed\nEvent\nFeed\nAudience\nEvent\nAudience\nAudience\nFeed\nEvent\nAudience\nEvent\nEvent\nAudience\nEvent\nAudience\nEvent\nFeed\nAudience\nAudience\nEvent\nAudience\nEvent\nAudience\nAudience\nForwarding Data Subject Requests\nEvent\nAudience\nAudience\nEvent\nFeed\nEvent\nAudience\nEvent\nEvent\nEvent\nAudience\nEvent\nFeed\nEvent\nEvent\nAudience\nEvent\nFeed\nEvent\nEvent\nEvent\nAudience\nEvent\nEvent\nAudience\nEvent\nFeed\nEvent\nAudience\nInbound Data Subject Requests\nAudience\nEvent\nEvent\nEvent\nFeed\nAudience\nEvent\nEvent\nEvent\nAudience\nFeed\nAudience\nEvent\nEvent\nFeed\nEvent\nAudience\nEvent\nEvent\nAudience\nEvent\nFeed\nEvent\nEvent\nEvent\nAudience\nEvent\nFeed\nEvent\nAudience\nAudience\nEvent\nEvent\nAudience\nEvent\nFeed\nAudience\nEvent\nEvent\nAudience\nFeed\nFeed\nEvent\nAudience\nFeed\nEvent\nFeed\nCustom Pixel\nEvent\nEvent\nFeed\nEvent\nEvent\nEvent\nAudience\nAudience\nEvent\nEvent\nEvent\nData Warehouse\nEvent\nFeed\nEvent\nEvent\nAudience\nEvent\nAudience\nEvent\nFeed\nAudience\nEvent\nAudience\nEvent\nLoyalty Feed\nFeed\nEvent\nFeed\nAudience\nEvent\nAudience\nAudience\nAudience\nCookie Sync\nAudience\nEvent\nFeed\nAudience\nAudience (Deprecated)\nEvent\nAudience Migration\nEvent\nAudience\nAudience\nEvent\nEvent\nAudience\nAudience\nEvent\nAudience\nEvent\nAudience\nEvent\nEvent\nEvent\nEvent\nAudience\nCookie Sync\nAudience\nCookie Sync\nFeed\nAudience\nAudience\nEvent\nEvent\nFeed\nEvent\n\n## Event\nYou can opt in to V5 of the Braze SDK by selecting the version in a connection setting in the mParticle UI.\nFor more details about upgrading to V5 of the Braze web SDK,follow these instructions, whether you self-host or load mParticle via snippet/CDN..\nIf you are using version 2 of the @mparticle/web-appboy-kit, you will need totransition to @mparticle/web-braze-kit per the instructions herebefore following the above instructions as well.\nBrazeis a comprehensive customer engagement platform that powers relevant experiences between consumers and brands they love. Braze helps brands foster human connection through interactive conversations across channels.\nBraze offers a broad range of functionality via their solution and it is critically important that you work directly with your Braze representative to ensure that you are correctly planning and implementing their features.  mParticle does not recommend enabling forwarding to Braze until you have completed the Braze planning process with your Braze team.\n- Braze Documentation\n\n## mParticle Braze Implementation Scenarios\nThemParticle SDKallows you to include the Braze kit which allows Braze interface components (images, layout files, etc.) and as a result supports many Braze features, including:\n- App Analytics\n- User Segmentation\n- Push Notifications\n- Email\n- News Feed\n- In-App Messaging\n- Feedback\n- Geolocation\nFeatures are supported by the mParticle SDK only after you install themParticle Braze Kit(formerly Appboy), which then forwards data from your app to Braze.\nFeatures are supported in two ways:\n- The kit itself provides functionality directly without you having to call the third-party SDK. For example, most partners have a method called or equivalent tologEvent.  When someone callsmParticle.logEvent, our kits map to the partner SDKlogEventmethod, in this case,Braze.logEvent, and automatically sends it to Braze. You don\u00e2\u0080\u0099t have to callBraze.logEventbecause mParticle does it for you after you callmParticle.logEvent.\n\n```\nlogEvent\n```\n\n```\nmParticle.logEvent\n```\n\n```\nlogEvent\n```\n\n```\nBraze.logEvent\n```\n\n```\nBraze.logEvent\n```\n\n```\nmParticle.logEvent\n```\n- For some features, for example some Braze banners or modals, you must callBraze.bannerMethod()orBraze.modalMethod(). Our kit loads Braze so that you can call any Braze method you need, even if our kit does not call it for you.\n\n```\nBraze.bannerMethod()\n```\n\n```\nBraze.modalMethod()\n```\nThe mParticle S2S APIallows you to send data server side (API reference). The S2S API supports iOS, Android and Web data. In this scenario, mParticle forwards data via Braze\u00e2\u0080\u0099s REST API which supports a limited set of features.\nFor server-side data to be forwarded to Braze, it must include your selected External Identity Type. To relax this requirement, see the Disable External ID Constraint connection setting.\nThe following event types can be forwarded to Braze via S2S:\n- Commerce Event\n- Custom Event\n- Opt Out\n- Push Message\n- Push Message Registration\n- Screen View\n- Session Start / End\n\n## Kit Integration\nThe Braze solution offers features that involve Braze-proprietary user interaction components including Newsfeed, In-App Messaging, and Feedback.\nTo use Braze with one of the mParticle mobile SDKs, please review the kit documentation for theAndroid SDKor theiOS SDK.\nYou must directly call the Braze kit to use the Newsfeed, In-App Messaging, and Feedback features. Examples of directly calling a kit are provided for bothAndroidandiOS.\n\n## Braze v9 iOS SDK Upgrade Notes\nTo comply with Apple\u00e2\u0080\u0099s iOS 17 privacy manifest it is required to update to Braze SDK version 9.0.0 or later which is included by the mParticle Braze Kit version 8.60 or later. Note that it is also required to update to at least version 8.24.0 of the mParticle SDK if you are not creating your own Braze instance and passing it to the mParticle Braze Kit in order for this functionality to work.\nThere are also additional steps required to comply which are outlined in the Braze documentationhere.\nIf you are creating your own Braze instance and passing it to the mParticle Kit as described in the iOS App Launch Tracking sectionbelow, you can simply follow instructions in the above Braze documentation directly.\nIf not, you will still need to follow the above Braze documentation, with the following exceptions:\n- Set thetrackingPropertyAllowListproperty on the mParticle Braze Kit before starting the mParticle SDK instead of setting it on the Braze instance directly.\n\n```\ntrackingPropertyAllowList\n```\n\n```\n// In this example, we're setting phone number and email as tracking data.// Replace the values in the allow list with the data you are trackingMPKitAppboy.setBrazeTrackingPropertyAllowList([.email,.dateOfBirth])\n```\n\n```\n// In this example, we're setting phone number and email as tracking data.// Replace the values in the allow list with the data you are trackingMPKitAppboy.setBrazeTrackingPropertyAllowList([.email,.dateOfBirth])\n```\n\n```\n// In this example, we're setting phone number and email as tracking data.// Replace the values in the allow list with the data you are trackingNSSet*allowList=[NSSet setWithArray:@[BRZTrackingProperty.phoneNumber,BRZTrackingProperty.email]];[MPKitAppboy setBrazeTrackingPropertyAllowList:allowList];\n```\n\n```\n// In this example, we're setting phone number and email as tracking data.// Replace the values in the allow list with the data you are trackingNSSet*allowList=[NSSet setWithArray:@[BRZTrackingProperty.phoneNumber,BRZTrackingProperty.email]];[MPKitAppboy setBrazeTrackingPropertyAllowList:allowList];\n```\n- In yourATTrackingManagerrequest callback, call the corresponding method on the mParticle SDK instead of setting it on the Braze instance directly.\n\n```\nATTrackingManager\n```\n\n```\nATTrackingManager.requestTrackingAuthorization{statusinletmpStatus=MPATTAuthorizationStatus(rawValue:status.rawValue)??.notDeterminedlettimestampMillis:NSNumber=(Date().timeIntervalSince1970*1000)asNSNumberMParticle.sharedInstance().setATTStatus(mpStatus,withATTStatusTimestampMillis:timestampMillis)}\n```\n\n```\nATTrackingManager.requestTrackingAuthorization{statusinletmpStatus=MPATTAuthorizationStatus(rawValue:status.rawValue)??.notDeterminedlettimestampMillis:NSNumber=(Date().timeIntervalSince1970*1000)asNSNumberMParticle.sharedInstance().setATTStatus(mpStatus,withATTStatusTimestampMillis:timestampMillis)}\n```\n\n```\n[ATTrackingManager requestTrackingAuthorizationWithCompletionHandler:^(ATTrackingManagerAuthorizationStatus status){MPATTAuthorizationStatus mpStatus=(MPATTAuthorizationStatus)status;NSNumber*timestampMillis=@(NSDate.now.timeIntervalSince1970*1000);[MParticle.sharedInstance setATTStatus:mpStatus withATTStatusTimestampMillis:timestampMillis];}];\n```\n\n```\n[ATTrackingManager requestTrackingAuthorizationWithCompletionHandler:^(ATTrackingManagerAuthorizationStatus status){MPATTAuthorizationStatus mpStatus=(MPATTAuthorizationStatus)status;NSNumber*timestampMillis=@(NSDate.now.timeIntervalSince1970*1000);[MParticle.sharedInstance setATTStatus:mpStatus withATTStatusTimestampMillis:timestampMillis];}];\n```\n\n## Push Notifications\nPush notifications work differently for web and for mobile.\n\n## Web\nmParticle integrates with Braze to allow web push notifications to further engage your visitors. We integrated Braze\u00e2\u0080\u0099sSoft Push Prompts, which allows you to ask your user if they\u00e2\u0080\u0099d like to stay in touch before the browser alerts them to allow notifications. This is done since the browser throttles how often you can prompt the user for push notifications, and if the user denies permission, you can never ask them again. See below for directions on how to implement push notifications, which customizes Braze\u00e2\u0080\u0099simplementation instructionsto work with mParticle.\n- Configure your siteCreate aservice-worker.jsfile to your root directory. Inside yourservice-worker.jsfile, includeself.importScripts('https://static.mparticle.com/sdk/js/braze/service-worker-3.5.0.js');mParticle hosts Braze\u00e2\u0080\u0099s service worker in order to prevent unpredictable versioning issues. Do not use Braze\u00e2\u0080\u0099s service-worker.js CDN.\nConfigure your site\n- Create aservice-worker.jsfile to your root directory. Inside yourservice-worker.jsfile, include\n\n```\nservice-worker.js\n```\n\n```\nservice-worker.js\n```\n\n```\nself.importScripts('https://static.mparticle.com/sdk/js/braze/service-worker-3.5.0.js');\n```\n\n```\nself.importScripts('https://static.mparticle.com/sdk/js/braze/service-worker-3.5.0.js');\n```\nmParticle hosts Braze\u00e2\u0080\u0099s service worker in order to prevent unpredictable versioning issues. Do not use Braze\u00e2\u0080\u0099s service-worker.js CDN.\n- Configure Safari PushGenerate a Safari Push Certificate following these \u00e2\u0080\u009cRegistering with Apple\u00e2\u0080\u009d InstructionsIn the Braze dashboard, on theapp settings page(where your API keys are located), select your Web app. Click \u00e2\u0080\u009cConfigure Safari Push\u00e2\u0080\u009d and follow the instructions, uploading the push certificate you just generated.In your mParticle dashboard, open your Braze connection settings. UnderSafari Website Push ID, type in yourWebsite Push IDyou used when generating your Safari Push Certificate (beginning withweb) and clickSave.\nConfigure Safari Push\n- Generate a Safari Push Certificate following these \u00e2\u0080\u009cRegistering with Apple\u00e2\u0080\u009d Instructions\n- In the Braze dashboard, on theapp settings page(where your API keys are located), select your Web app. Click \u00e2\u0080\u009cConfigure Safari Push\u00e2\u0080\u009d and follow the instructions, uploading the push certificate you just generated.\n- In your mParticle dashboard, open your Braze connection settings. UnderSafari Website Push ID, type in yourWebsite Push IDyou used when generating your Safari Push Certificate (beginning withweb) and clickSave.\n\n```\nSafari Website Push ID\n```\n\n```\nWebsite Push ID\n```\n\n```\nweb\n```\n\n```\nSave\n```\n- Create a \u00e2\u0080\u009cPrime for Push\u00e2\u0080\u009d in-app messaging Campaign on the Braze dashboard. Note that this is anIn-App MessagingCampaign, and not aPush Notificationmessaging campaign.Make it a \u00e2\u0080\u009cModal\u00e2\u0080\u009d In-App Message. Give it whatever text and styling you wish to present to the user (\u00e2\u0080\u009cCan we stay in touch?\u00e2\u0080\u009d).Give the in-app message a Button 1 Text value of \u00e2\u0080\u009cOK\u00e2\u0080\u009d (or whatever affirmative text you wish), and set the On-Click Behavior to \u00e2\u0080\u009cClose Message.\u00e2\u0080\u009dUnder the gear composer section, add a key-value pair. Give it a key ofmsg-idand a value ofpush-primer.You can create aprime-for-pushcustom event (or name it whatever you\u00e2\u0080\u0099d like) from the Braze dashboard. While still in the Braze dashboard, create a trigger action of whatever your custom event is (ie,prime-for-push). In the mParticle Braze connection settings, fill in the\"Soft Push\" Custom Event Namewith your custom event name (ie.prime-for-push). When this field is filled, users will be sent the Soft Push Prompt on session load.Optionally, you can change the name and location ofservice-worker.js. The following example will clarify the steps:Let\u00e2\u0080\u0099s say that you want to rename yourservice-worker.jsfile tobraze-push-worker.jsand store it in inside a directory in your root folder calledthirdParty/.In your mParticle dashboard, open your Braze connection settings. UnderPush Notification Service Worker File Location, type in/thirdParty/braze-push-worker.jsand clickSave.Warning- Setting a value here limits the scope of push notifications on your site. For instance, in the above example, because the service worker file is located within the/thirdParty/directory, asking for push notifications MAY ONLY BE CALLED from web pages that start withhttp://your-site-name.com/thirdParty/.\nCreate a \u00e2\u0080\u009cPrime for Push\u00e2\u0080\u009d in-app messaging Campaign on the Braze dashboard. Note that this is anIn-App MessagingCampaign, and not aPush Notificationmessaging campaign.\n\n```\nIn-App Messaging\n```\n\n```\nPush Notification\n```\n- Make it a \u00e2\u0080\u009cModal\u00e2\u0080\u009d In-App Message. Give it whatever text and styling you wish to present to the user (\u00e2\u0080\u009cCan we stay in touch?\u00e2\u0080\u009d).\n- Give the in-app message a Button 1 Text value of \u00e2\u0080\u009cOK\u00e2\u0080\u009d (or whatever affirmative text you wish), and set the On-Click Behavior to \u00e2\u0080\u009cClose Message.\u00e2\u0080\u009d\n- Under the gear composer section, add a key-value pair. Give it a key ofmsg-idand a value ofpush-primer.\n\n```\nmsg-id\n```\n\n```\npush-primer\n```\n- You can create aprime-for-pushcustom event (or name it whatever you\u00e2\u0080\u0099d like) from the Braze dashboard. While still in the Braze dashboard, create a trigger action of whatever your custom event is (ie,prime-for-push). In the mParticle Braze connection settings, fill in the\"Soft Push\" Custom Event Namewith your custom event name (ie.prime-for-push). When this field is filled, users will be sent the Soft Push Prompt on session load.\n\n```\nprime-for-push\n```\n\n```\nprime-for-push\n```\n\n```\n\"Soft Push\" Custom Event Name\n```\n\n```\nprime-for-push\n```\n- Optionally, you can change the name and location ofservice-worker.js. The following example will clarify the steps:Let\u00e2\u0080\u0099s say that you want to rename yourservice-worker.jsfile tobraze-push-worker.jsand store it in inside a directory in your root folder calledthirdParty/.In your mParticle dashboard, open your Braze connection settings. UnderPush Notification Service Worker File Location, type in/thirdParty/braze-push-worker.jsand clickSave.Warning- Setting a value here limits the scope of push notifications on your site. For instance, in the above example, because the service worker file is located within the/thirdParty/directory, asking for push notifications MAY ONLY BE CALLED from web pages that start withhttp://your-site-name.com/thirdParty/.\nOptionally, you can change the name and location ofservice-worker.js. The following example will clarify the steps:\n\n```\nservice-worker.js\n```\n- Let\u00e2\u0080\u0099s say that you want to rename yourservice-worker.jsfile tobraze-push-worker.jsand store it in inside a directory in your root folder calledthirdParty/.\n\n```\nservice-worker.js\n```\n\n```\nbraze-push-worker.js\n```\n\n```\nthirdParty/\n```\n- In your mParticle dashboard, open your Braze connection settings. UnderPush Notification Service Worker File Location, type in/thirdParty/braze-push-worker.jsand clickSave.\n\n```\nPush Notification Service Worker File Location\n```\n\n```\n/thirdParty/braze-push-worker.js\n```\n\n```\nSave\n```\n- Warning- Setting a value here limits the scope of push notifications on your site. For instance, in the above example, because the service worker file is located within the/thirdParty/directory, asking for push notifications MAY ONLY BE CALLED from web pages that start withhttp://your-site-name.com/thirdParty/.\n\n```\n/thirdParty/\n```\n\n```\nhttp://your-site-name.com/thirdParty/\n```\n\n## Web Troubleshooting Tips\n- Firefox - starting with version 72, Firefox requires user interaction before showing a full push permission dialogue box. Seeherefor more details.\n- Ensure that your OS-wide notifications for the browser you are testing are not disabled.\n- If you have previously allowed or rejected push requests while testing, you will need to clear local storage/cookies as well as the browser\u00e2\u0080\u0099s notification preference for your development URL for optimal testing.\n\n## Mobile\nAs long as the Braze Kit is included in your app, mParticle will pass any Push Notifications from Braze to the kit for display. However, you will need to provide credentials in the Braze dashboard.\nSee the mainiOSandAndroidPush Notification documentation for more detail.\n\n## iOS App Launch Tracking\nOn iOS, when a user launches your app by tapping on a push notification, you may see these launches recorded in the mParticle dashboard but not in Braze. This happens due to a race condition between the Braze SDK initializing and the app handling the push notification.\nTo work around this, you\u00e2\u0080\u0099ll need to create your own instance of Braze in yourapplicationDidFinishLaunchingmethod of your app delegate and pass it to the Braze kit before initializing the mParticle SDK. You\u00e2\u0080\u0099ll also need to tell the kit not to process push notifications and instead handle them yourself. This ensures that Braze is initialized and ready to receive the push notifications immediately upon app launch.\n\n```\napplicationDidFinishLaunching\n```\nNote that by implementing your own instance of Braze, you will lose the ability to use the following Braze configuration options in the mParticle dashboard, as you\u00e2\u0080\u0099ll be passing those options to Braze yourself on app launch. Only implement this if you need push notification app launches reported to Braze:\n- Braze API Key\n- Braze Endpoint\n- Braze SDK Request Policy\n- Braze SDK Flush Interval\n- Braze SDK Session Timeout\n- Braze SDK Minimum Time Interval Between Triggers\n- Braze SDK Disable Automatic Location Tracking\nAll other Braze configuration options in the mParticle dashboard will continue to work as usual, and any of the above can be set in your app when you create the Braze instance by setting the relevant options on the Braze configuration object. See the example code for thedidFinishLaunchingWithOptionsmethod below.\n\n```\ndidFinishLaunchingWithOptions\n```\nThe following is mostly following the instructions fromBraze\u00e2\u0080\u0099s \u00e2\u0080\u009cManual push integration\u00e2\u0080\u009ddocumentation, with the addition of some mParticle specific code in thedidFinishLaunchingWithOptionsmethod.\n\n```\ndidFinishLaunchingWithOptions\n```\nPlease note that because we are following Braze\u00e2\u0080\u0099s\u00e2\u0080\u009cManual push integration\u00e2\u0080\u009dinstructions, you should not set the configuration option,configuration.push.automation = true, as described in Braze\u00e2\u0080\u0099sAutomatic push integrationdocumentation as it will cause conflicts.\n\n```\nconfiguration.push.automation = true\n```\n- Make sure to import the Braze SDK and mParticle Braze kit in your app delegate file.\n\n```\nimportBrazeKitimportmParticle_Appboy\n```\n\n```\nimportBrazeKitimportmParticle_Appboy\n```\n\n```\n@import BrazeKit;@import mParticle_Appboy;\n```\n\n```\n@import BrazeKit;@import mParticle_Appboy;\n```\n- Create and configure a Braze instance immediately upon app launch and pass it to the Braze kit.\n\n```\nvarbraze:Braze?=nilfuncapplication(_application:UIApplication,didFinishLaunchingWithOptions launchOptions:[UIApplication.LaunchOptionsKey:Any]?)->Bool{// Register for remote notificationsapplication.registerForRemoteNotifications()letcenter=UNUserNotificationCenter.current()center.setNotificationCategories(Braze.Notifications.categories)center.delegate=self// Request user authorization to send push notificationsvaroptions:UNAuthorizationOptions=[.alert,.sound,.badge]if#available(iOS12.0,*){options=UNAuthorizationOptions(rawValue:options.rawValue|UNAuthorizationOptions.provisional.rawValue)}center.requestAuthorization(options:options){granted,errorinprint(\"Notification authorization, granted:\\(granted), error:\\(String(describing:error))\")}// Create the Braze configuration object// API key and endpoint were previously configured in the mParticle dashboardletconfiguration=Braze.Configuration(apiKey:\"[YOUR_BRAZE_API_KEY]\",endpoint:\"[YOUR_BRAZE_ENDPOINT]\")configuration.api.addSDKMetadata([.mparticle])configuration.api.sdkFlavor=.mparticle// Default mParticle dashboard optionsconfiguration.location.automaticLocationCollection=true// Optionally set any additional configuration options you would like here// Create a Braze instance with your chosen configuration and store the referenceletbraze=Braze(configuration:configuration)self.braze=braze// Pass the instance to the mParticle Braze kit so it can be used for other Braze functionalityMPKitAppboy.setBrazeInstance(braze)// Instruct the mParticle Braze kit to not handle push notifications, as they'll be handled in the app delegateMPKitAppboy.setShouldDisableNotificationHandling(true)// Place your existing application initialization code here}\n```\n\n```\nvarbraze:Braze?=nilfuncapplication(_application:UIApplication,didFinishLaunchingWithOptions launchOptions:[UIApplication.LaunchOptionsKey:Any]?)->Bool{// Register for remote notificationsapplication.registerForRemoteNotifications()letcenter=UNUserNotificationCenter.current()center.setNotificationCategories(Braze.Notifications.categories)center.delegate=self// Request user authorization to send push notificationsvaroptions:UNAuthorizationOptions=[.alert,.sound,.badge]if#available(iOS12.0,*){options=UNAuthorizationOptions(rawValue:options.rawValue|UNAuthorizationOptions.provisional.rawValue)}center.requestAuthorization(options:options){granted,errorinprint(\"Notification authorization, granted:\\(granted), error:\\(String(describing:error))\")}// Create the Braze configuration object// API key and endpoint were previously configured in the mParticle dashboardletconfiguration=Braze.Configuration(apiKey:\"[YOUR_BRAZE_API_KEY]\",endpoint:\"[YOUR_BRAZE_ENDPOINT]\")configuration.api.addSDKMetadata([.mparticle])configuration.api.sdkFlavor=.mparticle// Default mParticle dashboard optionsconfiguration.location.automaticLocationCollection=true// Optionally set any additional configuration options you would like here// Create a Braze instance with your chosen configuration and store the referenceletbraze=Braze(configuration:configuration)self.braze=braze// Pass the instance to the mParticle Braze kit so it can be used for other Braze functionalityMPKitAppboy.setBrazeInstance(braze)// Instruct the mParticle Braze kit to not handle push notifications, as they'll be handled in the app delegateMPKitAppboy.setShouldDisableNotificationHandling(true)// Place your existing application initialization code here}\n```\n\n```\n// In the app delegate class header//@interfaceAppDelegate()<UNUserNotificationCenterDelegate>@property(nonatomic,strong)Braze*braze;@end// In the app delegate class implementation//-(BOOL)application:(UIApplication*)application didFinishLaunchingWithOptions:(NSDictionary*)launchOptions{// Register for remote notifications[application registerForRemoteNotifications];UNUserNotificationCenter*center=UNUserNotificationCenter.currentNotificationCenter;[center setNotificationCategories:BRZNotifications.categories];center.delegate=self;// Request user authorization to send push notificationsUNAuthorizationOptions options=UNAuthorizationOptionAlert|UNAuthorizationOptionSound|UNAuthorizationOptionBadge;if(@available(iOS12.0,*)){options=options|UNAuthorizationOptionProvisional;}[center requestAuthorizationWithOptions:options completionHandler:^(BOOL granted,NSError*_Nullable error){NSLog(@\"Notification authorization, granted: %d, error: %@)\",granted,error);}];// Create the Braze configuration object// API key and endpoint were previously configured in the mParticle dashboardBRZConfiguration*configuration=[[BRZConfiguration alloc]initWithApiKey:@\"[YOUR_BRAZE_API_KEY]\"endpoint:@\"[YOUR_BRAZE_ENDPOINT]\"];[configuration.api addSDKMetadata:@[BRZSDKMetadata.mparticle]];configuration.api.sdkFlavor=BRZSDKFlavorMparticle;// Default mParticle dashboard optionsconfiguration.location.automaticLocationCollection=YES;// Optionally set any additional configuration options you would like here// Create a Braze instance with your chosen configuration and store the referenceself.braze=[[Braze alloc]initWithConfiguration:configuration];// Pass the instance to the mParticle Braze kit so it can be used for other Braze functionality[MPKitAppboy setBrazeInstance:self.braze];// Instruct the mParticle Braze kit to not handle push notifications, as they'll be handled in the app delegate[MPKitAppboy setShouldDisableNotificationHandling:YES];// Place your existing application initialization code here}\n```\n\n```\n// In the app delegate class header//@interfaceAppDelegate()<UNUserNotificationCenterDelegate>@property(nonatomic,strong)Braze*braze;@end// In the app delegate class implementation//-(BOOL)application:(UIApplication*)application didFinishLaunchingWithOptions:(NSDictionary*)launchOptions{// Register for remote notifications[application registerForRemoteNotifications];UNUserNotificationCenter*center=UNUserNotificationCenter.currentNotificationCenter;[center setNotificationCategories:BRZNotifications.categories];center.delegate=self;// Request user authorization to send push notificationsUNAuthorizationOptions options=UNAuthorizationOptionAlert|UNAuthorizationOptionSound|UNAuthorizationOptionBadge;if(@available(iOS12.0,*)){options=options|UNAuthorizationOptionProvisional;}[center requestAuthorizationWithOptions:options completionHandler:^(BOOL granted,NSError*_Nullable error){NSLog(@\"Notification authorization, granted: %d, error: %@)\",granted,error);}];// Create the Braze configuration object// API key and endpoint were previously configured in the mParticle dashboardBRZConfiguration*configuration=[[BRZConfiguration alloc]initWithApiKey:@\"[YOUR_BRAZE_API_KEY]\"endpoint:@\"[YOUR_BRAZE_ENDPOINT]\"];[configuration.api addSDKMetadata:@[BRZSDKMetadata.mparticle]];configuration.api.sdkFlavor=BRZSDKFlavorMparticle;// Default mParticle dashboard optionsconfiguration.location.automaticLocationCollection=YES;// Optionally set any additional configuration options you would like here// Create a Braze instance with your chosen configuration and store the referenceself.braze=[[Braze alloc]initWithConfiguration:configuration];// Pass the instance to the mParticle Braze kit so it can be used for other Braze functionality[MPKitAppboy setBrazeInstance:self.braze];// Instruct the mParticle Braze kit to not handle push notifications, as they'll be handled in the app delegate[MPKitAppboy setShouldDisableNotificationHandling:YES];// Place your existing application initialization code here}\n```\n- Add the required push notification delegate methods\n\n```\nfuncapplication(_application:UIApplication,didRegisterForRemoteNotificationsWithDeviceToken deviceToken:Data){self.braze?.notifications.register(deviceToken:deviceToken)}funcapplication(_application:UIApplication,didReceiveRemoteNotification userInfo:[AnyHashable:Any],fetchCompletionHandler completionHandler:@escaping(UIBackgroundFetchResult)->Void){ifletbraze=self.braze,braze.notifications.handleBackgroundNotification(userInfo:userInfo,fetchCompletionHandler:completionHandler){return}completionHandler(.noData)}//...//extensionAppDelegate:UNUserNotificationCenterDelegate{funcuserNotificationCenter(_center:UNUserNotificationCenter,didReceive response:UNNotificationResponse,withCompletionHandler completionHandler:@escaping()->Void){ifletbraze=self.braze,braze.notifications.handleUserNotification(response:response,withCompletionHandler:completionHandler){return}completionHandler()}funcuserNotificationCenter(_center:UNUserNotificationCenter,willPresent notification:UNNotification,withCompletionHandler completionHandler:@escaping(UNNotificationPresentationOptions)->Void){if#available(iOS14,*){completionHandler([.list,.banner])}else{completionHandler(.alert)}}}\n```\n\n```\nfuncapplication(_application:UIApplication,didRegisterForRemoteNotificationsWithDeviceToken deviceToken:Data){self.braze?.notifications.register(deviceToken:deviceToken)}funcapplication(_application:UIApplication,didReceiveRemoteNotification userInfo:[AnyHashable:Any],fetchCompletionHandler completionHandler:@escaping(UIBackgroundFetchResult)->Void){ifletbraze=self.braze,braze.notifications.handleBackgroundNotification(userInfo:userInfo,fetchCompletionHandler:completionHandler){return}completionHandler(.noData)}//...//extensionAppDelegate:UNUserNotificationCenterDelegate{funcuserNotificationCenter(_center:UNUserNotificationCenter,didReceive response:UNNotificationResponse,withCompletionHandler completionHandler:@escaping()->Void){ifletbraze=self.braze,braze.notifications.handleUserNotification(response:response,withCompletionHandler:completionHandler){return}completionHandler()}funcuserNotificationCenter(_center:UNUserNotificationCenter,willPresent notification:UNNotification,withCompletionHandler completionHandler:@escaping(UNNotificationPresentationOptions)->Void){if#available(iOS14,*){completionHandler([.list,.banner])}else{completionHandler(.alert)}}}\n```\n\n```\n-(void)application:(UIApplication*)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData*)deviceToken{[self.braze.notifications registerDeviceToken:deviceToken];}-(void)application:(UIApplication*)application didReceiveRemoteNotification:(NSDictionary*)userInfo fetchCompletionHandler:(void(^)(UIBackgroundFetchResult))completionHandler{BOOL processedByBraze=self.braze!=nil&&[self.braze.notifications handleBackgroundNotificationWithUserInfo:userInfo fetchCompletionHandler:completionHandler];if(processedByBraze){return;}completionHandler(UIBackgroundFetchResultNoData);}//...//-(void)userNotificationCenter:(UNUserNotificationCenter*)center didReceiveNotificationResponse:(UNNotificationResponse*)response withCompletionHandler:(void(^)(void))completionHandler{BOOL processedByBraze=self.braze!=nil&&[self.braze.notifications handleUserNotificationWithResponse:response withCompletionHandler:completionHandler];if(processedByBraze){return;}completionHandler();}-(void)userNotificationCenter:(UNUserNotificationCenter*)center willPresentNotification:(UNNotification*)notification withCompletionHandler:(void(^)(UNNotificationPresentationOptions))completionHandler{if(@available(iOS14.0,*)){completionHandler(UNNotificationPresentationOptionList|UNNotificationPresentationOptionBanner);}else{completionHandler(UNNotificationPresentationOptionAlert);}}\n```\n\n```\n-(void)application:(UIApplication*)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData*)deviceToken{[self.braze.notifications registerDeviceToken:deviceToken];}-(void)application:(UIApplication*)application didReceiveRemoteNotification:(NSDictionary*)userInfo fetchCompletionHandler:(void(^)(UIBackgroundFetchResult))completionHandler{BOOL processedByBraze=self.braze!=nil&&[self.braze.notifications handleBackgroundNotificationWithUserInfo:userInfo fetchCompletionHandler:completionHandler];if(processedByBraze){return;}completionHandler(UIBackgroundFetchResultNoData);}//...//-(void)userNotificationCenter:(UNUserNotificationCenter*)center didReceiveNotificationResponse:(UNNotificationResponse*)response withCompletionHandler:(void(^)(void))completionHandler{BOOL processedByBraze=self.braze!=nil&&[self.braze.notifications handleUserNotificationWithResponse:response withCompletionHandler:completionHandler];if(processedByBraze){return;}completionHandler();}-(void)userNotificationCenter:(UNUserNotificationCenter*)center willPresentNotification:(UNNotification*)notification withCompletionHandler:(void(^)(UNNotificationPresentationOptions))completionHandler{if(@available(iOS14.0,*)){completionHandler(UNNotificationPresentationOptionList|UNNotificationPresentationOptionBanner);}else{completionHandler(UNNotificationPresentationOptionAlert);}}\n```\n\n## Location Tracking\nThe Braze kits foriOSandAndroidsupport Braze\u00e2\u0080\u0099s automatic location tracking features, provided that the appropriate app-level permissions are granted by the user.\n\n## Android\nFor Android push notifications you will need to provide your Server Key in your app settings page underPush Notification Settings.\n\n## iOS\nFor iOS push notifications you will need to upload your APNs Push SSL certificate to Braze. See theBraze documentationfor more.\n\n## Special Considerations for mParticle A/B Testing With Braze and the mParticle SDK\nmParticle supports the ability to conduct A/B testing with different integrations by sending a sample of users and their data to one integration and a different sample of users and their data to a different integration.  If you are using the mParticle SDK for Braze deploymentandcalling Braze methods directly, when instrumenting with the mParticle SDKyou must ensure that the Braze kit is active in the App before calling a Braze method.  This is very important and ensures that you are not inadvertently calling Braze methods for apps/users that are not part of an Braze A/B sample.\n\n## Roku\nmParticle supports the ability to forward server-side events for the Roku platform. Note that only data that includes your selected External Identity Type can be forwarded to Braze.\n\n## Data Processing Notes\nmParticle will always forward events if sent via the mParticle SDK, provided you have included the Braze kit, but will only forward events sent via the mParticle S2S API if the following conditions apply:\n- The App Group REST API Key setting is specified.\n- Either your set External Identity Type, or a push token is specified.\n- Braze haslimits on the number of characters in a property key- they must be less than or equal to 255 characters, with no leading dollar signs. When forwarding via a client-side kit, mParticle will remove the dollar sign ($) when forwarding property keys for user attributes, custom, and e-commerce events. When forwarding server-to-server, mParticle will remove the dollar sign ($) from mParticle reserved attributes.\n\n## Braze Instance\nBraze maintains several instances.   As part of theConfiguration Settings, you need to specify which one your data should be forwarded to.  You can tell yourBraze Instancefrom the URL of your Braze Dashboard.\nCheck with your Braze account manager if you are unsure which Braze instance you are using.\nThere is also the ability to specify a Custom instance, which allows you to specify separate endpoints for REST, SDK and Javascript.\n\n```\nsdk.iad-01.braze.com\n```\n\n```\nhttps://sdk.iad-01.braze.com\n```\nUsinghttps://or a trailing/in your endpoint address will cause errors.\n\n```\nhttps://\n```\n\n```\n/\n```\n\n## Prerequisites\nIn order to activate the Braze integration, you will need your Braze App Identifier API key and your \u00e2\u0080\u009cApp Group REST API Key\u00e2\u0080\u009d if using the S2S API.\n- Sign into your Braze Account.\n- Click on Developer Console in the left navigation, then API Settings, Identification, and choose the Identifier for the platform you\u00e2\u0080\u0099re building to.\n- If you are sending data to mParticle via the S2S API, your \u00e2\u0080\u009cApp Group REST API Key\u00e2\u0080\u009d value is required.  Click on the Developer Console in the left navigation to get this value.\n\n## Event Data Mapping\n\n## Commerce Events\nDepending on the setting value forBundle Commerce Event Data(seeConnection Settingsfor more), Commerce Events may be expanded based on the number of products, promotions, or impressions, respectively. Ex:\n\n```\nBundle Commerce Event Data\n```\n- Iffalse, a single incoming event with 2 unique products/promotions/impressions would result in at least 2 outgoing Braze events.\n\n```\nfalse\n```\n- Intrue, a single incoming event with 2 unique products/promotions/impressions would result in 1 outgoing event with a nestedproducts[],promotions[]orimpressions[]array, respectively.\n\n```\ntrue\n```\n\n```\nproducts[]\n```\n\n```\npromotions[]\n```\n\n```\nimpressions[]\n```\n\n## Product-based Commerce Events\n\n## Purchase Events\nA purchase event is mapped and optionally-expanded to Braze purchase event(s) as described above.\nIn addition to theCommon Commerce Fields, the following information is also captured, if defined:\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\ndouble\n```\n\n```\nint\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n## Other Product-based Commerce Events\nAll other product-based commerce event types are mapped and optionally-expanded to Braze custom event(s) as described above. Note:\n- If expansion is active and it\u00e2\u0080\u0099s a refund, an additional event representing thetotalis also generated.\nAs such, all relevant product and transaction information is conveyed via thepropertiesfield.\n\n```\nproperties\n```\nIn addition to theCommon Commerce Fields, the following information is also captured, if defined:\n\n```\nstring\n```\n\n```\ndouble\n```\n\n```\nint\n```\n\n## Common Product-based Commerce Fields\nAll product-based commerce events, regardless of type, capture these common fields in thepropertiesdictionary in the following way:\n\n```\nproperties\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nstring\n```\nNote: For web kit data, in order to forward theTransactionId, you must include thetransactionAttributesas the fifth argument below. See ourAPI docsfor how to build transaction attributes.\n\n```\nTransactionId\n```\n\n```\ntransactionAttributes\n```\n\n```\nmParticle.eCommerce.logProductAction(mParticle.ProductActionType.AddToCart,[product1,product2],customAttributes,customFlags,//can also be `null`, but can't be blanktransactionAttributes);\n```\n\n```\nmParticle.eCommerce.logProductAction(mParticle.ProductActionType.AddToCart,[product1,product2],customAttributes,customFlags,//can also be `null`, but can't be blanktransactionAttributes);\n```\n\n## Promotion-based Commerce Events\nWhenpromotionsare expanded, eachpromotionis converted to its own outgoing Braze event.\nAlternatively, if expansion isn\u00e2\u0080\u0099t toggled,promotionsare included in a nested collection in a single outgoing Braze event.\n\n```\npromotions\n```\n\n```\npromotion\n```\n\n```\npromotions\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n## Impression-based Commerce Events\nWhenimpressionsare expanded, eachproductfrom eachimpressionis converted to its own outgoing Braze event.\nAlternatively, if expansion isn\u00e2\u0080\u0099t toggled,impressionsand their associatedproductsare included in a nested collection in a single outgoing Braze event.\n\n```\nimpressions\n```\n\n```\nproduct\n```\n\n```\nimpression\n```\n\n```\nimpressions\n```\n\n```\nproducts\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n## Screen Views\nYour screen view events will be passed to Braze using the screen name that you passed to ourlogScreenSDK method, as the event name.\n\n```\nlogScreen\n```\nIf you are using automatic screen tracking in our Android SDK, the automatically-generated screen view events will be forwarded to Braze using the name of the associated Activity class.\n\n## Session Start / End\nTo send session start and end events for S2S to Braze, enable theForward Session Eventsconnection setting. After enabling this setting, session start and end events are forwarded to Braze as custom events with the namesSession StartandSession End. When available, session IDs are also sent in thesession_idproperty on all session starts and ends, screen view, and custom events.\n\n```\nForward Session Events\n```\n\n```\nSession Start\n```\n\n```\nSession End\n```\n\n```\nsession_id\n```\nHowever, note that mParticle SDK kits do not support session events, which are never forwarded with a kit, whether or notForward Session Eventsis enabled.\n\n```\nForward Session Events\n```\n\n## Custom Events\nAll custom events will be forwarded to Braze using the event name that you passed to yourlogEventSDK method.  All event attributes will be forwarded to Braze as Braze custom event properties using the attribute names you passed to yourlogEventSDK method as well.\n\n```\nlogEvent\n```\n\n```\nlogEvent\n```\nNote: Braze documentation indicates that the following reserved keywords can\u00e2\u0080\u0099t be used as custom event properties:\n- time\n\n```\ntime\n```\n- event_name\n\n```\nevent_name\n```\nTo learn more, visit the Braze documentation:\n- Android and FireOS\n- iOS (legacy)\n- Swift\n\n## User Attributes\nThe table below describes how the mParticle integration maps user attributes to Braze\u00e2\u0080\u0099s profile attributes.\n\n```\nCustomerId\n```\n\n```\nexternal_id\n```\n\n```\n$FirstName\n```\n\n```\nfirst_name\n```\n\n```\n$LastName\n```\n\n```\nlast_name\n```\n\n```\nEmail\n```\n\n```\nemail\n```\n\n```\n$Age\n```\n\n```\ndob\n```\n\n```\n$Age\n```\n\n```\n$Age\n```\n\n```\ndob\n```\n\n```\n$Age\n```\n\n```\ndob\n```\n\n```\n$Country\n```\n\n```\ncountry\n```\n\n```\n$City\n```\n\n```\nhome_city\n```\n\n```\n$Gender\n```\n\n```\ngender\n```\n\n```\n$Mobile\n```\n\n```\nphone\n```\n\n```\nemail_subscribe\n```\n\n```\nOptOut\n```\n\n```\nsetOptOut\n```\n\n```\nemail_subscribe\n```\n\n```\npush_subscribe\n```\n\n```\npush_subscribe\n```\n\n```\npush_subscribe\n```\n\n```\npush_tokens\n```\n\n```\nFacebook\n```\n\n```\nfacebook\n```\n\n```\nTwitter\n```\n\n```\ntwitter\n```\nBraze advises tocoerce data typeson user attributes shared with Braze before sending Production volume data. This ensures that the custom attributes received by Braze are of the expected data type. This can impact segment building and triggering campaigns.  If incorrect data types are identified after data has been flowing, there can be extra work to true up the users with the legacy data type on those attributes.  To give Braze\u00e2\u0080\u0099s type detection a better opportunity to evaluate data types properly, you can enable the following 2 Connection Settings:Enable API Custom Attribute Type DetectionandEnable Kit Custom Attribute Type Detection.\n\n```\nEnable API Custom Attribute Type Detection\n```\n\n```\nEnable Kit Custom Attribute Type Detection\n```\n\n## Enriched Attributes and Identities\nBy default, mParticle forwards all available user attributes and user identities to Braze, including attributes added during profile enrichment. You can disable this behavior in theConnection Settings.   Only data which is sent to Braze Server to Server can be enriched.\n\n## Subscription Groups\nA User Attribute can be mapped to a Braze Subscription Group ID. Requests sent to mParticle containing the mapped User Attribute, with a validtrueorfalsevalue, will determine if the user in the request should be subscribed (true) or unsubscribed (false) from the group. This allows for dynamic subscription management based on user attributes.\n\n```\ntrue\n```\n\n```\nfalse\n```\n\n```\ntrue\n```\n\n```\nfalse\n```\nTo configure Subscription Group Mapping:\n- Create the Subscription Group in Braze, if it doesn\u00e2\u0080\u0099t already exist.\n- Map the desired User Attribute to the Subscription Group ID in the mParticle dashboard.Note that the User Attribute must be sent to mParticle at least once before it is available for mapping.\nMap the desired User Attribute to the Subscription Group ID in the mParticle dashboard.\n- Note that the User Attribute must be sent to mParticle at least once before it is available for mapping.\n- Send the mapped User Attribute on your event batch to mParticle with a boolean value.true: User will be subscribed to the Braze Subscription Group.false: User will be unsubscribed from the Braze Subscription Group.Other non-boolean values will be ignored.\nSend the mapped User Attribute on your event batch to mParticle with a boolean value.\n- true: User will be subscribed to the Braze Subscription Group.\n\n```\ntrue\n```\n- false: User will be unsubscribed from the Braze Subscription Group.\n\n```\nfalse\n```\n- Other non-boolean values will be ignored.\n\n## Subscription Group Errors\nA misconfigured Subscription Group mapping can affect how your data is forwarded to Braze. If you notice your Subscription Groups are not being updated, check the following:\n- Invalid Subscription Group ID: Ensure the mapped Subscription Group IDs are correct in your Connection Settings.\n- Deleted Subscription Group: If a Subscription Group is deleted in Braze, you must update or remove the mapping in the mParticle dashboard.\n- Invalid User Attribute: Ensure the mapped User Attribute is being sent to mParticle with a boolean value.\nPlease note that Braze will only return an error in these cases when the Subscription Group attribute update is theonlyitem in the request sent to Braze. If the request contains valid events and/or purchases, Braze will process these and skip the Subscription Group update. This also means that you will only see Subscription Group errors in theSystem Alertspage when the invalid Subscription Group update is theonlyitem in the request.\n\n## Consent\nBraze uses the$google_ad_user_dataand$google_ad_personalizationcustom attribute keys to receive consent status for Google\u00e2\u0080\u0099s EU User Consent Policy. The Boolean sent to these keys signify that a user has granted or denied consent to a marketer. As per theirCollecting consent for EEA, UK, and Switzerland end usersdocumentation, this value must be sent to Google as a Custom Attribute.\n\n```\n$google_ad_user_data\n```\n\n```\n$google_ad_personalization\n```\n\n## User-specified Consent\nTo configure user consent forwarding under this value, a mapping should be set-up leveraging mParticle\u00e2\u0080\u0099s notion of Consent Purposes. To learn more about handling user consent within mParticle\u00e2\u0080\u0099s platform, see the following docs:Data Privacy Controls.\nOnce a Consent Purpose is set up, user consent information can be associated with it in subsequent Event Batches. The Consent Purpose data mapping can then be configured for downstream forwarding via the Consent Mapping connection setting.\n\n## Configuration Settings\n\n```\nstring\n```\n\n```\nenum\n```\n\n```\nenum\n```\n\n```\nenum\n```\n\n```\nbool\n```\n\n```\nbool\n```\n\n## Connection Settings\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nbool\n```\n\n```\nbool\n```\n\n```\nbool\n```\n\n```\nCustom Field\n```\n\n```\nCustom Field\n```\n\n```\nCustom Field\n```\n\n```\nCustom Field\n```\n\n```\nstring\n```\n\n```\nCustom Field\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nenum\n```\n\n```\nnull\n```\n\n```\nbool\n```\n\n```\nbool\n```\n\n```\nbool\n```\n\n```\nbool\n```\n\n```\nbool\n```\n\n```\nbool\n```\n\n```\nbool\n```\n\n```\nbool\n```\n\n```\nbool\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nstring\n```\n\n```\nbool\n```\n\n```\nbool\n```\n\n```\nViewed\n```\n\n```\nbool\n```\n\n```\nbool\n```\n\n```\nbool\n```\n\n```\nenum\n```\n\n```\n$Zip\n```\n\n```\nbool\n```\n\n```\n$Zip\n```\n\n```\nstring\n```\n\n```\nVersion 3\n```\n\n```\nbool\n```\n\n```\nbool\n```\n\n```\nBundle Commerce Event Data\n```\n\n## Braze Web Kit Critical Updates and Timelines\nBraze occasionally makes breaking changes to their SDK, so if you call Braze directly in your code, you will have to update your code to ensure your website performs as expected when updating versions of Braze.\n\n## Opt In to Braze SDK Version 5\nWe recommend you use version 5 of the Braze SDK.  You only need to make code changes if you directly call the Braze SDK from your code. Otherwise, you can simply selectVersion 5from the mParticle connection settings.\n\n```\nVersion 5\n```\nIf you are upgrading from V3, you should check the breaking changes from theBraze V4 Changelogas well asBraze V5 Changelog, in addition to theV4/5 migration guideto learn about the breaking changes.  The most significant breaking changes are the replacement of theappboyclass name withbrazefrom V3 to V4, in addition to the removal and renaming of several APIs.  If you are updating from V4 to V5, there are fewer changes, but you\u00e2\u0080\u0099d follow the same defensive code recommendations below.\n\n```\nappboy\n```\n\n```\nbraze\n```\nYou can opt into the latest major version of the Braze Web SDK whether you implement mParticle\u00e2\u0080\u0099s Web SDK using npm or our snippet/CDN.\n- Customers who self-host mParticle via npm - You should add @mparticle/web-braze-kit version 5.0.0 or greater in your package.json.  You must also selectVersion 5underBraze Web SDK Versionin the Braze connection settings.\n\n```\nVersion 5\n```\n\n```\nBraze Web SDK Version\n```\n- Customers who load mParticle via snippet/CDN - You must  selectVersion 5underBraze Web SDK Versionin the Braze connection settings.\n\n```\nVersion 5\n```\n\n```\nBraze Web SDK Version\n```\nNote that the following is only one example, and demonstrates an upgrade from V3 to V5.  Everywhere you manually callappboy(or other deprecated API) needs to be updated similar to the below. If you are using NPM, you can skip to step 4.  Please be sure to test your site fully in development prior to releasing.\n\n```\nappboy\n```\n- Step 1: Legacy code sample. Find all the places where your code references theappboy.displaynamespace.  Braze has removed all instances of thedisplaynamespace:\n\n```\nappboy.display\n```\n\n```\ndisplay\n```\n\n```\nwindow.appboy.display.destroyFeed();\n```\n\n```\nwindow.appboy.display.destroyFeed();\n```\nStep 2: Roll out code changes to be used before you opt in to using Version 4 of the Braze Web SDK so that it works under both versions:\n\n```\nif(window.appboy){window.appboy.display.destroyFeed();}elseif(window.braze){window.braze.destroyFeed();}\n```\n\n```\nif(window.appboy){window.appboy.display.destroyFeed();}elseif(window.braze){window.braze.destroyFeed();}\n```\nStep 3: Whether you are using the snippet or self-hosting, you need to navigate to your Braze connection settings and selectVersion 5from theBraze Web SDK Versiondrop down.\n\n```\nVersion 5\n```\n\n```\nBraze Web SDK Version\n```\nStep 4: After you opt in, you can simplify your code. We recommend testing and waiting at least 24 hours between opting in and removing previous instances ofappboyand doing thorough testing of your application in a development environment to ensure everything is working:\n\n```\nappboy\n```\n\n```\nwindow.braze.destroyFeed();\n```\n\n```\nwindow.braze.destroyFeed();\n```\nStep 4: Push Notifications via service-worker.js\nIf you use Push Notifications, we have updated theservice-worker.jsfile.  In our testing, Braze\u00e2\u0080\u0099s push notifications work as expected regardless of what version of the service-worker is used, but we recommend updating this file to ensure future compatibility.  In yourservice-worker.jsfile, update the code to referencehttps://static.mparticle.com/sdk/js/braze/service-worker-5.5.0.jsinstead ofhttps://static.mparticle.com/sdk/js/braze/service-worker-3.5.0.js.  Yourservice-worker.jsfile should now contain:\n\n```\nservice-worker.js\n```\n\n```\nservice-worker.js\n```\n\n```\nhttps://static.mparticle.com/sdk/js/braze/service-worker-5.5.0.js\n```\n\n```\nhttps://static.mparticle.com/sdk/js/braze/service-worker-3.5.0.js\n```\n\n```\nservice-worker.js\n```\n\n```\nself.imports('https://static.mparticle.com/sdk/js/braze/service-worker-5.5.0.js')\n```\n\n```\nself.imports('https://static.mparticle.com/sdk/js/braze/service-worker-5.5.0.js')\n```\n\n## Transition from @mparticle/web-appboy-kit to @mparticle/web-braze-kit\nThe legacy @mparticle/web-appboy-kit from NPM includes version 2 of the Braze Web SDK.  As part of this update, we\u00e2\u0080\u0099ve created a newBraze web kit repoto replace our deprecatedAppboy web kit repo.  If you are still using@mparticle/web-appboy-kit, you will need to consider the breaking changes Braze made between V2 and V3 of the Braze SDK (foundhere) as well as the instructions above to get from V2 to V5 of the Braze SDK.\n\n```\n@mparticle/web-appboy-kit\n```",
  "url": "https://docs.mparticle.com/integrations/braze/event"
}