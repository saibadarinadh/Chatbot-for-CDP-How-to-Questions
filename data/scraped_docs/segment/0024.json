{
  "title": " Quickstart: Analytics.js | Segment Documentation",
  "content": "- Home\n- /\n- Connections\n- /\n- Sources\n- /\n- Catalog\n- /\n- Libraries\n- /\n- Website\n- /\n- Javascript\n- /\n- Quickstart: Analytics.js\n\n## Quickstart: Analytics.js\nOn this page\n- Step 1: Create a source in the Segment app\n- Step 2: Install Segment to your site\n- Step 3: Identify users\n- Step 4: Track actions\n- What\u2019s next?\nThis tutorial gets you started sending data from your website to Segment and any of Segment\u2019s destinations, using Segment\u2019s Analytics.js library.\nWant to learn more? Check out theAnalytics.js reference.\n\n## Step 1: Create a source in the Segment app\nBefore you begin, you need a Workspace (which is a container that holds all of the Sources and Destinations that are billed together for an organization). You can sign up for a free Segment account and create a workspace.\nTo create an Analytics.js source source in the Segment app:\n- ClickAdd Source.\n- From the source catalog page, clickJavaScript.\n- ClickAdd Sourceagain from the informational panel that appears to the right.\n- Give the source a display name, and enter the URL the source will collect data from.\nWhen you create a source in the Segment web app, it tells the Segment servers that you\u2019ll be sending data from a specific source type. When you create (or change) a source in the Segment app, Segment generates a new write key for that source. You use the write key in your website code to tell Segment servers where the data is coming from, so Segment can route it to your Destinations and other tools.\n\n## Step 2: Install Segment to your site\nYou can choose to install Segment to your site in 1 of 2 ways:\na. Add the Segment snippet to your app\nb. Install Segment as a NPM package\n\n## Step 2a: Add the Segment Snippet\nYou can find the latest version of the Segment snippet in theOverviewtab of your Javascript source.\nTo add the Segment snippet to your app:\nPaste the snippet into the<head>tag of your site to install Segment.\n\n```\n<head>\n```\n\n```\n<script>!function(){vari=\"analytics\",analytics=window[i]=window[i]||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error(\"Segment snippet included twice.\");else{analytics.invoked=!0;analytics.methods=[\"trackSubmit\",\"trackClick\",\"trackLink\",\"trackForm\",\"pageview\",\"identify\",\"reset\",\"group\",\"track\",\"ready\",\"alias\",\"debug\",\"page\",\"screen\",\"once\",\"off\",\"on\",\"addSourceMiddleware\",\"addIntegrationMiddleware\",\"setAnonymousId\",\"addDestinationMiddleware\",\"register\"];analytics.factory=function(e){returnfunction(){if(window[i].initialized)returnwindow[i][e].apply(window[i],arguments);varn=Array.prototype.slice.call(arguments);if([\"track\",\"screen\",\"alias\",\"group\",\"page\",\"identify\"].indexOf(e)>-1){varc=document.querySelector(\"link[rel='canonical']\");n.push({__t:\"bpc\",c:c&&c.getAttribute(\"href\")||void0,p:location.pathname,u:location.href,s:location.search,t:document.title,r:document.referrer})}n.unshift(e);analytics.push(n);returnanalytics}};for(varn=0;n<analytics.methods.length;n++){varkey=analytics.methods[n];analytics[key]=analytics.factory(key)}analytics.load=function(key,n){vart=document.createElement(\"script\");t.type=\"text/javascript\";t.async=!0;t.setAttribute(\"data-global-segment-analytics-key\",i);t.src=\"https://cdn.segment.com/analytics.js/v1/\"+key+\"/analytics.min.js\";varr=document.getElementsByTagName(\"script\")[0];r.parentNode.insertBefore(t,r);analytics._loadOptions=n};analytics._writeKey=\"YOUR_WRITE_KEY\";;analytics.SNIPPET_VERSION=\"5.2.1\";analytics.load(\"YOUR_WRITE_KEY\");analytics.page();}}();</script>\n```\n\n```\n<script>!function(){vari=\"analytics\",analytics=window[i]=window[i]||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error(\"Segment snippet included twice.\");else{analytics.invoked=!0;analytics.methods=[\"trackSubmit\",\"trackClick\",\"trackLink\",\"trackForm\",\"pageview\",\"identify\",\"reset\",\"group\",\"track\",\"ready\",\"alias\",\"debug\",\"page\",\"screen\",\"once\",\"off\",\"on\",\"addSourceMiddleware\",\"addIntegrationMiddleware\",\"setAnonymousId\",\"addDestinationMiddleware\",\"register\"];analytics.factory=function(e){returnfunction(){if(window[i].initialized)returnwindow[i][e].apply(window[i],arguments);varn=Array.prototype.slice.call(arguments);if([\"track\",\"screen\",\"alias\",\"group\",\"page\",\"identify\"].indexOf(e)>-1){varc=document.querySelector(\"link[rel='canonical']\");n.push({__t:\"bpc\",c:c&&c.getAttribute(\"href\")||void0,p:location.pathname,u:location.href,s:location.search,t:document.title,r:document.referrer})}n.unshift(e);analytics.push(n);returnanalytics}};for(varn=0;n<analytics.methods.length;n++){varkey=analytics.methods[n];analytics[key]=analytics.factory(key)}analytics.load=function(key,n){vart=document.createElement(\"script\");t.type=\"text/javascript\";t.async=!0;t.setAttribute(\"data-global-segment-analytics-key\",i);t.src=\"https://cdn.segment.com/analytics.js/v1/\"+key+\"/analytics.min.js\";varr=document.getElementsByTagName(\"script\")[0];r.parentNode.insertBefore(t,r);analytics._loadOptions=n};analytics._writeKey=\"YOUR_WRITE_KEY\";;analytics.SNIPPET_VERSION=\"5.2.1\";analytics.load(\"YOUR_WRITE_KEY\");analytics.page();}}();</script>\n```\n\n```\n<scripttype=\"text/javascript\">(function(){// define the key where the global analytics object will be accessible// customers can safely set this to be something else if need bevarglobalAnalyticsKey=\"analytics\"// Create a queue, but don't obliterate an existing one!varanalytics=window[globalAnalyticsKey]=window[globalAnalyticsKey]||[];// If the real analytics.js is already on the page return.if(analytics.initialize)return;// If the snippet was invoked already show an error.if(analytics.invoked){if(window.console&&console.error){console.error(\"Segment snippet included twice.\");}return;}// Invoked flag, to make sure the snippet// is never invoked twice.analytics.invoked=true;// A list of the methods in Analytics.js to stub.analytics.methods=[\"trackSubmit\",\"trackClick\",\"trackLink\",\"trackForm\",\"pageview\",\"identify\",\"reset\",\"group\",\"track\",\"ready\",\"alias\",\"debug\",\"page\",\"screen\",\"once\",\"off\",\"on\",\"addSourceMiddleware\",\"addIntegrationMiddleware\",\"setAnonymousId\",\"addDestinationMiddleware\",\"register\"];// Define a factory to create stubs. These are placeholders// for methods in Analytics.js so that you never have to wait// for it to load to actually record data. The `method` is// stored as the first argument, so we can replay the data.analytics.factory=function(e){returnfunction(){if(window[globalAnalyticsKey].initialized){// Sometimes users assigned analytics to a variable before analytics is done loading, resulting in a stale reference.// If so, proxy any calls to the 'real' analytics instance.returnwindow[globalAnalyticsKey][e].apply(window[globalAnalyticsKey],arguments);}varargs=Array.prototype.slice.call(arguments);// Add buffered page context object so page information is always up-to-dateif([\"track\",\"screen\",\"alias\",\"group\",\"page\",\"identify\"].indexOf(e)>-1){varc=document.querySelector(\"link[rel='canonical']\");args.push({__t:\"bpc\",c:c&&c.getAttribute(\"href\")||undefined,p:location.pathname,u:location.href,s:location.search,t:document.title,r:document.referrer});}args.unshift(e);analytics.push(args);returnanalytics;};};// For each of our methods, generate a queueing stub.for(vari=0;i<analytics.methods.length;i++){varkey=analytics.methods[i];analytics[key]=analytics.factory(key);}// Define a method to load Analytics.js from our CDN,// and that will be sure to only ever load it once.analytics.load=function(key,options){// Create an async script element based on your key.vart=document.createElement(\"script\");t.type=\"text/javascript\";t.async=true;t.setAttribute(\"data-global-segment-analytics-key\",globalAnalyticsKey)t.src=\"https://cdn.segment.com/analytics.js/v1/\"+key+\"/analytics.min.js\";// Insert our script next to the first script element.varfirst=document.getElementsByTagName(\"script\")[0];first.parentNode.insertBefore(t,first);analytics._loadOptions=options;};analytics._writeKey=\"YOUR_WRITE_KEY\";// Add a version to keep track of what's in the wild.analytics.SNIPPET_VERSION=\"5.2.1\";// Load Analytics.js with your key, which will automatically// load the tools you've enabled for your account. Boosh!analytics.load(\"YOUR_WRITE_KEY\");// Make the first page call to load the integrations. If// you'd like to manually name or tag the page, edit or// move this call however you'd like.analytics.page();})();</script>\n```\n\n```\n<scripttype=\"text/javascript\">(function(){// define the key where the global analytics object will be accessible// customers can safely set this to be something else if need bevarglobalAnalyticsKey=\"analytics\"// Create a queue, but don't obliterate an existing one!varanalytics=window[globalAnalyticsKey]=window[globalAnalyticsKey]||[];// If the real analytics.js is already on the page return.if(analytics.initialize)return;// If the snippet was invoked already show an error.if(analytics.invoked){if(window.console&&console.error){console.error(\"Segment snippet included twice.\");}return;}// Invoked flag, to make sure the snippet// is never invoked twice.analytics.invoked=true;// A list of the methods in Analytics.js to stub.analytics.methods=[\"trackSubmit\",\"trackClick\",\"trackLink\",\"trackForm\",\"pageview\",\"identify\",\"reset\",\"group\",\"track\",\"ready\",\"alias\",\"debug\",\"page\",\"screen\",\"once\",\"off\",\"on\",\"addSourceMiddleware\",\"addIntegrationMiddleware\",\"setAnonymousId\",\"addDestinationMiddleware\",\"register\"];// Define a factory to create stubs. These are placeholders// for methods in Analytics.js so that you never have to wait// for it to load to actually record data. The `method` is// stored as the first argument, so we can replay the data.analytics.factory=function(e){returnfunction(){if(window[globalAnalyticsKey].initialized){// Sometimes users assigned analytics to a variable before analytics is done loading, resulting in a stale reference.// If so, proxy any calls to the 'real' analytics instance.returnwindow[globalAnalyticsKey][e].apply(window[globalAnalyticsKey],arguments);}varargs=Array.prototype.slice.call(arguments);// Add buffered page context object so page information is always up-to-dateif([\"track\",\"screen\",\"alias\",\"group\",\"page\",\"identify\"].indexOf(e)>-1){varc=document.querySelector(\"link[rel='canonical']\");args.push({__t:\"bpc\",c:c&&c.getAttribute(\"href\")||undefined,p:location.pathname,u:location.href,s:location.search,t:document.title,r:document.referrer});}args.unshift(e);analytics.push(args);returnanalytics;};};// For each of our methods, generate a queueing stub.for(vari=0;i<analytics.methods.length;i++){varkey=analytics.methods[i];analytics[key]=analytics.factory(key);}// Define a method to load Analytics.js from our CDN,// and that will be sure to only ever load it once.analytics.load=function(key,options){// Create an async script element based on your key.vart=document.createElement(\"script\");t.type=\"text/javascript\";t.async=true;t.setAttribute(\"data-global-segment-analytics-key\",globalAnalyticsKey)t.src=\"https://cdn.segment.com/analytics.js/v1/\"+key+\"/analytics.min.js\";// Insert our script next to the first script element.varfirst=document.getElementsByTagName(\"script\")[0];first.parentNode.insertBefore(t,first);analytics._loadOptions=options;};analytics._writeKey=\"YOUR_WRITE_KEY\";// Add a version to keep track of what's in the wild.analytics.SNIPPET_VERSION=\"5.2.1\";// Load Analytics.js with your key, which will automatically// load the tools you've enabled for your account. Boosh!analytics.load(\"YOUR_WRITE_KEY\");// Make the first page call to load the integrations. If// you'd like to manually name or tag the page, edit or// move this call however you'd like.analytics.page();})();</script>\n```\nReplaceYOUR_WRITE_KEYin the snippet you pasted with your Segment project\u2019sWrite Key.Find the write keyin your project set up guide or in the source\u2019s settings.\n\n```\nYOUR_WRITE_KEY\n```\nWhen you use Analytics.js in device-mode, the source\u2019s Write Key is public, because it runs in a user\u2019s browser and can be accessed using the browser\u2019s developer tools. If this is not acceptable to your organization, you can exploreother Segment Sourceswhich collect data from a server-based installation, and which are not accessible to the user.\nThat snippet loads Analytics.js onto the pageasynchronously, so it won\u2019t affect your page load speed. Once the snippet is running on your site, you can turn on destinations from the destinations page in your workspace and they start loading on your site automatically.\nNote that you should remove other native third-party destination code that you might have on your site. For example, if you\u2019re using Segment to send data to Google Analytics, make sure you remove the Google Analytics snippet from your site source code to prevent sending the data twice.\nIf you only want the most basic Google Analytics setup, there\u2019s no need to continue with the setup. Just toggle on Google Analytics in the Segment interface.\nA lot of analytics and marketing tools need to record who each user is on your site. If you want to use any tool that deals with the identity of your users, read on about the Identify method.\n\n## Step 2b: Install Segment as a npm package\nTo install Segment as a npm package:\n- Install the analytics package.# npmnpminstall@segment/analytics-next# yarnyarn add @segment/analytics-next# pnpmpnpm add @segment/analytics-next\nInstall the analytics package.\n\n```\n# npmnpminstall@segment/analytics-next# yarnyarn add @segment/analytics-next# pnpmpnpm add @segment/analytics-next\n```\n\n```\n# npmnpminstall@segment/analytics-next# yarnyarn add @segment/analytics-next# pnpmpnpm add @segment/analytics-next\n```\n- Import and initialize the analytics.import{AnalyticsBrowser}from'@segment/analytics-next'exportconstanalytics=AnalyticsBrowser.load({writeKey:'YOUR_WRITE_KEY'})// orexportconstanalytics=newAnalyticsBrowser()analytics.load({writeKey:'YOUR_WRITE_KEY'})\nImport and initialize the analytics.\n\n```\nimport{AnalyticsBrowser}from'@segment/analytics-next'exportconstanalytics=AnalyticsBrowser.load({writeKey:'YOUR_WRITE_KEY'})// orexportconstanalytics=newAnalyticsBrowser()analytics.load({writeKey:'YOUR_WRITE_KEY'})\n```\n\n```\nimport{AnalyticsBrowser}from'@segment/analytics-next'exportconstanalytics=AnalyticsBrowser.load({writeKey:'YOUR_WRITE_KEY'})// orexportconstanalytics=newAnalyticsBrowser()analytics.load({writeKey:'YOUR_WRITE_KEY'})\n```\nFor more initialization patterns and general information on@segment/analytics-next, see the repository\u2019sREADME.\n\n```\n@segment/analytics-next\n```\n\n## Step 3: Identify users\nFor any of the different methods described in this quickstart, you can replace the properties and traits in the code samples with variables that represent the data collected.\nThe Identify method is how you tell Segment who the current user is. It includes a unique User ID, and any optional traits you know about them. You can read more about it in theidentify method reference.\nYou don\u2019t need to call Identify for anonymous visitors to your site. Segment automatically assigns them ananonymousId, so just callingpageandtrackworks just fine without Identify.\n\n```\nanonymousId\n```\n\n```\npage\n```\n\n```\ntrack\n```\nHere\u2019s what a basic call to Identify might look like:\n\n```\nanalytics.identify('f4ca124298',{name:'Michael Brown',email:'mbrown@example.com'});\n```\n\n```\nanalytics.identify('f4ca124298',{name:'Michael Brown',email:'mbrown@example.com'});\n```\nThis identifies Michael by his unique User ID (in this case,f4ca124298, which is what you know him by in your database) and labels him withnameandemailtraits.\n\n```\nf4ca124298\n```\n\n```\nname\n```\n\n```\nemail\n```\nWhen you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user.\nTo do that, Segment recommends that you use a backend template to inject an Identify call into the footer of every page of your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don\u2019t need to call Identify if your unique identifier (userId) is not known.\n\n```\nuserId\n```\nDepending on your templating language, your actual Identify call might look something like this:\n\n```\nanalytics.identify('{{user.id}}',{name:'{{user.fullname}}',email:'{{user.email}}'});\n```\n\n```\nanalytics.identify('{{user.id}}',{name:'{{user.fullname}}',email:'{{user.email}}'});\n```\nWith that call in your page footer, you successfully identify every user that visits your site.\nIf you only want to use a basic CRM setup, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it.\nA lot of analytics tools record more than justidentitiesas they record the actions each user performs too. If you\u2019re looking for a complete event tracking analytics setup, keep reading\u2026\n\n## Step 4: Track actions\nThe Track method is how you tell Segment about the actions your users are performing on your site. Every action triggers what\u2019s called an \u201cevent\u201d, which can also have associated properties. You can read more about Track in thetrack method reference.\nHere\u2019s what a call to a Track call might look like when a user signs up:\n\n```\nanalytics.track('Signed Up',{plan:'Enterprise'});\n```\n\n```\nanalytics.track('Signed Up',{plan:'Enterprise'});\n```\nThat tells Segment that your user triggered theSigned Upevent, and chose your hypothetical'Enterprise'plan. Properties can be anything you want to record, for example:\n\n```\nSigned Up\n```\n\n```\n'Enterprise'\n```\n\n```\nanalytics.track('Article Bookmarked',{title:'Snow Fall',subtitle:'The Avalanche at Tunnel Creek',author:'John Branch'});\n```\n\n```\nanalytics.track('Article Bookmarked',{title:'Snow Fall',subtitle:'The Avalanche at Tunnel Creek',author:'John Branch'});\n```\nIf you\u2019re just getting started, some of the events you should track are events that indicate the success of your site, likeSigned Up,Item PurchasedorArticle Bookmarked.\nTo get started, Segment recommends that you track just a few important events. You can always add more later.\nAfter you add a few Track calls, you successfully installed Analytics.js tracking. Now you\u2019re ready to turn on any destination you like from the Segment interface.\n\n## What\u2019s next?\nYou might want to check out the fullAnalytics.js referenceto see what else is possible, or read about theTracking API methodsto get a sense for the bigger picture.\nIf you\u2019re running an ecommerce site or app you should also check out Segment\u2019secommerce API referenceto make sure your products and checkout experience are instrumented properly.\nThis page was last modified: 29 Feb 2024\n\n## Need support?\nQuestions? Problems? Need more info? Contact Segment Support for assistance!\n\n## Help improve these docs!\n\n## Was this page helpful?\nThanks for your feedback!\nCan we improve this doc?Send us feedback!\n\n## Get started with Segment",
  "url": "https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/quickstart/"
}