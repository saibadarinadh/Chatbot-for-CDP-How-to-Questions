{
  "title": " Data Collection Best Practices | Segment Documentation",
  "content": "- Home\n- /\n- Protocols\n- /\n- Tracking plan\n- /\n- Data Collection Best Practices\n\n## Data Collection Best Practices\nOn this page\n- Data tracking philosophy\n- Define business objectives\n- Formalize your naming and collection standards\n- Create a tracking plan\n- Identify your users\n- Define your Track events\n- Define your Track event properties\nFiguring out what events to track in Segment can feel overwhelming. Fortunately, Segment has helped thousands of customers through this process and has amassed a ton of resources to help you get started. Whether you\u2019re a small team just getting your app off the ground or a highly complex enterprise with hundreds of stakeholders, these resources can help.\nThat being said, be prepared to invest time defining how you want to track data. Any investment in improving data quality will reap massive rewards, and compound over time by allowing your analytics teams to produce better insights, your marketing teams to run better campaigns and so much more.\n\n## Data tracking philosophy\nTracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested or invalidated. Think about the unknowns. Here are some helpful questions to get started:\n- What kind of events or data will shed light on how your customers use your product?\n- How do people discover, pay for, and start using your product?\n- What are the most important steps in a customer\u2019s journey?\n\n## Define business objectives\nSegment recommends documenting your high-level business objectives. What measurable business outcomes do you want to achieve? Do you want to acquire new customers, activate new signups, drive incremental revenues among your current customer base? You can best answer this question by interviewing stakeholders who would consume the data in your organization.\nWith your business goals documented, you now need to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself what actions people take before signing up. Do specific actions predict user signups?\nAs an example, you may end up with a list like the following:\n- Ad Campaign Clicked\n- Link Clicked\n- Article Completed\n- Campaign Opened\n- Form Initiated\n- Form Submitted\n- User Signed Up\nWhile these may only represent a portion of the total user actions you will track, focusing on business objectives helps make data collection more manageable.\n\n## Formalize your naming and collection standards\nWith your business objectives documented, it\u2019s time to build a set of standards that you and your team will use when determining what to track. Segment\u2019s most successful customers limit their tracking plan to a minimal number of core events with rich properties that provide context. While some customers find success with the \u201cless is more\u201d philosophy of tracking data, others take a more liberal \u201ctrack more and analyze later\u201d approach. Both options have pros and cons you should take into account when you consider your company\u2019s needs.\nRegardless of your approach, keep the following tips in mind:\n- Pick a casing convention.Segment recommendsTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.\nPick a casing convention.Segment recommendsTitle Casefor event names andsnake_casefor property names. Make sure you pick a casing standard and enforce it across your events and properties.\n- Pick an event name structure.As you may have noticed from theSegment specs, Segment uses the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.\nPick an event name structure.As you may have noticed from theSegment specs, Segment uses the Object (Blog Post) + Action (Read) framework for event names. Pick a convention and stick to it.\n\n```\nBlog Post\n```\n\n```\nRead\n```\n- Don\u2019t create event names dynamically.Avoid creating events that pull a dynamic value into the event name (likeUser Signed Up (11-01-2019)).\nDon\u2019t create event names dynamically.Avoid creating events that pull a dynamic value into the event name (likeUser Signed Up (11-01-2019)).\n\n```\nUser Signed Up (11-01-2019)\n```\n- Don\u2019t create events to track properties.Avoid adding values to event names that could be a property. Instead, add values a property (like\"blog_post_title\":\"Best Tracking Plans Ever\").\nDon\u2019t create events to track properties.Avoid adding values to event names that could be a property. Instead, add values a property (like\"blog_post_title\":\"Best Tracking Plans Ever\").\n\n```\n\"blog_post_title\":\"Best Tracking Plans Ever\"\n```\n- Don\u2019t create property keys dynamically.Avoid creating property names like\"feature_1\":\"true\",\"feature_2\":\"false\", as these are ambiguous and difficult to analyze.\nDon\u2019t create property keys dynamically.Avoid creating property names like\"feature_1\":\"true\",\"feature_2\":\"false\", as these are ambiguous and difficult to analyze.\n\n```\n\"feature_1\":\"true\"\n```\n\n```\n\"feature_2\":\"false\"\n```\n\n## Create a tracking plan\nAtracking planclarifies what events to track, where those events live in the code base, and why those events are necessary from a business perspective. Prior to Protocols, tracking plans typically lived in a spreadsheet. The tracking plan served as a project management tool to align an entire organization around data as the basis on which to make decisions. The tracking plan helps marketers, product managers, engineers, and analysts get on the same page.\nThe tracking plan has been so instrumental in helping organizations reclaim their own data efforts that Segment invested years of product development to createProtocols. Whatever tool you choose to build your tracking plan, make sure that it represents a single source of truth for your data collection efforts.\n\n## Identify your users\nThe Identify call is important because it updates all records of the user with a set of traits. But how do you choose which traits to include?\nHere is a sample Identify call (withanalytics.js) for Segment:\n\n```\nanalytics.identify({name:'Jane Doe',email:'janedoe@iamawesome.com',login:'janedoe',type:'user',created:'2016-11-07T16:40:52.238Z',});\n```\n\n```\nanalytics.identify({name:'Jane Doe',email:'janedoe@iamawesome.com',login:'janedoe',type:'user',created:'2016-11-07T16:40:52.238Z',});\n```\nThe traits represent dimensions in your data that you can group or pivot on. For example, in the previous sample call, you can easily create cohorts of all types that areusersor accounts created within a time window of your choosing.\n\n```\nusers\n```\n\n## Define your Track events\nAfter you\u2019ve documented yourevent naming and collection standards, it\u2019s time to add events to your tracking plan. Segment recommends starting with fewer events that are directly tied to one of yourbusiness objectives. This focused effort helps avoid a situation where you become overwhelmed by endless possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer peripheral questions.\nSegment began by tracking these events:\n- User Signed Up\n- Source Data Sent\n- Subscription Started\nNext, Segment added some of the following peripheral events that helped monitor performance:\n- User Invited;\n When users invite more people to their organization, it\u2019s a good indicator that they\u2019re engaged and serious about using the product. This helps measure organizational growth.\n- Destination Enabled;\n Turning on a destination is a key value driver for Segment\u2019s customers.\n- Debugger Call Expanded;\n When Segment sees that a certain customer has used the live event stream feature a number of times, Segment can contact them to see if they need help debugging.\nFor an ecommerce company, however, the main events might be something like:\n- Account Created\n- Product Added\n- Order Completed\nNote that Segment has a set of \u201creserved\u201d event names specifically for ecommerce, called the Segmentecommerce spec. Check it out to see which events Segments covers and how they are used in our downstream destinations.\nFor a community, on the other hand, an entirely different set of actions indicate engagement, listed in the following pyramid. For example, a community likeGrowthHackersmay want to track actions like:\n- Content Viewed\n- Content Shared\n- Comment Submitted\n- Content Produced\n- Content Curated\nWith this, they\u2019re able to measure key metrics around engagement and understand how users are moving towards their ultimate conversion event: curation content for others. For more information, check outthis articlefrom GrowthHackers about the events they track and why.\n\n## Define your Track event properties\nEach Track call can accept an optional dictionary ofproperties, which can contain any key-value pair you want. Thesepropertiesact as dimensions that allow your end tool to group, filter, and analyze the events. They give you additional detail on broader events.\n\n```\nproperties\n```\n\n```\nproperties\n```\nAs mentioned earlier, events should be generic and high level, whereas properties are specific and detailed. For example, at Segment,Business Tier Workspace Createdworks poorly as an event name. Instead, Segment usedWorkspace Createdwith apropertyofaccount_tierand value ofbusiness:\n\n```\nBusiness Tier Workspace Created\n```\n\n```\nWorkspace Created\n```\n\n```\nproperty\n```\n\n```\naccount_tier\n```\n\n```\nbusiness\n```\n\n```\nanalytics.track('Workspace Created',{account_tier:'business'})\n```\n\n```\nanalytics.track('Workspace Created',{account_tier:'business'})\n```\nSimilar to the traits in the Identify call, the properties provide you a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools.\nAvoid dynamically generatedkey\u2019s in thepropertiesdictionary, as eachkeywill create a new column in your downstream tools. Dynamically generatedkey\u2019s will clutter your tools with data that will make it difficult and confusing to use later.\n\n```\nkey\n```\n\n```\nproperties\n```\n\n```\nkey\n```\n\n```\nkey\n```\nHere is Segment\u2019sLead CapturedTrack call:\n\n```\nLead Captured\n```\n\n```\nanalytics.track(userId,'Lead Captured',{email:'email',location:'header navbar'url:'https://segment.com/'});\n```\n\n```\nanalytics.track(userId,'Lead Captured',{email:'email',location:'header navbar'url:'https://segment.com/'});\n```\nThe high level event isLead Capturedand all of the details are tucked into thepropertiesdictionary. In its downstream tools, Segment can easily look at how many leads were captured in different locations on the Segment website.\n\n```\nproperties\n```\nIf you want to learn more about how properties are used by downstream tools, check outThe Anatomy of a Track Call.\nWant a free consultation from our Customer Success Managers on how they simplify customer\u2019s analytics?Request a demo of Segment.\nThis page was last modified: 28 Feb 2024\n\n## Need support?\nQuestions? Problems? Need more info? Contact Segment Support for assistance!\n\n## Help improve these docs!\n\n## Was this page helpful?\nThanks for your feedback!\nCan we improve this doc?Send us feedback!\n\n## Get started with Segment",
  "url": "https://segment.com/docs/protocols/tracking-plan/best-practices/"
}