{
  "title": " Analytics.js Source | Segment Documentation",
  "content": "- Home\n- /\n- Connections\n- /\n- Sources\n- /\n- Catalog\n- /\n- Libraries\n- /\n- Website\n- /\n- Analytics.js Source\n\n## Analytics.js Source\nFlagship libraries offer the most up-to-date functionality on Segment\u2019s most popular platforms. Segment actively maintains flagship libraries, which benefit from new feature releases and ongoing development and support.\nOn this page\n- Getting started\n- Benefits of Analytics.js\n- Basic tracking methods\n- Utility methods\n- Managing data flow with the Integrations object\n- Retries\n- Delivery strategy configuration\n- Batching\n- Plugins and source middleware\n- Video player plugins\n- Cross-subdomain analytics\n- UTM Tracking\n- Analytics.js performance\n- Tracking Blockers and Browser Privacy Settings\n- Installing the library under a custom global namespace\n- Add destinations from npm\n- Segment Inspector\n- Example uses\n- External dependencies\nAnalytics.js enables you to send your data to hundreds ofdestination toolswithout having to learn, test, or use a new API every time.\nSegment\u2019s Analytics.js library is fully open-source and can be viewed onGitHub.\n\n## Getting started\nUse theAnalytics.js QuickStart Guideto learn how to add Analytics.js to your site. Once you\u2019ve installed the library, read on for the detailed API reference.\n\n## Benefits of Analytics.js\nAnalytics.js provides two key benefits over the previous version.\n\n## Performance\nAnalytics.js reduces page load time and improves site performance. Its package size is~70%smaller than its predecessor, the classic version of Analytics.js.\nMany factors impact page load time, including network conditions, hosting locations, and page weight. Page weight for each customer integration varies based on the number of device-mode destinations that are enabled for each source. The more device-mode destinations that are enabled, the more data gets added to the library, which will impact the weight of the library.\n\n## Developer experience\nAnalytics.js improves developer experience by introducing new ways for developers to augment events throughout the event timeline. For example, developers can augment events either before or after an event occurs, or while the event is in-flight.\nFor example, you can use Analytics.js to build features that:\n- Ensure you have user consent to track before an event fires\n- Enrich events with customer or page context while in-flight with middleware\n- Check an event for errors after the event is sent to Segment\n\n## Basic tracking methods\nThe basic tracking methods below serve as the building blocks of your Segment tracking. They includeIdentify,Track,Page,Group, andAlias.\nThese methods correspond with those used in theSegment Spec. The documentation on this page explains how to use these methods in Analytics.js.\nGood to know\nFor any of the methods described in this page, you can replace the properties in the code samples with variables that represent the data collected.\n\n## Identify\nUse theidentifymethod to link your users and their actions, to a recognizableuserIdandtraits. You can seeanidentifyexample in the Quickstart guideorfind details on the identify method payload.\n\n```\nidentify\n```\n\n```\nuserId\n```\n\n```\ntraits\n```\n\n```\nidentify\n```\n`identify` and anonymous visitors\nSegment recommendsagainstusingidentifyfor anonymous visitors to your site. Analytics.js automatically retrieves ananonymousIdfromlocalStorageor assigns one for new visitors, and then attaches it to allpageandtrackevents both before and after anidentify.\n\n```\nidentify\n```\n\n```\nanonymousId\n```\n\n```\nlocalStorage\n```\n\n```\npage\n```\n\n```\ntrack\n```\n\n```\nidentify\n```\nThe Identify method follows the format below:\n\n```\nanalytics.identify([userId],[traits],[options],[callback]);\n```\n\n```\nanalytics.identify([userId],[traits],[options],[callback]);\n```\nThe Identify call has the following fields:\n\n```\nuserId\n```\n\n```\nuserId\n```\n\n```\ntraits\n```\n\n```\ntraits\n```\n\n```\nemail\n```\n\n```\nname\n```\n\n```\noptions\n```\n\n```\ntraits\n```\n\n```\noptions\n```\n\n```\ncallback\n```\nBy default, Analytics.js caches traits in the browser\u2019slocalStorageand attaches them to each Identify call.\n\n```\nlocalStorage\n```\nFor example, you might call Identify when someone signs up for a newsletter but hasn\u2019t yet created an account on your site. The example below shows an Identify call (using hard-coded traits) that you might send in this case.\n\n```\nanalytics.identify({nickname:'Amazing Grace',favoriteCompiler:'A-0',industry:'Computer Science'});\n```\n\n```\nanalytics.identify({nickname:'Amazing Grace',favoriteCompiler:'A-0',industry:'Computer Science'});\n```\nThen, when the user completes the sign up process, you might see the following:\n\n```\nanalytics.identify('12091906-01011992',{name:'Grace Hopper',email:'grace@usnavy.gov'});\n```\n\n```\nanalytics.identify('12091906-01011992',{name:'Grace Hopper',email:'grace@usnavy.gov'});\n```\nThe traits object for the second call also includesnickname,favoriteCompiler, andindustry.\n\n```\nnickname\n```\n\n```\nfavoriteCompiler\n```\n\n```\nindustry\n```\nYou may omit both traits and options, and pass the callback as the second argument.\n\n```\nanalytics.identify('12091906-01011992',function(){// Do something after the identify request has been sent// Note: site-critical functionality should not depend on your analytics provider});\n```\n\n```\nanalytics.identify('12091906-01011992',function(){// Do something after the identify request has been sent// Note: site-critical functionality should not depend on your analytics provider});\n```\n\n## Track\nThe Track method lets you record actions your users perform. You cansee a track example in the Quickstart guideor find details onthe track method payload.\nThe Track method follows the format below:\n\n```\nanalytics.track(event,[properties],[options],[callback]);\n```\n\n```\nanalytics.track(event,[properties],[options],[callback]);\n```\nThetrackcall has the following fields:\n\n```\ntrack\n```\n\n```\nevent\n```\n\n```\nproperties\n```\n\n```\n'Added to Cart'\n```\n\n```\nprice\n```\n\n```\nproductType\n```\n\n```\noptions\n```\n\n```\nproperties\n```\n\n```\noptions\n```\n\n```\ncallback\n```\nThe only required argument in Analytics.js is anevent name string. You can read more abouthow Segment recommends you name events.\nExample Track call:\n\n```\nanalytics.track('Article Completed',{title:'How to Create a Tracking Plan',course:'Intro to Analytics',});\n```\n\n```\nanalytics.track('Article Completed',{title:'How to Create a Tracking Plan',course:'Intro to Analytics',});\n```\nFor more information about choosing which events to track, event naming, and more, check outAnalytics Academy.\nThe only required argument on Track calls in Analytics.js is aneventname string. Read more about how Segment recommendsnaming your events.\n\n```\nevent\n```\n\n## Track link\ntrackLinkis a helper method that attaches thetrackcall as a handler to a link.\nWithtrackLink, Analytics.js inserts a timeout of 300 ms to give thetrackcall more time. This is useful when a page would redirect before thetrackmethod could complete all requests.\n\n```\ntrackLink\n```\n\n```\ntrack\n```\n\n```\ntrackLink\n```\n\n```\ntrack\n```\n\n```\ntrack\n```\nThetrackLinkmethod follows the format below.\n\n```\ntrackLink\n```\n\n```\nanalytics.trackLink(element,event,[properties])\n```\n\n```\nanalytics.trackLink(element,event,[properties])\n```\n\n```\nelement(s)\n```\n\n```\ntrack\n```\n\n```\nevent\n```\n\n```\ntrack\n```\n\n```\ntrack\n```\n\n```\nproperties\n```\n\n```\nproperties\n```\nExample:\n\n```\nvarlink=document.getElementById('free-trial-link');analytics.trackLink(link,'Clicked Free-Trial Link',{plan:'Enterprise'});\n```\n\n```\nvarlink=document.getElementById('free-trial-link');analytics.trackLink(link,'Clicked Free-Trial Link',{plan:'Enterprise'});\n```\n\n## Track form\ntrackFormis a helper method that binds atrackcall to a form submission.\nThetrackFormmethod inserts a timeout of 300 ms to give thetrackcall more time to complete. This is useful to prevent a page from redirecting before thetrackmethod could complete all requests.\n\n```\ntrackForm\n```\n\n```\ntrack\n```\n\n```\ntrackForm\n```\n\n```\ntrack\n```\n\n```\ntrack\n```\nThetrackFormmethod follows the format below.\n\n```\ntrackForm\n```\n\n```\nanalytics.trackForm(form,event,[properties])\n```\n\n```\nanalytics.trackForm(form,event,[properties])\n```\n\n```\nform(s)\n```\n\n```\nevent\n```\n\n```\ntrack\n```\n\n```\ntrack\n```\n\n```\nproperties\n```\n\n```\nproperties\n```\nExample:\n\n```\nvarform=document.getElementById('signup-form');analytics.trackForm(form,'Signed Up',{plan:'Premium',revenue:99.00});\n```\n\n```\nvarform=document.getElementById('signup-form');analytics.trackForm(form,'Signed Up',{plan:'Premium',revenue:99.00});\n```\n\n## Page\nThePagemethod lets you record page views on your website, along with optional extra information about the page viewed by the user.\nBecause some Destinations require apagecall to instantiate their libraries,you must callpageat least once per page load. You can call it more than once if needed, for example, on virtual page changes in a single page app.\n\n```\npage\n```\n\n```\npage\n```\nSee the implementation guide for more information aboutcalling the Page method.\nAnalytics.js includes a Page call by default as the final line inthe Analytics.js snippet. You can update thispagecall within the guidelines below.\n\n```\npage\n```\nThepagemethod follows the format below.\n\n```\npage\n```\n\n```\nanalytics.page([category],[name],[properties],[options],[callback]);\n```\n\n```\nanalytics.page([category],[name],[properties],[options],[callback]);\n```\nThepagecall has the following fields:\n\n```\npage\n```\n\n```\ncategory\n```\n\n```\npage\n```\n\n```\nname\n```\n\n```\nname\n```\n\n```\ncategory\n```\n\n```\nname\n```\n\n```\nproperties\n```\n\n```\nurl\n```\n\n```\ntitle\n```\n\n```\nreferrer\n```\n\n```\npath\n```\n\n```\ncanonical url\n```\n\n```\ndocument.location.href\n```\n\n```\noptions\n```\n\n```\nproperties\n```\n\n```\noptions\n```\n\n```\ncallback\n```\n\n## Default page properties\nAnalytics.js adds properties to eachpagecall.\n\n```\npage\n```\n\n```\nanalytics.page('Pricing');\n```\n\n```\nanalytics.page('Pricing');\n```\nSegment adds the following information:\n\n```\nanalytics.page('Pricing',{title:'Segment Pricing',url:'https://segment.com/pricing',path:'/pricing',referrer:'https://segment.com/warehouses'});\n```\n\n```\nanalytics.page('Pricing',{title:'Segment Pricing',url:'https://segment.com/pricing',path:'/pricing',referrer:'https://segment.com/warehouses'});\n```\nYou can override these values by explicitly setting them in your calls. For example:\n\n```\nanalytics.page('Pricing',{title:'My Overridden Title',path:'/pricing/view'});\n```\n\n```\nanalytics.page('Pricing',{title:'My Overridden Title',path:'/pricing/view'});\n```\nTranslates to:\n\n```\nanalytics.page('Pricing',{title:'My Overridden Title',url:'https://segment.com/pricing',path:'/pricing/view',referrer:'https://segment.com/warehouses'});\n```\n\n```\nanalytics.page('Pricing',{title:'My Overridden Title',url:'https://segment.com/pricing',path:'/pricing/view',referrer:'https://segment.com/warehouses'});\n```\nSegment sets thepathandurlproperty to the value of the canonical element on your page. If a canonical element is not set, the values will be set from the browser.\n\n```\npath\n```\n\n```\nurl\n```\n\n## Group\nThe Group method associates anidentified userwith a company, organization, project, workspace, team, tribe, platoon, assemblage, cluster, troop, gang, party, society or any other collective noun you come up with for the same concept.\nThis is useful fortools likeIntercom,Preact, andTotango, as it ties the user to agroupof other users.\nThe Group method follows the format below.\n\n```\nanalytics.group(groupId,[traits],[options],[callback]);\n```\n\n```\nanalytics.group(groupId,[traits],[options],[callback]);\n```\nThe Group call has the following fields:\n\n```\ngroupId\n```\n\n```\ntraits\n```\n\n```\naddress\n```\n\n```\nwebsite\n```\n\n```\nemployees\n```\n\n```\noptions\n```\n\n```\nproperties\n```\n\n```\noptions\n```\n\n```\ncallback\n```\nExamplegroupcall:\n\n```\ngroup\n```\n\n```\nanalytics.group('UNIVAC Working Group',{principles:['Eckert','Mauchly'],site:'Eckert\u2013Mauchly Computer Corporation',statedGoals:'Develop the first commercial computer',industry:'Technology'});\n```\n\n```\nanalytics.group('UNIVAC Working Group',{principles:['Eckert','Mauchly'],site:'Eckert\u2013Mauchly Computer Corporation',statedGoals:'Develop the first commercial computer',industry:'Technology'});\n```\nBy default, Analytics.js caches grouptraitsin the browser\u2019s local storage and attaches them to eachgroupcall, similar to how theidentifymethod works.\n\n```\ntraits\n```\n\n```\ngroup\n```\n\n```\nidentify\n```\nFind more details aboutgroup, including thegrouppayload, inthe Group Spec.\n\n```\ngroup\n```\n\n```\ngroup\n```\n\n## Alias\nThe Alias method combines two unassociated user identities. Segment usually handles aliasing automatically when you callidentifyon a user, however some tools require an explicitaliascall.\n\n```\nidentify\n```\n\n```\nalias\n```\nThis is an advanced method, but it\u2019s required to manage user identities successfully insomeSegment destinations likeKissmetricsandMixpanel.\nThe Alias method follows the format below:\n\n```\nanalytics.alias(userId,[previousId],[options],[callback]);\n```\n\n```\nanalytics.alias(userId,[previousId],[options],[callback]);\n```\nThe Alias call has the following fields:\n\n```\nuserId\n```\n\n```\npreviousId\n```\n\n```\noptions\n```\n\n```\ncallback\n```\nFor more details about Alias, including thealiascall payload, check out theSegment Spec.\n\n```\nalias\n```\n\n## Utility methods\nThe Analytics.js utility methods help you change how Segment loads on your page. They include:\n- Load\n- Ready\n- Debug\n- On (Emitter)\n- Timeout\n- Reset (Logout)\n\n## Load\nTheloadmethod is also available when you load analytics.js through theNPM package.\n\n```\nload\n```\nYou can load a buffered version of analytics.js that requires you to callloadexplicitly before analytics.js initiates any network activity. This is useful if you want to, for example, wait for user consent before you fetch tracking destinations or send buffered events to Segment.\n\n```\nload\n```\nCallloadone time only.\n\n```\nload\n```\n\n```\nexportconstanalytics=newAnalyticsBrowser()analytics.identify(\"hello world\")if(userConsentsToBeingTracked){analytics.load({writeKey:'<YOUR_WRITE_KEY>'})// destinations loaded, enqueued events are flushed}\n```\n\n```\nexportconstanalytics=newAnalyticsBrowser()analytics.identify(\"hello world\")if(userConsentsToBeingTracked){analytics.load({writeKey:'<YOUR_WRITE_KEY>'})// destinations loaded, enqueued events are flushed}\n```\nYou can also useloadif you fetch some settings asynchronously.\n\n```\nload\n```\n\n```\nconstanalytics=newAnalyticsBrowser()fetchWriteKey().then(writeKey=>analytics.load({writeKey}))analytics.identify(\"hello world\")\n```\n\n```\nconstanalytics=newAnalyticsBrowser()fetchWriteKey().then(writeKey=>analytics.load({writeKey}))analytics.identify(\"hello world\")\n```\n\n## Ready\nThereadymethod lets you pass in a method that gets called after Analytics.js finishes initializing and after all enabled device-mode destinations load. It\u2019s likejQuery\u2019sreadymethod, except for Destinations. Because it doesn\u2019t fire until all enabled device-mode destinations are loaded, it can\u2019t be used to change configuration options for downstream SDKs. That can only be done if the SDK is loaded natively.\n\n```\nready\n```\n\n```\nready\n```\nThereadymethod isn\u2019t invoked if any Destination throws an error (for example, for an expired API key, incorrect settings configuration, or when a Destination is blocked by the browser) during initialization. If you want to check when Analytics.js has loaded, you can look at the value ofwindow.analytics.initialized. When it\u2019s true, the library has successfully initialized, even if some destinations are blocked.\n\n```\nready\n```\n\n```\nwindow.analytics.initialized\n```\nNote:window.analytics.initializedis a simple boolean, not an event or a pub/sub system. This means you can\u2019t subscribe to changes in its value. If you need to detect when it changes fromfalsetotrue, you must set up a polling mechanism to monitor the value.\n\n```\nwindow.analytics.initialized\n```\n\n```\nfalse\n```\n\n```\ntrue\n```\nThe code in thereadyfunction only executes afterreadyis emitted.\n\n```\nready\n```\n\n```\nready\n```\nIf you want to access end-tool library methods that do not match any Analytics.js methods, like adding an extra setting to Mixpanel, you can use areadycallback so that you\u2019re guaranteed to have access to the Mixpanel object, like so:\n\n```\nready\n```\n\n```\nanalytics.ready(()=>{window.mixpanel.set_config({verbose:true});});\n```\n\n```\nanalytics.ready(()=>{window.mixpanel.set_config({verbose:true});});\n```\nThereadymethod uses the following format:\n\n```\nready\n```\n\n```\nanalytics.ready(callback);\n```\n\n```\nanalytics.ready(callback);\n```\nThereadymethod has the following fields:\n\n```\nready\n```\n\n```\ncallback\n```\n\n## Debug\nCalling thedebugmethod turns on debug mode, which logs helpful messages to the console. Subsequent Segment events generate messages in the developer console after you invokedebug.\n\n```\ndebug\n```\n\n```\ndebug\n```\nEnable:\n\n```\nanalytics.debug(true);\n```\n\n```\nanalytics.debug(true);\n```\nDisable:\n\n```\nanalytics.debug(false);\n```\n\n```\nanalytics.debug(false);\n```\n\n## Emitter\nThe globalanalyticsobject emits events whenever you callalias,group,identify,track, orpage.\n\n```\nanalytics\n```\n\n```\nalias\n```\n\n```\ngroup\n```\n\n```\nidentify\n```\n\n```\ntrack\n```\n\n```\npage\n```\nUse theonmethod to set listeners for these events and run your own custom code. This can be useful if you want to send data to a service for which Segment doesn\u2019t have a destination.\n\n```\non\n```\n\n```\nanalytics.on(method,callback);\n```\n\n```\nanalytics.on(method,callback);\n```\n\n```\nmethod\n```\n\n```\ncallback\n```\n\n```\nevent\n```\n\n```\nproperties\n```\n\n```\noptions\n```\nExample:\n\n```\nanalytics.on('track',(event,properties,options)=>{bigdataTool.push(['recordEvent',event]);});\n```\n\n```\nanalytics.on('track',(event,properties,options)=>{bigdataTool.push(['recordEvent',event]);});\n```\nThis method emits eventsbeforethey are processed by the Segment integration, and may not include some of the normalization Segment performs on the client before sending the data to the Segment servers.\nNote\nPage event properties are stored in theoptionsobject.\n\n```\noptions\n```\n\n## Extending timeout\nThetimeoutmethod sets the length (in milliseconds) of callbacks and helper functions. This is useful if you have multiple scripts that need to fire in your callback ortrackLink,trackFormhelper function.\n\n```\ntimeout\n```\n\n```\ntrackLink\n```\n\n```\ntrackForm\n```\nThe example below sets the timeout to 500 ms.\n\n```\nanalytics.timeout(500);\n```\n\n```\nanalytics.timeout(500);\n```\nIf you\u2019re triggering ad network conversion pixels, Segment recommends extending timeout to 500 ms to account for slow load times.\n\n## Reset or log out\nCallingresetresets theid, includinganonymousId, and clearstraitsfor the currently identified user and group.\n\n```\nreset\n```\n\n```\nid\n```\n\n```\nanonymousId\n```\n\n```\ntraits\n```\n\n```\nanalytics.reset();\n```\n\n```\nanalytics.reset();\n```\nTheresetmethod only clears the cookies andlocalStoragecreated by Segment. It doesn\u2019t clear data from other integrated tools, as those native libraries might set their own cookies to manage user tracking, sessions, and manage state. To completely clear out the user session, see the documentation provided by those tools.\n\n```\nreset\n```\n\n```\nlocalStorage\n```\nSegment doesn\u2019t sharelocalStorageacross subdomains. If you use Segment tracking on multiple subdomains, you must callanalytics.reset()for each subdomain to completely clear out the user session.\n\n```\nlocalStorage\n```\n\n```\nanalytics.reset()\n```\n\n## Managing data flow with the Integrations object\nTip: You can change how your data flows in several different ways without having to change your code. SeeFiltering Datato learn more.\nYou can pass anintegrationsobject in theoptionsof Alias, Group, Identify, Page, and Trackmethods to send data to only the selected destinations. By default, all Destinations are enabled.\n\n```\nintegrations\n```\n\n```\noptions\n```\nThe example below sends a message only to Intercom and Google Analytics.\n\n```\nanalytics.identify('user_123',{email:'jane.kim@example.com',name:'Jane Kim'},{integrations:{'All':false,'Intercom':true,'Google Analytics':true}});\n```\n\n```\nanalytics.identify('user_123',{email:'jane.kim@example.com',name:'Jane Kim'},{integrations:{'All':false,'Intercom':true,'Google Analytics':true}});\n```\n'All': falsetells Segment not to send data toanyDestinations by default, unless they\u2019re explicitly listed astruein the next lines.\n\n```\n'All': false\n```\n\n```\ntrue\n```\nAs an opposite example, the snippet below sends a message to all integrationsexceptIntercom and Google Analytics.\n\n```\nanalytics.identify('user_123',{email:'jane.kim@example.com',name:'Jane Kim'},{integrations:{'Intercom':false,'Google Analytics':false}});\n```\n\n```\nanalytics.identify('user_123',{email:'jane.kim@example.com',name:'Jane Kim'},{integrations:{'Intercom':false,'Google Analytics':false}});\n```\nYou don\u2019t need to include'All': truein this call because it\u2019s implied as the default behavior. Instead, only list the destinations that you want to exclude, with afalseflag for each.\n\n```\n'All': true\n```\n\n```\nfalse\n```\nDestination flags arecase sensitiveand matchthe destination\u2019s name in the docs(for example, \u201cAdLearn Open Platform\u201d, \u201cawe.sm\u201d, \u201cMailchimp\u201d, etc). If a Destination has more than one acceptable name, this appears in the documentation for that destination.\nBusiness tier customers can filter Track calls from the Source Schema page in the Segment UI. Segment recommends that you use the UI to simplify filter management and make updates without changing your site\u2019s code.\n\n## Load options\nNote:To use this feature, you must be on snippet version 4.1.0 or later. You can get the latest version of the snippet from theAnalytics.js Quickstart.\nYou can modify the.loadmethod in Analytics.js (the second line of the snippet) to take a second argument. If you pass an object with anintegrationsdictionary, then Segment only loads the integrations in that dictionary that are marked as enabled with the boolean valuetrue.\n\n```\n.load\n```\n\n```\nintegrations\n```\n\n```\ntrue\n```\nYou can only call.loadon page load, or reload (refresh). If you modify the.loadmethod between page loads, it doesn\u2019t have any effect until the page is reloaded.\n\n```\n.load\n```\n\n```\n.load\n```\nFor example:\n\n```\nanalytics.load('writekey',{integrations:{All:false,'Google Analytics':true,'Segment.io':true}})\n```\n\n```\nanalytics.load('writekey',{integrations:{All:false,'Google Analytics':true,'Segment.io':true}})\n```\nThis way, you can conditionally load integrations based on what customers opt into on your site. The example below shows how you might load only the tools that the user agreed to use.\n\n```\nonConsentDialogClosed((consentedTools)=>{analytics.load('writekey',{integrations:consentedTools})})\n```\n\n```\nonConsentDialogClosed((consentedTools)=>{analytics.load('writekey',{integrations:consentedTools})})\n```\n\n## Bundle obfuscation\nYou can also add anobfuscateproperty to the object in the second parameter, which obscures the URL from which your integrations and destination actions are loaded. This helps prevent words that are flagged by ad blockers to not be detected in your URL, enabling the integration to properly load.\n\n```\nobfuscate\n```\nFor example:\n\n```\nanalytics.load('writekey',{obfuscate:true})\n```\n\n```\nanalytics.load('writekey',{obfuscate:true})\n```\nTheobfuscatevalue isfalseby default.\n\n```\nobfuscate\n```\n\n```\nfalse\n```\n\n## ISO string conversion\nBy default, the Analytics.js library will convert ISO8061 strings to a Date object before passing it to downstream device-mode integrations. If you would like to disable this functionality and send those strings as they are passed to the event, you can use the load method to pass in thedisableAutoISOConversionoption.\n\n```\ndisableAutoISOConversion\n```\nFor example:\n\n```\nanalytics.load('writekey',{disableAutoISOConversion:true})\n```\n\n```\nanalytics.load('writekey',{disableAutoISOConversion:true})\n```\n\n## Client hints\nSomeuserAgentstrings are frozen and contain less information. If you would like to request more information when it\u2019s available, you can pass an array of strings with fields you would like to request to thehighEntropyValuesClientHintsoption. The example array below contains all possible values.\n\n```\nuserAgent\n```\n\n```\nhighEntropyValuesClientHints\n```\nFor example:\n\n```\nanalytics.load('writekey',{highEntropyValuesClientHints:['architecture','bitness','model','platformVersion','uaFullVersion','fullVersionList','wow64']})\n```\n\n```\nanalytics.load('writekey',{highEntropyValuesClientHints:['architecture','bitness','model','platformVersion','uaFullVersion','fullVersionList','wow64']})\n```\n\n## Disabling\nFor testing or staging environments, it can be useful to disable your SDK to ensure no events send.\nIfdisable: trueis passed, all analytics method calls will be a no-op, and no network calls will be initiated.\n\n```\ndisable: true\n```\n\n```\nanalytics.load('writekey',{disable:true})\n```\n\n```\nanalytics.load('writekey',{disable:true})\n```\nFor wrapper/plugin authors: if you have a use case where you need special access to the CDN Settings (for example, consent management), you can also pass a function. This API waits forcdnSettingsto be fetched. Keep in mind thatcdnSettingsis anunstableobject.\n\n```\ncdnSettings\n```\n\n```\ncdnSettings\n```\n\n```\nanalytics.load('writekey',{disable:(cdnSettings)=>true})\n```\n\n```\nanalytics.load('writekey',{disable:(cdnSettings)=>true})\n```\n\n## Retries\nWhen enabled, Analytics.js automatically retries network and server errors. With persistent retries, Analytics.js can:\n- Support offline tracking. Analytics.js queues your events and delivers them when the user comes back online.\n- Better handle network issues. When your application can\u2019t connect to the Segment API, Segment continues to store the events on the browser to prevent data loss.\nAnalytics.js stores events inlocalStorageand falls back to in-memory storage whenlocalStorageis unavailable. It retries up to 10 times with an incrementally increasing back-off time between each retry. Analytics.js queues up to 100 events at a time to avoid using too much of the device\u2019s local storage. See thedestination Retries documentationto learn more.\n\n```\nlocalStorage\n```\n\n```\nlocalStorage\n```\n\n## Delivery strategy configuration\nThedeliveryStrategy.configobject lets you customize how data is delivered to Segment. This includes options like setting custom headers and enablingkeepaliveto capture events during hard redirects.\n\n```\ndeliveryStrategy.config\n```\n\n```\nkeepalive\n```\n\n## Adding custom headers\nYou can override default headers by providing custom headers in your configuration. Use thedeliveryStrategy.config.headersoption to specify the headers, like in the following example:\n\n```\ndeliveryStrategy.config.headers\n```\n\n```\nanalytics.load(\"<YOUR_WRITE_KEY>\",{integrations:{'Segment.io':{deliveryStrategy:{config:{headers:{'x-api-key':'foo'}}}}}});##KeepaliveYoucanusethe`keepalive`optiontomakesurethatSegmentcapturesAPIcallstriggeredduringahardredirect.Whenenabled,`keepalive`willtrytofireeventsbeforetheredirectoccurs.Bydefault,`keepalive`issettofalse,becauseallfetchrequestswiththe`keepalive`flagaresubjecttoa64kbsizelimit.Additionally,`keepalive`requestssharethissizelimitwithallotherin-flight`keepalive`requests,regardlessofwhetherthey're related to Segment. This competition for resources can lead to data loss in some scenarios.\n\nSegment only uses `keepalive` by default if:\n- The browser detects that the page is unloading (like if the user closes the tab or navigates away).\n- You have batching enabled.\n\nTo enable `keepalive`, use the following configuration:\n\n```ts\nanalytics.load(\"<YOUR_WRITE_KEY>\", {\n  integrations: {'Segment.io': {\n      deliveryStrategy: {\n        config: {\n          keepalive: true\n        }\n      }\n    }\n  }\n});\n```\n\n```\nanalytics.load(\"<YOUR_WRITE_KEY>\",{integrations:{'Segment.io':{deliveryStrategy:{config:{headers:{'x-api-key':'foo'}}}}}});##KeepaliveYoucanusethe`keepalive`optiontomakesurethatSegmentcapturesAPIcallstriggeredduringahardredirect.Whenenabled,`keepalive`willtrytofireeventsbeforetheredirectoccurs.Bydefault,`keepalive`issettofalse,becauseallfetchrequestswiththe`keepalive`flagaresubjecttoa64kbsizelimit.Additionally,`keepalive`requestssharethissizelimitwithallotherin-flight`keepalive`requests,regardlessofwhetherthey're related to Segment. This competition for resources can lead to data loss in some scenarios.\n\nSegment only uses `keepalive` by default if:\n- The browser detects that the page is unloading (like if the user closes the tab or navigates away).\n- You have batching enabled.\n\nTo enable `keepalive`, use the following configuration:\n\n```ts\nanalytics.load(\"<YOUR_WRITE_KEY>\", {\n  integrations: {'Segment.io': {\n      deliveryStrategy: {\n        config: {\n          keepalive: true\n        }\n      }\n    }\n  }\n});\n```\n\n## Batching\nBatching is the ability to group multiple requests or calls into one request or API call. All requests sent within the same batch have the samereceivedAttime. With Analytics.js, you can send events to Segment in batches. Sending events in batches enables you to have:\n\n```\nreceivedAt\n```\n- Delivery of multiple events with fewer API calls\n- Fewer errors if a connection is lost because an entire batch will retry at once rather than multiple calls retrying at random times.\n\n## Setup\nYou can start batching by changing thestrategyto\"batching\"and the parameters forsizeandtimeoutwithin theloadmethod in the analytics object. Batching requires both parameters.\n\n```\nstrategy\n```\n\n```\n\"batching\"\n```\n\n```\nsize\n```\n\n```\ntimeout\n```\n\n```\nload\n```\n\n```\nanalytics.load(\"<write_key>\",{integrations:{\"Segment.io\":{deliveryStrategy:{strategy:\"batching\",config:{size:10,timeout:5000}}}}});\n```\n\n```\nanalytics.load(\"<write_key>\",{integrations:{\"Segment.io\":{deliveryStrategy:{strategy:\"batching\",config:{size:10,timeout:5000}}}}});\n```\nYou can check to see if batching works by checking your source\u2019s debugger inSources > Debugger. When you select an event and view theRawcode, thereceivedAttime of all the events in the batch should be the same.\n\n```\nreceivedAt\n```\n\n## Batch size\nThe batch size is the threshold that forces all batched events to be sent once it\u2019s reached. For example,size: 10means that after triggering 10 events, Analytics.js sends those 10 events together as a batch to Segment.\n\n```\nsize: 10\n```\nYour total batched events can\u2019t exceed the maximum payload size of 500 KB, with a limit of 32 KB for each event in the batch. If the 500 KB limit is reached, the batch will be split.\n\n## Timeout\ntimeoutis the number of milliseconds that forces all events queued for batching to be sent, regardless of the batch size, once it\u2019s reached. For example,timeout: 5000sends every event in the batch to Segment once 5 seconds passes.\n\n```\ntimeout\n```\n\n```\ntimeout: 5000\n```\n\n## Batching FAQs\n\n## Will Analytics.js deliver events that are in the queue when a user closes the browser?\nAnalytics.js does its best to deliver the queued events before the browser closes, but the delivery isn\u2019t guaranteed.\nUpon receiving thebeforeunloadbrowser event, Analytics.js attempts to flush the queue usingfetchrequests withkeepaliveset to true. Since the max size ofkeepalivepayloads is limited to 64 KB, if the queue size is bigger than 64 KB at the time the browser closes, then there is a chance of losing a subset of the queued events. Reducing the batch size or timeout will alleviate this issue, but that will be a trade-off decision.\n\n```\nbeforeunload\n```\n\n```\nfetch\n```\n\n```\nkeepalive\n```\n\n```\nkeepalive\n```\n\n## Can other destinations receive batched events?\nNo, this batching only impacts events sent to Segment. Once the batch reaches Segment, it\u2019s split up and follows the normal path of an event.\n\n## Will batching impact billing or throughput?\nNo, batching won\u2019t impact billing or throughput.\n\n## Can I use batching with partner integrations?\nPartner integrations don\u2019t support batching as all other partner integrations run one event at a time. Only Segment.io events support batched delivery.\n\n## Does batching work on all browsers?\nBatching won\u2019t work on Internet Explorer.\n\n## If a source has retry enabled, does the retry behavior change when using batching?\nBatching delays retries, as events that are queued for batching aren\u2019t retried until a batch delivery fails.\n\n## When using Middlewares as a source and destination, is there a change in behavior when using batching?\nNo, there is no change in behavior to Middlewares.\n\n## When using Segment features (Schema filtering, integrations object, Protocols) to filter events from going to destinations (device and cloud-mode), will batching impact the filtering of events?\nNo, there is no impact to how events filter.\n\n## Plugins and source middleware\nWhen you develop against Analytics 2.0, the plugins you write can augment functionality, enrich data, and control the flow and delivery of events. From modifying event payloads to changing analytics functionality, plugins and middleware help to speed up the process of getting things done.\nPlugins and source middleware accomplish the same thing, but plugins are significantly more powerful (but more verbose to implement).\nFor basic use cases like adding event fields or dropping specific events, usesource middleware. If you need more granular control of the lifecycle, or want to be able to abort the Segment initialization, you should useplugins.\n\n## Source Middleware\nSource middlewareruns before any other plugins. You can use this to enrich or drop an event.\n\n## Example usage ofaddSourceMiddleware\n\n```\naddSourceMiddleware\n```\nHere are some examples of usingaddSourceMiddlewarefor enrichment and validation.\n\n```\naddSourceMiddleware\n```\n- Enrichmentanalytics.addSourceMiddleware(({payload,next})=>{const{event}=payload.obj.contextif(event.type==='track'){event.event.toLowerCase()}next(payload)});\n\n```\nanalytics.addSourceMiddleware(({payload,next})=>{const{event}=payload.obj.contextif(event.type==='track'){event.event.toLowerCase()}next(payload)});\n```\n\n```\nanalytics.addSourceMiddleware(({payload,next})=>{const{event}=payload.obj.contextif(event.type==='track'){event.event.toLowerCase()}next(payload)});\n```\n- Validationanalytics.addSourceMiddleware(({payload,next})=>{const{event}=payload.obj.contextif(!isValid(event)){returnnull// event is dropped}next(payload)});\n\n```\nanalytics.addSourceMiddleware(({payload,next})=>{const{event}=payload.obj.contextif(!isValid(event)){returnnull// event is dropped}next(payload)});\n```\n\n```\nanalytics.addSourceMiddleware(({payload,next})=>{const{event}=payload.obj.contextif(!isValid(event)){returnnull// event is dropped}next(payload)});\n```\n\n## Advanced Plugin API\nFor advanced modification to the event pipeline.\n\n```\nbefore\n```\n\n```\naddSourceMiddleware\n```\n\n```\nbefore\n```\n\n```\nenrichment\n```\n\n```\ndestination\n```\n\n```\nafter\n```\n\n```\nutility\n```\n\n```\nload()\n```\n\n## Example plugins\nHere\u2019s an example of a plugin that converts all track event names to lowercase before the event goes through the rest of the pipeline:\n\n```\nexportconstlowercase:Plugin={name:'Lowercase events',type:'enrichment',version:'1.0.0',isLoaded:()=>true,load:()=>Promise.resolve(),track:(ctx)=>{ctx.updateEvent('event',ctx.event.event.toLowerCase())returnctx}}constidentityStitching=()=>{letuserconstidentity={// Identifies your plugin in the Plugins stack.// Access `window.analytics.queue.plugins` to see the full list of pluginsname:'Identity Stitching',// Defines where in the event timeline a plugin should runtype:'enrichment',version:'0.1.0',// use the `load` hook to bootstrap your plugin// The load hook will receive a context object as its first argument// followed by a reference to the analytics.js instance from the pageload:async(_ctx,ajs)=>{user=ajs.user()},// Used to signal that a plugin has been property loadedisLoaded:()=>user!==undefined,// Applies the plugin code to every `identify` call in Analytics.js// You can override any of the existing types in the Segment Spec.asyncidentify(ctx){// Request some extra info to enrich your `identify` events from// an external API.constreq=awaitfetch(`https://jsonplaceholder.typicode.com/users/${ctx.event.userId}`)constuserReq=awaitreq.json()// ctx.updateEvent can be used to update deeply nested properties// in your events. It's a safe way to change events as it'll//  create any missing objects and properties you may require.ctx.updateEvent('traits.custom',userReq)user.traits(userReq)// Every plugin must return a `ctx` object, so that the event// timeline can continue processing.returnctx},}returnidentity}// Registers Segment's new plugin into Analytics.jsawaitwindow.analytics.register(identityStitching())\n```\n\n```\nexportconstlowercase:Plugin={name:'Lowercase events',type:'enrichment',version:'1.0.0',isLoaded:()=>true,load:()=>Promise.resolve(),track:(ctx)=>{ctx.updateEvent('event',ctx.event.event.toLowerCase())returnctx}}constidentityStitching=()=>{letuserconstidentity={// Identifies your plugin in the Plugins stack.// Access `window.analytics.queue.plugins` to see the full list of pluginsname:'Identity Stitching',// Defines where in the event timeline a plugin should runtype:'enrichment',version:'0.1.0',// use the `load` hook to bootstrap your plugin// The load hook will receive a context object as its first argument// followed by a reference to the analytics.js instance from the pageload:async(_ctx,ajs)=>{user=ajs.user()},// Used to signal that a plugin has been property loadedisLoaded:()=>user!==undefined,// Applies the plugin code to every `identify` call in Analytics.js// You can override any of the existing types in the Segment Spec.asyncidentify(ctx){// Request some extra info to enrich your `identify` events from// an external API.constreq=awaitfetch(`https://jsonplaceholder.typicode.com/users/${ctx.event.userId}`)constuserReq=awaitreq.json()// ctx.updateEvent can be used to update deeply nested properties// in your events. It's a safe way to change events as it'll//  create any missing objects and properties you may require.ctx.updateEvent('traits.custom',userReq)user.traits(userReq)// Every plugin must return a `ctx` object, so that the event// timeline can continue processing.returnctx},}returnidentity}// Registers Segment's new plugin into Analytics.jsawaitwindow.analytics.register(identityStitching())\n```\nHere\u2019s an example of autilityplugin that allows you to change the format of the anonymous_id cookie:\n\n```\nutility\n```\n\n```\nwindow.analytics.ready(()=>{window.analytics.register({name:'Cookie Compatibility',version:'0.1.0',type:'utility',load:(_ctx,ajs)=>{constuser=ajs.user()constcookieJar=user.cookiesconstcookieSetter=cookieJar.set.bind(cookieJar)// blindly convert any values into JSON stringscookieJar.set=(key,value,opts)=>cookieSetter(key,JSON.stringify(value),opts)// stringify any existing IDsuser.anonymousId(user.anonymousId())user.id(user.id())},isLoaded:()=>true})})\n```\n\n```\nwindow.analytics.ready(()=>{window.analytics.register({name:'Cookie Compatibility',version:'0.1.0',type:'utility',load:(_ctx,ajs)=>{constuser=ajs.user()constcookieJar=user.cookiesconstcookieSetter=cookieJar.set.bind(cookieJar)// blindly convert any values into JSON stringscookieJar.set=(key,value,opts)=>cookieSetter(key,JSON.stringify(value),opts)// stringify any existing IDsuser.anonymousId(user.anonymousId())user.id(user.id())},isLoaded:()=>true})})\n```\nYou can view Segment\u2019sexisting pluginsto see more examples.\n\n## Register a plugin\nRegistering plugins enable you to modify your analytics implementation to best fit your needs. You can register a plugin using this:\n\n```\n// A promise will resolve once the plugins have been successfully loaded into Analytics.js// You can register multiple plugins at once by using the variable args interface in Analytics.jsawaitwindow.analytics.register(pluginA,pluginB,pluginN)\n```\n\n```\n// A promise will resolve once the plugins have been successfully loaded into Analytics.js// You can register multiple plugins at once by using the variable args interface in Analytics.jsawaitwindow.analytics.register(pluginA,pluginB,pluginN)\n```\n\n## Video player plugins\nSegment offers video player \u2018plugins\u2019 so you can quickly collect video events using Analytics.js. See the specific documentation below to learn more:\n- YouTube\n- Vimeo\n\n## Cross-subdomain analytics\nAnalytics.js tracks across subdomains out of the box. All Segment destinations fully support this feature.\nTo track activity on your subdomains, include the Segment Analytics.js snippet on each subdomain. Segment sets users\u2019anonymousIdon the top-level domain, so that users are tracked across any subdomain.\n\n```\nanonymousId\n```\nBecause Segment tracks across subdomains, you can either use the same Segment source, or use separate sources for each subdomain. What you decide depends on your team\u2019s goals for tracking each subdomain.\nSegment doesn\u2019t offer tracking across top-level domains out of the box. If you want to track across top-level domains, you can utilize Segment\u2019sQuerystring APIto pass the anonymousId from Website A to Website B in the query string. When a user moves from Website A to Website B with the anonymousId in the query string, Analytics.js reads that value and sets the anonymousId to it, rather than generating a new one.\n\n## UTM Tracking\nUTM parameters are only used when linking to your site from outside your domain. When a visitor arrives using a link containing UTM parameters, Segment\u2019s analytics.js library will parse the URL query string and add the information to the event payload. For more information about UTM tracking, see theTracking Customers Across Channels and Devicesdocumentation.\nUTM parameters contain three essential components (utm_source, utm_medium, utm_campaign) and two optional (utm_content, utm_term). For example, if you include the following three parameters in your URL:?utm_source=mysource&utm_medium=email&utm_campaign=mytestcampaign, once a visitor arrives using a link containing the above, Segment automatically grabs the UTM parameters and subsequent events will contain these parameters within the \u2018context\u2019 object (visible in the raw view of your Source Debugger.)\n\n```\n?utm_source=mysource&utm_medium=email&utm_campaign=mytestcampaign\n```\nSo, for example, if somebody follows the link with above query string to your site, the subsequent \u2018page\u2019 call in your Debugger should contain the below and will be passed to any enabled destinations:\n\n```\n\"context\":{\"campaign\":{\"medium\":\"email\",\"name\":\"mytestcampaign\",\"source\":\"mysource\",},\n```\n\n```\n\"context\":{\"campaign\":{\"medium\":\"email\",\"name\":\"mytestcampaign\",\"source\":\"mysource\",},\n```\nWhenever the UTM parameters are no longer a part of the URL, Segment no longer includes them. For example, if the user goes to a new page within your website which does not contain these parameters, they will not be included in subsequent events. UTM parameters are non-persistent by default as they could potentially cause data accuracy problems. Here\u2019s an example of why: Say a user clicks on an ad and lands on your site. He navigates around and bookmarks an internal page - or maybe shares a link with a friend, who shares it with another friend. All those links would then point back to the same test utm_source as the initial referrer for any purchase.\nSegment doesn\u2019t validate UTM parameter names. This design supports the flexibility to track both standard parameters (for example, utm_source, utm_medium) and custom parameters defined by users. As a result, all parameters present in the URL collected as is, and are added to the context field without checks for naming conventions or validity.\nIf you want to ensure that only standard UTM parameters (such as, utm_source, utm_medium, utm_campaign, utm_content, utm_term) are included in the context.campaign object, you can implementSource middlewarein your Analytics.js setup.\nFor example:\n\n```\nwindow.analytics.addSourceMiddleware(({payload,next})=>{if(payload.obj.context?.campaign){constallowedFields=[\"source\",\"medium\",\"term\",\"campaign\",\"content\"];constcampaign=payload.obj.context.campaign;Object.keys(campaign).forEach(key=>{if(!allowedFields.includes(key)){deletecampaign[key];}});}next(payload);});\n```\n\n```\nwindow.analytics.addSourceMiddleware(({payload,next})=>{if(payload.obj.context?.campaign){constallowedFields=[\"source\",\"medium\",\"term\",\"campaign\",\"content\"];constcampaign=payload.obj.context.campaign;Object.keys(campaign).forEach(key=>{if(!allowedFields.includes(key)){deletecampaign[key];}});}next(payload);});\n```\nThis middleware filters out any non-standard parameters from thecontext.campaignobject before they\u2019re sent to Segment or forwarded to your enabled destinations.\n\n```\ncontext.campaign\n```\n\n## Analytics.js performance\nThe Analytics.js library and all Destination libraries are loaded with theHTML scriptasynctag. This also means that Segment fires methods asynchronously, so you should adjust your code accordingly if you require that events be sent from the browser in a specific order.\n\n```\nasync\n```\nWhile many tools require access to the DOM or cookies, for the Zendesk, Salesforce, and Mailchimp destinations, Segment doesn\u2019t need to load a native JavaScript library. Instead, Segment\u2019s servers send data to the end-tools.\nSegment loads the libraries required for yourenabledDestinations. When you disable a destination, the custom version of Analytics.js loaded on your site stops requesting that library.\nUsing Analytics.js doesn\u2019t offer a large performance benefit, but is more performant than installing each of the destinations individually. And as more destinations move to accept data directly from Segment, you\u2019ll receive more performance benefits automatically.\nOne option, if you don\u2019t want to use any bundled third-party tools, is to use theAnalytics-Nodepackage.\nAnalytics.js doesn\u2019t set third-party cookies and only sets first-party cookies.\n\n## Bundle size\nSegment\u2019s Analytics.js JavaScript snippet increases the page size by about 1.1KB.\nThe snippet asynchronously requests and loads a customized JavaScript bundle (analytics.min.js), which contains the code and settings needed to load yourdevice-mode destinations. The size of this file changes depending on the number of and which destinations you enable.\n\n```\nanalytics.min.js\n```\nWithout any destinations enabled, theanalytics.min.jsfile is about 62KB. Each time you enable a destination, the file\u2019s size may increase slightly.\n\n```\nanalytics.min.js\n```\n\n## Cookies set by Analytics.js\nSegment sets three cookies in general:\n\n```\najs_anonymous_id\n```\n\n```\najs_group_id\n```\n\n```\ngroup()\n```\n\n```\najs_user_id\n```\n\n```\nidentify()\n```\nFor Google Chrome, these cookies expire by defaultone yearafter the date created. Othersupported browsersmight have a different expiration time.\nSome user/group traits are also stored inlocalStorage:\n\n```\nlocalStorage\n```\n\n```\najs_user_traits\n```\n\n```\nidentify()\n```\n\n```\najs_group_properties\n```\n\n```\ngroup()\n```\nNote thatlocalStoragevariables don\u2019t expire because the browser defines that functionality.\n\n```\nlocalStorage\n```\n\n## Local storage cookies used by Analytics.js\nAnalytics.js useslocalstoragecookies if you have retries enabled, to keep track of retry timing.\n\n```\nlocalstorage\n```\n- Theackcookie is a timer used to see if another tab should claim the retry queue.\n\n```\nack\n```\n- ThereclaimStartandreclaimEndcookies determine if a tab takes over the queue from another tab.\n\n```\nreclaimStart\n```\n\n```\nreclaimEnd\n```\n- TheinProgressandqueuecookies track events in progress, and events queued for retry.\n\n```\ninProgress\n```\n\n```\nqueue\n```\nFor more information, visit theSegment localstorage-retry library.\nYou can set thedebugcookie toanalytics.jsto log debug messages from Analytics.js to the console.\n\n```\ndebug\n```\n\n```\nanalytics.js\n```\n\n## Tracking Blockers and Browser Privacy Settings\nSegment does not endorse bypassing tracking blockers or browser privacy settings for client-side tracking. Your users have control over what gets loaded on their pages and can use plugins or browser settings to block third-party scripts, including Segment. To minimize client-side data loss, Segment recommends you choose from the following routes:\n- Respect the user\u2019s decision to implement tracking blockers or use privacy settings, knowing that, unfortunately, some data will be lost.\n- Ask the customer to disable the tracking blockers or adjust their privacy settings (for example, in the case of large, corporate customers).\n- Move as many events and tracking actions as possible to a server-side library, which won\u2019t encounter the same limitations.\nTo minimize client-side data loss, Segment provides a few workarounds. However, it\u2019s important to note that Segment cannot guarantee their effectiveness.\n- Use thebundle obfuscationfeature. You can add an obfuscate property to the object in the second parameter, which obscures the URL from which your integrations and destination actions are loaded. This helps prevent words that are flagged by ad blockers to not be detected in your URL, enabling the integration to properly load.\nUse thebundle obfuscationfeature. You can add an obfuscate property to the object in the second parameter, which obscures the URL from which your integrations and destination actions are loaded. This helps prevent words that are flagged by ad blockers to not be detected in your URL, enabling the integration to properly load.\n- Create acustom proxy. This changes the URL that Segment loads from (cdn.segment.com) and the outgoing requests generated when events are triggered (api.segment.io).\nCreate acustom proxy. This changes the URL that Segment loads from (cdn.segment.com) and the outgoing requests generated when events are triggered (api.segment.io).\n- Consider implementing theSegment Edge SDK. The Segment Edge SDK leverages Cloudflare Workers to facilitate first-party data collection and real-time user profiling for app personalization. It integrates Segment\u2019s library into web apps, manages user identity via HttpOnly cookies, and employs an internal router for efficient data processing and user experience customization. This innovative approach simplifies tracking and personalization for Segment customers. More information is available in theEdge SDK README.\nConsider implementing theSegment Edge SDK. The Segment Edge SDK leverages Cloudflare Workers to facilitate first-party data collection and real-time user profiling for app personalization. It integrates Segment\u2019s library into web apps, manages user identity via HttpOnly cookies, and employs an internal router for efficient data processing and user experience customization. This innovative approach simplifies tracking and personalization for Segment customers. More information is available in theEdge SDK README.\n- Consider using one of Segment\u2019sserver-side libraries. Using a server-side library eliminates concerns about tracking blockers and privacy browsers that can prevent Segment from loading. This option may require additional code to track actions like a Page call, as you now need to manually pass contextual information that would have been automatically collected by Analytics.js, likeurl,path, andreferrer. Note that some destinations are device-mode only.\nConsider using one of Segment\u2019sserver-side libraries. Using a server-side library eliminates concerns about tracking blockers and privacy browsers that can prevent Segment from loading. This option may require additional code to track actions like a Page call, as you now need to manually pass contextual information that would have been automatically collected by Analytics.js, likeurl,path, andreferrer. Note that some destinations are device-mode only.\n\n```\nurl\n```\n\n```\npath\n```\n\n```\nreferrer\n```\n\n## Installing the library under a custom global namespace\nWhen you load Analytics.js through snippet code, by default, the SDK installs onwindow.analyticsglobal variable. If this causes a conflict with another library on your page, you can change the global variable used by Analytics.js if you use snippet version 5.2.1 or later.\n\n```\nwindow.analytics\n```\nChange the global variable in the beginning of your snippet code as shown below. In this case, Analytics.js useswindow.custom_keyto load instead ofwindow.analytics.\n\n```\nwindow.custom_key\n```\n\n```\nwindow.analytics\n```\n\n```\n- !function(){var i=\"analytics\", ...\n  + !function(){var i=\"custom_key\", ...\n```\n\n```\n- !function(){var i=\"analytics\", ...\n  + !function(){var i=\"custom_key\", ...\n```\n\n## Add destinations from npm\nBundle the destinations you want loaded fromnpminstead of having them loaded from a remote CDN. This enables you to have fewer network requests when adding destinations.\n- To add actions-based destinations from npm:importvwofrom'@segment/analytics-browser-actions-vwo'importbrazefrom'@segment/analytics-browser-actions-braze'constanalytics=AnalyticsBrowser.load({writeKey:'<WRITE_KEY>',plugins:[vwo,braze],})Pass in the destination plugin to the added config option calledplugins.  A list of all action destination packages can be found on GitHub in the@segmentio/action-destinationsrepository.\nTo add actions-based destinations from npm:\n\n```\nimportvwofrom'@segment/analytics-browser-actions-vwo'importbrazefrom'@segment/analytics-browser-actions-braze'constanalytics=AnalyticsBrowser.load({writeKey:'<WRITE_KEY>',plugins:[vwo,braze],})\n```\n\n```\nimportvwofrom'@segment/analytics-browser-actions-vwo'importbrazefrom'@segment/analytics-browser-actions-braze'constanalytics=AnalyticsBrowser.load({writeKey:'<WRITE_KEY>',plugins:[vwo,braze],})\n```\nPass in the destination plugin to the added config option calledplugins.  A list of all action destination packages can be found on GitHub in the@segmentio/action-destinationsrepository.\n\n```\nplugins\n```\n- To add classic destinations from npm:import{AnalyticsBrowser}from'@segment/analytics-next'importGoogleAnalyticsIntegrationfrom'@segment/analytics.js-integration-google-analytics'// The following example assumes configuration for Google Analytics will be available in the fetched settingsconstanalytics=AnalyticsBrowser.load({writeKey:'<WRITE_KEY>',classicIntegrations:[GoogleAnalyticsIntegration]}),\nTo add classic destinations from npm:\n\n```\nimport{AnalyticsBrowser}from'@segment/analytics-next'importGoogleAnalyticsIntegrationfrom'@segment/analytics.js-integration-google-analytics'// The following example assumes configuration for Google Analytics will be available in the fetched settingsconstanalytics=AnalyticsBrowser.load({writeKey:'<WRITE_KEY>',classicIntegrations:[GoogleAnalyticsIntegration]}),\n```\n\n```\nimport{AnalyticsBrowser}from'@segment/analytics-next'importGoogleAnalyticsIntegrationfrom'@segment/analytics.js-integration-google-analytics'// The following example assumes configuration for Google Analytics will be available in the fetched settingsconstanalytics=AnalyticsBrowser.load({writeKey:'<WRITE_KEY>',classicIntegrations:[GoogleAnalyticsIntegration]}),\n```\n\n## Segment Inspector\nThe Segment Inspector is a Chrome web extension that enables you to debug your Segment integration on web applications instrumented with Analytics.js. Analytics.js sends data to the extension so that you can see how events change before they\u2019re sent to your destinations and so that you can verify that the event details are correct. The Segment Inspector also lets you analyze and confirm that API calls made from your website arrive to your Analytics.js source.\nFor the Segment inspector to work, you must enable the Analytics.js source.\nTo add the Segment Inspector as a Chrome extension:\n- Go to theSegment Inspector in the Chrome web store.\n- ClickAdd to Chrome.\n- ClickAdd Extensionin the pop-up window.\nOnce installed, use the Inspect Elements developer tool in Chrome to use the Segment Inspector. To access the Inspector, go to the top menu bar of Chrome and navigate toView > Developer > Developer Toolsand go to theSegmenttab. On the Segment tab, you can:\n- Filter the different calls by type\n- Search based off of the content in the calls\n- Identify users\n\n## Components of the Segment Inspector\nThe Segment Inspector is composed of these three components:\n- TheDiagnosticstabThis tab shows the library versions and the list of active integrations that are running.When you select an integration, you can see the options that passed while the integration loads. If you made any local overrides within the integration or on the page itself, they appear highlighted in the code.\n- This tab shows the library versions and the list of active integrations that are running.\n- When you select an integration, you can see the options that passed while the integration loads. If you made any local overrides within the integration or on the page itself, they appear highlighted in the code.\n- TheEventstabThis tab enables you to select an event and see the specific details of the event. You can view the time the event occurred, the status of the event (whether it sent or failed), what plugins were added, and how the context object changed. Any changes made to the payload appear highlighted.Select the double-checked icon to see the payload at the delivery stage.Select thefxicon to see the payloads after plugins ran.Select the single-checked icon to see the payload as it was when the event triggered.\n- This tab enables you to select an event and see the specific details of the event. You can view the time the event occurred, the status of the event (whether it sent or failed), what plugins were added, and how the context object changed. Any changes made to the payload appear highlighted.\n- Select the double-checked icon to see the payload at the delivery stage.\n- Select thefxicon to see the payloads after plugins ran.\n- Select the single-checked icon to see the payload as it was when the event triggered.\n- TheIdentitytabThis tab enables you to see the information of a user if you\u2019re using theidentifyfeature. You can associate the data to an individual and measure their activity across multiple sessions and devices. This tab only shows the user\u2019s traits that are on the client.If you\u2019re not using theidentifyfeature, the user remains anonymous.\n- This tab enables you to see the information of a user if you\u2019re using theidentifyfeature. You can associate the data to an individual and measure their activity across multiple sessions and devices. This tab only shows the user\u2019s traits that are on the client.\n\n```\nidentify\n```\n- If you\u2019re not using theidentifyfeature, the user remains anonymous.\n\n```\nidentify\n```\n\n## Example uses\nHere are some examples of using Analytics.js. Note that the examples assume Analytics.js is installed throughnpm.\n- Next.jswith-segment-analyticswith-segment-analytics-pages-router\n- with-segment-analytics\n- with-segment-analytics-pages-router\n- Vanilla React, VueSeeUsage in Common Frameworks & SPAs\n- SeeUsage in Common Frameworks & SPAs\n\n## External dependencies\nAnalytics.js production dependencies arelisted under thedependencieskey.\nThis page was last modified: 23 Jan 2025\n\n## Need support?\nQuestions? Problems? Need more info? Contact Segment Support for assistance!\n\n## Help improve these docs!\n\n## Was this page helpful?\nThanks for your feedback!\nCan we improve this doc?Send us feedback!\n\n## Get started with Segment",
  "url": "https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/"
}