{
  "title": " Spec: Common Fields | Segment Documentation",
  "content": "- Home\n- /\n- Connections\n- /\n- Spec\n- /\n- Spec: Common Fields\n\n## Spec: Common Fields\nOn this page\n- Structure\n- Context\n- Context fields automatically collected\n- Integrations\n- Timestamps\n- FAQ\nIn the SegmentSpecall theAPI callshave a common structure, and a few common fields.\nHowever, not all destinations accept all fields included in the Spec. Not sure which fields a destination accepts? Refer to the destination\u2019s documentation page, or check out theopen-source destination code on GitHub.\n\n## Segment University: The Segment Methods\nCheck out our high-level overview of these APIs in Segment University. (Must be logged in to access.)\n\n## Structure\nEvery API call has the same core structure and fields. These fields describe user identity, timestamping, and mechanical aides like API version.\nHere\u2019s an example of these common fields in raw JSON:\n\n```\n{\"anonymousId\":\"507f191e810c19729de860ea\",\"context\":{\"active\":true,\"app\":{\"name\":\"InitechGlobal\",\"version\":\"545\",\"build\":\"3.0.1.545\",\"namespace\":\"com.production.segment\"},\"campaign\":{\"name\":\"TPS Innovation Newsletter\",\"source\":\"Newsletter\",\"medium\":\"email\",\"term\":\"tps reports\",\"content\":\"image link\"},\"device\":{\"id\":\"B5372DB0-C21E-11E4-8DFC-AA07A5B093DB\",\"advertisingId\":\"7A3CBEA0-BDF5-11E4-8DFC-AA07A5B093DB\",\"adTrackingEnabled\":true,\"manufacturer\":\"Apple\",\"model\":\"iPhone7,2\",\"name\":\"maguro\",\"type\":\"ios\",\"token\":\"ff15bc0c20c4aa6cd50854ff165fd265c838e5405bfeb9571066395b8c9da449\"},\"ip\":\"8.8.8.8\",\"library\":{\"name\":\"analytics.js\",\"version\":\"2.11.1\"},\"locale\":\"en-US\",\"network\":{\"bluetooth\":false,\"carrier\":\"T-Mobile US\",\"cellular\":true,\"wifi\":false},\"os\":{\"name\":\"iPhone OS\",\"version\":\"8.1.3\"},\"page\":{\"path\":\"/academy/\",\"referrer\":\"\",\"search\":\"\",\"title\":\"Analytics Academy\",\"url\":\"https://segment.com/academy/\"},\"referrer\":{\"id\":\"ABCD582CDEFFFF01919\",\"type\":\"dataxu\"},\"screen\":{\"width\":320,\"height\":568,\"density\":2},\"groupId\":\"12345\",\"timezone\":\"Europe/Amsterdam\",\"userAgent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36\",\"userAgentData\":{\"brands\":[{\"brand\":\"Google Chrome\",\"version\":\"113\"},{\"brand\":\"Chromium\",\"version\":\"113\"},{\"brand\":\"Not-A.Brand\",\"version\":\"24\"}],\"mobile\":false,\"platform\":\"macOS\"}},\"integrations\":{\"All\":true,\"Mixpanel\":false,\"Salesforce\":false},\"event\":\"Report Submitted\",\"messageId\":\"022bb90c-bbac-11e4-8dfc-aa07a5b093db\",\"receivedAt\":\"2015-12-10T04:08:31.909Z\",\"sentAt\":\"2015-12-10T04:08:31.581Z\",\"timestamp\":\"2015-12-10T04:08:31.905Z\",\"type\":\"track\",\"userId\":\"97980cfea0067\",\"version\":2}\n```\n\n```\n{\"anonymousId\":\"507f191e810c19729de860ea\",\"context\":{\"active\":true,\"app\":{\"name\":\"InitechGlobal\",\"version\":\"545\",\"build\":\"3.0.1.545\",\"namespace\":\"com.production.segment\"},\"campaign\":{\"name\":\"TPS Innovation Newsletter\",\"source\":\"Newsletter\",\"medium\":\"email\",\"term\":\"tps reports\",\"content\":\"image link\"},\"device\":{\"id\":\"B5372DB0-C21E-11E4-8DFC-AA07A5B093DB\",\"advertisingId\":\"7A3CBEA0-BDF5-11E4-8DFC-AA07A5B093DB\",\"adTrackingEnabled\":true,\"manufacturer\":\"Apple\",\"model\":\"iPhone7,2\",\"name\":\"maguro\",\"type\":\"ios\",\"token\":\"ff15bc0c20c4aa6cd50854ff165fd265c838e5405bfeb9571066395b8c9da449\"},\"ip\":\"8.8.8.8\",\"library\":{\"name\":\"analytics.js\",\"version\":\"2.11.1\"},\"locale\":\"en-US\",\"network\":{\"bluetooth\":false,\"carrier\":\"T-Mobile US\",\"cellular\":true,\"wifi\":false},\"os\":{\"name\":\"iPhone OS\",\"version\":\"8.1.3\"},\"page\":{\"path\":\"/academy/\",\"referrer\":\"\",\"search\":\"\",\"title\":\"Analytics Academy\",\"url\":\"https://segment.com/academy/\"},\"referrer\":{\"id\":\"ABCD582CDEFFFF01919\",\"type\":\"dataxu\"},\"screen\":{\"width\":320,\"height\":568,\"density\":2},\"groupId\":\"12345\",\"timezone\":\"Europe/Amsterdam\",\"userAgent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36\",\"userAgentData\":{\"brands\":[{\"brand\":\"Google Chrome\",\"version\":\"113\"},{\"brand\":\"Chromium\",\"version\":\"113\"},{\"brand\":\"Not-A.Brand\",\"version\":\"24\"}],\"mobile\":false,\"platform\":\"macOS\"}},\"integrations\":{\"All\":true,\"Mixpanel\":false,\"Salesforce\":false},\"event\":\"Report Submitted\",\"messageId\":\"022bb90c-bbac-11e4-8dfc-aa07a5b093db\",\"receivedAt\":\"2015-12-10T04:08:31.909Z\",\"sentAt\":\"2015-12-10T04:08:31.581Z\",\"timestamp\":\"2015-12-10T04:08:31.905Z\",\"type\":\"track\",\"userId\":\"97980cfea0067\",\"version\":2}\n```\nIn more detail these common fields for every API call are:\n\n```\nanonymousId\n```\n\n```\nuserID\n```\n\n```\nuserId\n```\n\n```\nanonymousId\n```\n\n```\ncontext\n```\n\n```\nip\n```\n\n```\nlocale\n```\n\n```\nintegrations\n```\n\n```\nmessageId\n```\n\n```\nreceivedAt\n```\n\n```\nsentAt\n```\n\n```\ntimestamp\n```\n\n```\ntimestamp\n```\n\n```\ntype\n```\n\n```\n'identify'\n```\n\n```\n'group'\n```\n\n```\n'track'\n```\n\n```\n'page'\n```\n\n```\n'screen'\n```\n\n```\n'alias'\n```\n\n```\nuserId\n```\n\n```\nanonymousID\n```\n\n```\nuserId\n```\n\n```\nanonymousId\n```\n\n```\nversion\n```\nBeyond this common structure, each API call adds a few specialized top-level fields.\n\n## Context\nContext is a dictionary of extra information that provides useful context about a datapoint, for example the user\u2019sipaddress orlocale. You shouldonly useContext fields for their intended meaning.\n\n```\nip\n```\n\n```\nlocale\n```\n\n```\nactive\n```\n\n```\n.identify()\n```\n\n```\napp\n```\n\n```\nname\n```\n\n```\nversion\n```\n\n```\nbuild\n```\n\n```\ncampaign\n```\n\n```\nname\n```\n\n```\nsource\n```\n\n```\nmedium\n```\n\n```\nterm\n```\n\n```\ncontent\n```\n\n```\ndevice\n```\n\n```\nid\n```\n\n```\nadvertisingId\n```\n\n```\nmanufacturer\n```\n\n```\nmodel\n```\n\n```\nname\n```\n\n```\ntype\n```\n\n```\nversion\n```\n\n```\nmodel\n```\n\n```\niPhone 15 Pro Max\n```\n\n```\nmodel\n```\n\n```\niPhone16,2\n```\n\n```\nip\n```\n\n```\nlibrary\n```\n\n```\nname\n```\n\n```\nversion\n```\n\n```\nlocale\n```\n\n```\nen-US\n```\n\n```\nnetwork\n```\n\n```\nbluetooth\n```\n\n```\ncarrier\n```\n\n```\ncellular\n```\n\n```\nwifi\n```\n\n```\ncontext.network.cellular\n```\n\n```\ncontext.network.wifi\n```\n\n```\nos\n```\n\n```\nname\n```\n\n```\nversion\n```\n\n```\npage\n```\n\n```\npath\n```\n\n```\nreferrer\n```\n\n```\nsearch\n```\n\n```\ntitle\n```\n\n```\nurl\n```\n\n```\nreferrer\n```\n\n```\ntype\n```\n\n```\nname\n```\n\n```\nurl\n```\n\n```\nlink\n```\n\n```\nscreen\n```\n\n```\ndensity\n```\n\n```\nheight\n```\n\n```\nwidth\n```\n\n```\ntimezone\n```\n\n```\nAmerica/New_York\n```\n\n```\ngroupId\n```\n\n```\ntraits\n```\n\n```\ntraits\n```\n\n```\ntrack\n```\n\n```\nuserAgent\n```\n\n```\nuserAgentData\n```\n\n```\nbrands\n```\n\n```\nmobile\n```\n\n```\nplatform\n```\n\n```\nbitness\n```\n\n```\nmodel\n```\n\n```\nplatformVersion\n```\n\n```\nuaFullVersion\n```\n\n```\nfullVersionList\n```\n\n```\nwow64\n```\n\n```\nuserAgent\n```\n\n```\nchannel\n```\n\n## Context fields automatically collected\nBelow is a chart that shows you which context variables are populated automatically by the iOS, Android, and analytics.js libraries.\nOther libraries only collectcontext.library, any other context variables must be sent manually.\n\n```\ncontext.library\n```\n- IP Address isn\u2019t collected by Segment\u2019s libraries, but is instead filled in by Segment\u2019s servers when it receives a message forclient side events only.\nIPv6\nSegment doesn\u2019t support automatically collecting IPv6 addresses.\n- The Android library collectsscreen.densitywiththis method.\nThe Android library collectsscreen.densitywiththis method.\n\n```\nscreen.density\n```\n- userAgentData is only collected if theClient Hints APIis available on the browser.\nuserAgentData is only collected if theClient Hints APIis available on the browser.\n- Segment doesn\u2019t collect or append to the context of subsequent calls in the new mobile libraries (Swift, Kotlin, and React Native).\nSegment doesn\u2019t collect or append to the context of subsequent calls in the new mobile libraries (Swift, Kotlin, and React Native).\nTo pass the context variables which are not automatically collected by Segment\u2019s libraries, you must manually include them in the event payload. The following code shows how to passgroupIdas the context field of Analytics.js\u2019s.track()event:\n\n```\ngroupId\n```\n\n```\n.track()\n```\n\n```\nanalytics.track(\"Report Submitted\",{},{context:{groupId:\"1234\"}});\n```\n\n```\nanalytics.track(\"Report Submitted\",{},{context:{groupId:\"1234\"}});\n```\nTo add fields to the context object in the new mobile libraries, you must utilize a custom plugin. Documentation for creating plugins for each library can be found here:\n- React Native\n- Swift\n- Kotlin\n\n## Integrations\nA dictionary of destination names that the message should be sent to.'All'is a special key that applies when no key for a specific destination is found.\n\n```\n'All'\n```\nIntegrations defaults to the following:\n\n```\n{All:true,Salesforce:false,}\n```\n\n```\n{All:true,Salesforce:false,}\n```\nThis is becauseSalesforcehas strict limits on API calls.\nSending data to the rest of Segment\u2019s destinations is opt-out so if you don\u2019t specify the destination as false in this object, it will be sent to rest of the destinations that can accept it.\n\n## Timestamps\nEvery API call has four timestamps,originalTimestamp,timestamp,sentAt, andreceivedAt.They\u2019re used for very different purposes.\n\n```\noriginalTimestamp\n```\n\n```\ntimestamp\n```\n\n```\nsentAt\n```\n\n```\nreceivedAt.\n```\nAll timestamps areISO-8601date strings, and are in the UTC timezone.To see the user\u2019s timezone information, check thetimezonefield that\u2019s automatically collected byclient-side libraries.\n\n```\ntimezone\n```\nYou must use ISO-8601 date strings that include timezones when you use timestamps withEngage. If you send custom traits without a timezone, Segment doesn\u2019t save the timestamp value.\n\n## Timestamp overview\n\n```\noriginalTimestamp\n```\n\n```\ntimestamp\n```\n\n```\ntimestamp\n```\n\n```\noriginalTimestamp\n```\n\n```\nsentAt\n```\n\n```\nsentAt\n```\n\n```\ntimestamp\n```\n\n```\nsentAt\n```\n\n```\nreceivedAt\n```\n\n```\ntimestamp\n```\n\n```\nreceivedAt\n```\n\n```\ntimestamp\n```\n\n```\nreceivedAt\n```\n\n```\nsentAt\n```\n\n```\noriginalTimestamp\n```\n\n## originalTimestamp\nTheoriginalTimestamptells you when call was invoked on the client device or the value oftimestampthat you manually passed in.\n\n```\noriginalTimestamp\n```\n\n```\ntimestamp\n```\nNote:TheoriginalTimestamptimestamp is not useful for any analysis since it\u2019s not always trustworthy as it can be easily adjusted and affected by clock skew.\n\n```\noriginalTimestamp\n```\n\n## sentAt\nThesentAttimestamp specifies the clock time for the client\u2019s device when the network request was made to the Segment API. For libraries and systems that send batched requests, there can be a long gap between a datapoint\u2019stimestampandsentAt. Combined withreceivedAt, Segment usessentAtto correct the originaltimestampin situations where a user\u2019s device clock cannot be trusted (mobile phones and browsers). ThesentAtandreceivedAttimestamps are assumed to occur at the same time (maximum a few hundred milliseconds), and therefore the difference is the user\u2019s device clock skew, which can be applied back to correct thetimestamp.\n\n```\nsentAt\n```\n\n```\ntimestamp\n```\n\n```\nsentAt\n```\n\n```\nreceivedAt\n```\n\n```\nsentAt\n```\n\n```\ntimestamp\n```\n\n```\nsentAt\n```\n\n```\nreceivedAt\n```\n\n```\ntimestamp\n```\nNote:ThesentAttimestamp is not useful for any analysis since it\u2019s tainted by user\u2019s clock skew.\n\n```\nsentAt\n```\nSegment now adds `sentAt` to a payload when the batch is complete and initially tried to the Segment API for the Swift, Kotlin, and C# mobile libraries\nThis update changes the value of the Segment-calculatedtimestampto align closer with thereceivedAtvalue rather than theoriginalTimestampvalue. For most users who are online when events are sent, this does not significantly impact their data. However, if your application utilizes an offline mode where events are queued up for any period of time, thetimestampvalue for those users now more closely reflects when Segment received the events rather than the time they occurred on the users\u2019 devices.\n\n```\ntimestamp\n```\n\n```\nreceivedAt\n```\n\n```\noriginalTimestamp\n```\n\n```\ntimestamp\n```\n\n## receivedAt\nThereceivedAttimestamp is added to incoming messages as soon as they hit the API. It\u2019s used in combination withsentAtto correct clock skew, and also to aid with debugging libraries and systems that deliver events in batches.\n\n```\nreceivedAt\n```\n\n```\nsentAt\n```\nThereceivedAttimestamp is most important as the sort key in Segment\u2019s Warehouses product. Use this for max query speed when retrieving data from your Warehouse.\n\n```\nreceivedAt\n```\nNote:Chronological order of events is not ensured withreceivedAt.\n\n```\nreceivedAt\n```\n\n## timestamp\nThetimestamptimestamp specifies when the data point occurred, corrected for client-device clock skew. This is the timestamp that is passed to downstream destinations and used for historical replays. It is important to use this timestamp for importing historical data to the API.\n\n```\ntimestamp\n```\nIf you are using the Segment server Source libraries, or passing calls directly to the HTTP API endpoint, you can manually set thetimestampfield. This change updates theoriginalTimestampfield of the Segment event. If you use a Segment Source in device mode, the library generatestimestampand you cannot manually set one directly in the call payload.\n\n```\ntimestamp\n```\n\n```\noriginalTimestamp\n```\n\n```\ntimestamp\n```\nSegment calculatestimestampastimestamp = receivedAt - (sentAt - originalTimeStamp).\n\n```\ntimestamp\n```\n\n```\ntimestamp = receivedAt - (sentAt - originalTimeStamp)\n```\nFor client-side tracking it\u2019s possible for the client to spoof theoriginalTimeStamp, which may result in a calculatedtimestampvalue set in the future.\n\n```\noriginalTimeStamp\n```\n\n```\ntimestamp\n```\n\n## FAQ\n\n## Why Are Events Received with Timestamps Set in the Past or Future?\nIf you\u2019re using one of Segment\u2019s client-side libraries, please note that several factors can cause timestamp discrepancies in your event data.\n- Overriding Timestamp Value:When a manual timestamp is set in the payload with a date in the past, it can cause events to appear as if they were sent earlier than they actually were.\n- When a manual timestamp is set in the payload with a date in the past, it can cause events to appear as if they were sent earlier than they actually were.\n- Analytics.js Source with Retries Enabled:TheRetriesfeature supports offline traffic by queuing events in Analytics.js. These events are sent or retried later when an internet connection is available, keeping the original timestamp intact.\n- TheRetriesfeature supports offline traffic by queuing events in Analytics.js. These events are sent or retried later when an internet connection is available, keeping the original timestamp intact.\n- Mobile App Backgrounded or Closed:If a user closes the app, events may be queued within the app. These queued events won\u2019t be sent until the app is re-opened, potentially in the future, leading to timestamp discrepancies.\n- If a user closes the app, events may be queued within the app. These queued events won\u2019t be sent until the app is re-opened, potentially in the future, leading to timestamp discrepancies.\n- Inaccurate Browser/Device Clock Settings:Timestamps can be incorrect if the client\u2019s device time is inaccurate, as theoriginalTimestamprelies on the client device\u2019s clock, which can be manually adjusted.\n- Timestamps can be incorrect if the client\u2019s device time is inaccurate, as theoriginalTimestamprelies on the client device\u2019s clock, which can be manually adjusted.\n\n```\noriginalTimestamp\n```\n- Traffic from Internet Bots:Internet Botscan sometimes send requests with unusual timestamps, either intentionally or due to incorrect settings, leading to discrepancies.\n- Internet Botscan sometimes send requests with unusual timestamps, either intentionally or due to incorrect settings, leading to discrepancies.\nThis page was last modified: 06 Feb 2025\n\n## Need support?\nQuestions? Problems? Need more info? Contact Segment Support for assistance!\n\n## Help improve these docs!\n\n## Was this page helpful?\nThanks for your feedback!\nCan we improve this doc?Send us feedback!\n\n## Get started with Segment",
  "url": "https://segment.com/docs/connections/spec/common/"
}